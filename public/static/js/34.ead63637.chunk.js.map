{"version":3,"sources":["views/CustomComponents/EstateAdminPages/Propertypages/ProperetyImgUpload.js","views/CustomComponents/EstateAdminPages/Propertypages/CreateProperty.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/Row.js","../node_modules/reactstrap/es/Label.js","../node_modules/reactstrap/es/Form.js"],"names":["ImgUpload","fileUrls","setFileUrls","state","setState","setimgUpLoading","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","previewVisible","previewImage","fileList","previewTitle","handlePreview","a","url","preview","originFileObj","name","substring","lastIndexOf","uploadButton","className","style","height","width","size","props","beforeUpload","isLt2M","isJpgOrPng","type","formData","FormData","append","console","log","useJwt","singleFileupload","then","res","uid","status","data","payload","fileurl","catch","err","Error","toast","action","IMG_BASE_URL","listType","onPreview","onChange","filter","some","b","x","includes","length","visible","title","footer","onCancel","alt","src","withReactContent","Swal","CreateProperty","history","useHistory","userRole","JSON","parse","localStorage","getItem","role","bath_roomRef","useRef","bed_roomRef","branch_idRef","land_lord_idRef","property_typeRef","addressRef","useState","imgUpLoading","gasfileUrls","setgasFileUrls","gasstate","setgasState","powerfileUrls","setpowerFileUrls","powerstate","setpowerState","insurencefileUrls","setinsurenceFileUrls","insurencestate","setinsurenceState","isLoading","setLoading","postcode","setPostCode","searching","setSearching","ukaddress","setukaddress","property_rent","land_lord_id","branch_id","house_details","latitude","longitude","property_type","bed_room","bath_room","property_image","is_gas_certificate","gas_certificate","gas_certificate_expire_date","is_power_certificate","power_certificate","power_certificate_expire_date","is_property_insurence_certificate","property_insurence_certificate","property_insurence_certificate_expire_date","userInput","setUserInput","BranchList","setBranchList","landlordList","setlandlordList","useEffect","handleChange","e","target","value","onSubmit","preventDefault","branchID","id","submitData","Number","createProperty","Success","push","autoComplete","tag","Ripple","color","onClick","marginTop","md","ref","theme","selectThemeColors","classNamePrefix","maxMenuHeight","selected","options","map","label","branch_name","isClearable","required","opacity","onFocus","current","select","focus","user_id","full_name","for","placeholder","min","addonType","outline","ukAddressEndpoint","postCode","addresses","element","building_number","thoroughfare","locality","town_or_city","checked","Date","toLocaleDateString","disabled","propTypes","tagPropType","inverse","PropTypes","bool","string","body","cssModule","object","innerRef","oneOfType","func","Card","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","rowColsPropType","number","noGutters","form","xs","sm","lg","xl","widths","Row","colClasses","forEach","colWidth","i","colSize","isXs","stringOrNumberProp","columnProps","shape","order","offset","children","node","hidden","check","array","getColumnSizeClass","Label","htmlFor","columnProp","colClass","isObject","_classNames","colSizeInterfix","inline","Form","_Component","_this","call","this","getRef","bind","_assertThisInitialized","submit","_inheritsLoose","_proto","prototype","render","_this$props","Component"],"mappings":"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","file":"static/js/34.ead63637.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Upload, Modal } from 'antd'\r\n// import { PlusOutlined } from '@ant-design/icons'\r\nimport 'antd/dist/antd.css'\r\nimport { Slide, toast } from 'react-toastify'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Camera } from 'react-feather'\r\nimport { Error } from '../../../viewhelper'\r\nimport { IMG_BASE_URL } from '../../../Configuarables'\r\n\r\nconst ImgUpload = ({ fileUrls, setFileUrls, state, setState, setimgUpLoading }) => {\r\n    // const [fileUrls, setFileUrls] = useState([])\r\n    function getBase64(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader()\r\n            reader.readAsDataURL(file)\r\n            reader.onload = () => resolve(reader.result)\r\n            reader.onerror = error => reject(error)\r\n        })\r\n    }\r\n    // const [state, setState] = useState({\r\n    //     previewVisible: false,\r\n    //     previewImage: '',\r\n    //     previewTitle: '',\r\n    //     fileList: []\r\n    // })\r\n    const { previewVisible, previewImage, fileList, previewTitle } = state\r\n    const handleCancel = () => setState({ ...state, previewVisible: false })\r\n\r\n    const handlePreview = async file => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj)\r\n        }\r\n        // console.log('base64', file.preview)\r\n        setState({\r\n            ...state,\r\n            previewImage: file.url || file.preview,\r\n            previewVisible: true,\r\n            previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\r\n        })\r\n    }\r\n    const handleChange = ({ fileList, file }) => {\r\n        // console.log(fileList, fileUrls)\r\n        if (file.size / 1024 / 1024 > 2) {\r\n            return 0\r\n        }\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/bmp' || file.type === 'image/gif'\r\n        if (!isJpgOrPng) {\r\n            return 0\r\n        }\r\n        setFileUrls(fileUrls.filter(a => fileList.some(b => a.uid === b.uid)))\r\n        setState({ ...state, fileList: fileList.filter(x => x.type.includes('image')) })\r\n    }\r\n    const uploadButton = (\r\n        <div className='text-center p-1' style={{ height: '102px', width: '102px' }}>\r\n            <span ><Camera size={20} className='my-1' /></span> <br />\r\n            <span>Add Image</span>\r\n        </div>\r\n        // <div>\r\n        //     <PlusOutlined />\r\n        //     <div style={{ marginTop: 8 }}>Upload</div>\r\n        // </div>\r\n    )\r\n    const props = {\r\n        beforeUpload: file => {\r\n            const isLt2M = file.size / 1024 / 1024 < 2\r\n            const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png' || file.type === 'image/bmp' || file.type === 'image/gif'\r\n            if (!isJpgOrPng) {\r\n                toast.error(`${file.name} is not a Image file`)\r\n            } else if (!isLt2M) {\r\n                toast.error('Image must smaller than 2MB!')\r\n            } else {\r\n                const formData = new FormData()\r\n                formData.append('complain_image', file)\r\n                setimgUpLoading(true)\r\n                console.log('base64', file)\r\n                useJwt.singleFileupload(formData).then(res => {\r\n                    // alert(\"upload done\")\r\n                    setimgUpLoading(false)\r\n                    setFileUrls([\r\n                        ...fileUrls,\r\n                        {\r\n                            uid: file.uid,\r\n                            name: 'image.png',\r\n                            status: 'done',\r\n                            type: \"image/jpeg\",\r\n                            url: res.data.payload.fileurl\r\n                        }\r\n                    ])\r\n                }).catch(err => {\r\n                    setimgUpLoading(false)\r\n                    console.log(err)\r\n                    Error(err)\r\n                })\r\n                return isJpgOrPng && isLt2M\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Upload\r\n                {...props}\r\n                action={`${IMG_BASE_URL}/api/fackupload`}\r\n                listType=\"picture-card\"\r\n                fileList={fileList}\r\n                onPreview={handlePreview}\r\n                onChange={handleChange}\r\n            >\r\n                {fileList.length >= 1 ? null : uploadButton}\r\n            </Upload>\r\n            <Modal\r\n                visible={previewVisible}\r\n                title={previewTitle}\r\n                footer={null}\r\n                onCancel={handleCancel}\r\n            >\r\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImgUpload","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, Upload\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport ImgUpload from './ProperetyImgUpload'\r\nconst MySwal = withReactContent(Swal)\r\n\r\nconst CreateProperty = () => {\r\n    const history = useHistory()\r\n    const userRole = JSON.parse(localStorage.getItem('userData')).role\r\n    const bath_roomRef = useRef()\r\n    const bed_roomRef = useRef()\r\n    const branch_idRef = useRef()\r\n    const land_lord_idRef = useRef()\r\n    const property_typeRef = useRef()\r\n    const addressRef = useRef()\r\n\r\n    const [imgUpLoading, setimgUpLoading] = useState(false)\r\n    const [fileUrls, setFileUrls] = useState([])\r\n    const [state, setState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    const [gasfileUrls, setgasFileUrls] = useState([])\r\n    const [gasstate, setgasState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    // *******\r\n    const [powerfileUrls, setpowerFileUrls] = useState([])\r\n    const [powerstate, setpowerState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    const [insurencefileUrls, setinsurenceFileUrls] = useState([])\r\n    const [insurencestate, setinsurenceState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    // *********\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [postcode, setPostCode] = useState('')\r\n    const [searching, setSearching] = useState(false)\r\n    const [ukaddress, setukaddress] = useState([])\r\n    const [userInput, setUserInput] = useState({\r\n        property_rent: 0,\r\n        land_lord_id: '',\r\n        branch_id: '',\r\n        house_details: '',\r\n        latitude: 0,\r\n        longitude: 0,\r\n        property_type: '',\r\n        bed_room: '',\r\n        bath_room: '',\r\n        property_image: '',\r\n\r\n        is_gas_certificate: false,\r\n        gas_certificate: '',\r\n        gas_certificate_expire_date: null,\r\n\r\n        is_power_certificate: false,\r\n        power_certificate: null,\r\n        power_certificate_expire_date: null,\r\n\r\n        is_property_insurence_certificate: false,\r\n        property_insurence_certificate: null,\r\n        property_insurence_certificate_expire_date: null\r\n    })\r\n    const propertyTypes = ['Flat', 'Semi-detach', 'Detach', 'Terraced', 'Bungalow', 'Park home']\r\n    const bedroomTypes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    const bathroomTypes = [1, 2, 3, 4, 5]\r\n    const [BranchList, setBranchList] = useState([])\r\n    const [landlordList, setlandlordList] = useState([])\r\n    useEffect(() => {\r\n        useJwt.BranchList().then(res => {\r\n            console.log(res.data.payload)\r\n            setBranchList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n        useJwt.landlordList().then(res => {\r\n            console.log('landlordList', res.data.payload)\r\n            setlandlordList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    const handlePostCodeSearch = e => {\r\n        e.preventDefault()\r\n        setSearching(true)\r\n        useJwt.ukAddressEndpoint({ postCode: postcode }).then(res => {\r\n            console.log(res.data.payload)\r\n            const { latitude, longitude } = res.data.payload\r\n            setUserInput({ ...userInput, latitude, longitude })\r\n            setukaddress(res.data.payload.addresses.map(element => `${element.building_number}, ${element.thoroughfare}, ${element.locality}, ${element.town_or_city}`))\r\n            setSearching(false)\r\n        }).catch(err => {\r\n            setukaddress([])\r\n            setSearching(false)\r\n            Error(err)\r\n        })\r\n    }\r\n    const handleChange = e => {\r\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (imgUpLoading) {\r\n            toast.error('please wait, image is uploading to the server')\r\n            return 0\r\n        }\r\n        if (!fileUrls.length) {\r\n            toast.error('please upload property image')\r\n            return 0\r\n        }\r\n        if (userInput.is_gas_certificate && !gasfileUrls.length) {\r\n            toast.error('please upload your gas certificate')\r\n            return 0\r\n        }\r\n        if (userInput.is_power_certificate && !powerfileUrls.length) {\r\n            toast.error('please upload your power certificate')\r\n            return 0\r\n        }\r\n        if (userInput.is_property_insurence_certificate && !insurencefileUrls.length) {\r\n            toast.error('please upload your insurance certificate')\r\n            return 0\r\n        }\r\n        const { property_rent, land_lord_id, branch_id, house_details, latitude, longitude, property_type, bed_room, bath_room, is_gas_certificate, gas_certificate_expire_date, is_power_certificate, power_certificate_expire_date, is_property_insurence_certificate, property_insurence_certificate_expire_date } = userInput\r\n\r\n        const property_image = fileUrls.length ? fileUrls[0].url : null\r\n        const gas_certificate = is_gas_certificate ? gasfileUrls[0].url : null\r\n        const power_certificate = is_power_certificate ? powerfileUrls[0].url : null\r\n        const property_insurence_certificate = is_property_insurence_certificate ? insurencefileUrls[0].url : null\r\n        const branchID = !branch_id ? BranchList[0].id : branch_id\r\n\r\n        const submitData = {\r\n            property_rent: Number(property_rent),\r\n            land_lord_id,\r\n            branch_id: branchID,\r\n            house_details,\r\n            latitude,\r\n            longitude,\r\n            property_type,\r\n            bed_room,\r\n            bath_room,\r\n            property_image,\r\n            gas_certificate,\r\n            power_certificate,\r\n            property_insurence_certificate,\r\n            is_gas_certificate,\r\n            gas_certificate_expire_date,\r\n            is_power_certificate,\r\n            power_certificate_expire_date,\r\n            is_property_insurence_certificate,\r\n            property_insurence_certificate_expire_date\r\n        }\r\n        console.log(submitData)\r\n        setLoading(true)\r\n        useJwt.createProperty(submitData).then(res => {\r\n            console.log(res)\r\n            Success(res)\r\n            history.push(`/${userRole}/MyProperty`)\r\n            setLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Form style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <Card >\r\n                    <CardHeader className='border-bottom'>\r\n                        <CardTitle tag='h4'>Create Property</CardTitle>\r\n                        <CardTitle tag='h4'><Button.Ripple color='primary' onClick={e => history.push(`/${userRole}/BulkPropertiesUpload`)}>\r\n                            <Upload size={14} style={{ marginTop: '-2px' }} />&nbsp;\r\n                            <span>Bulk Create</span>\r\n                        </Button.Ripple></CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody className=\"row  pt-1\">\r\n                        {userRole !== 'EstateManager' && <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Branch</Label>\r\n                                <><Select\r\n                                    ref={branch_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='branch_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, branch_id: selected.value })\r\n                                    }}\r\n                                    options={BranchList.map(x => { return { value: x.id, label: x.branch_name } })}\r\n                                    // value={{ value: userInput.branch_id, label: userInput.branch_id }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => branch_idRef.current.select.focus()}\r\n                                        value={userInput.branch_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>}\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Landlord</Label>\r\n                                <><Select\r\n                                    ref={land_lord_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='land_lord_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, land_lord_id: selected.value })\r\n                                    }}\r\n                                    options={landlordList.map(x => { return { value: x.user_id, label: x.full_name } })}\r\n                                    // value={{ value: userInput.land_lord_id, label: userInput.land_lord_id }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => land_lord_idRef.current.select.focus()}\r\n                                        value={userInput.land_lord_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select Property Type</Label>\r\n                                <><Select\r\n                                    ref={property_typeRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='property_type'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, property_type: selected.value })\r\n                                    }}\r\n                                    options={propertyTypes.map(x => { return { value: x, label: x } })}\r\n                                    // value={{ value: userInput.property_type, label: userInput.property_type }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => property_typeRef.current.select.focus()}\r\n                                        value={userInput.property_type || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select How Many Bedroom</Label>\r\n                                <><Select\r\n                                    ref={bed_roomRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='bed_room'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, bed_room: selected.value })\r\n                                    }}\r\n                                    options={bedroomTypes.map(x => { return { value: x, label: x } })}\r\n                                    // value={{ value: userInput.bed_room, label: userInput.bed_room }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => bed_roomRef.current.select.focus()}\r\n                                        value={userInput.bed_room || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select How Many Bathroom</Label>\r\n                                <><Select\r\n                                    ref={bath_roomRef}\r\n                                    maxMenuHeight={150}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='bath_room'\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, bath_room: selected.value })\r\n                                    }}\r\n                                    options={bathroomTypes.map(x => { return { value: x, label: x } })}\r\n                                    // value={{ value: userInput.bath_room, label: userInput.bath_room }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => bath_roomRef.current.select.focus()}\r\n                                        value={userInput.bath_room || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label for=\"property_rent\">Property Rent</Label>\r\n                                <Input\r\n                                    required\r\n                                    type=\"number\"\r\n                                    id='property_rent'\r\n                                    name=\"property_rent\"\r\n                                    placeholder=\"100\"\r\n                                    min={1}\r\n                                    value={userInput.property_rent}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col md='6' >\r\n                            <Label for=\"postcode\">Search address by Post Code</Label>\r\n                            <InputGroup>\r\n                                <Input\r\n                                    // required\r\n                                    type=\"text\"\r\n                                    id='postcode'\r\n                                    name=\"postcode\"\r\n                                    placeholder=\"enter a valid postcode\"\r\n                                    value={postcode}\r\n                                    onChange={e => setPostCode(e.target.value)}\r\n                                />\r\n                                <InputGroupAddon addonType='append'>\r\n                                    <Button color='primary' outline type='button' onClick={handlePostCodeSearch}>\r\n                                        {searching ? <Spinner size='sm' /> : 'Search'}\r\n                                    </Button>\r\n                                </InputGroupAddon>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col md='6' >\r\n                            <Label>Address</Label>\r\n                            <><Select\r\n                                ref={addressRef}\r\n                                theme={selectThemeColors}\r\n                                className='react-select'\r\n                                maxMenuHeight={150}\r\n                                classNamePrefix='select'\r\n                                name='house_details'\r\n                                onChange={selected => {\r\n                                    setUserInput({ ...userInput, house_details: selected.value })\r\n                                }}\r\n                                options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                                value={{ value: userInput.house_details, label: userInput.house_details }}\r\n                                // isDisabled={!ukaddress.length}\r\n                                isClearable={false}\r\n                            /><Input\r\n                                    required\r\n                                    style={{\r\n                                        opacity: 0,\r\n                                        width: \"100%\",\r\n                                        height: 0\r\n                                        // position: \"absolute\"\r\n                                    }}\r\n                                    onFocus={e => addressRef.current.select.focus()}\r\n                                    value={userInput.house_details || ''}\r\n                                    onChange={e => ''}\r\n                                /></>\r\n                        </Col>\r\n\r\n                        <Col md='12' className='my-0'>\r\n                            <Label>Property Image</Label>\r\n                            <ImgUpload\r\n                                setimgUpLoading={setimgUpLoading}\r\n                                state={state}\r\n                                setState={setState}\r\n                                fileUrls={fileUrls}\r\n                                setFileUrls={setFileUrls} />\r\n                        </Col>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row className=\"match-height\">\r\n                    <Col md='4'>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_gas_certificate\"></Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_gas_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_gas_certificate: e.target.checked })}\r\n                                        checked={userInput.is_gas_certificate}\r\n                                        label='Gas Certified?' />\r\n                                </Col>\r\n                                {userInput.is_gas_certificate && <><Col md='12' className=\"mt-1\" >\r\n                                    <FormGroup>\r\n                                        <Label for=\"gas_certificate_expire_date\">Gas Certificate Expire Date</Label>\r\n                                        <Input\r\n                                            required\r\n                                            type=\"date\"\r\n                                            min={new Date().toLocaleDateString('fr-CA')}\r\n                                            id='gas_certificate_expire_date'\r\n                                            name=\"gas_certificate_expire_date\"\r\n                                            placeholder=\"100\"\r\n                                            value={userInput.gas_certificate_expire_date}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Gas Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={gasstate}\r\n                                            setState={setgasState}\r\n                                            fileUrls={gasfileUrls}\r\n                                            setFileUrls={setgasFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    {/* power */}\r\n                    <Col md='4'>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_power_certificate\">Power Certified?</Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_power_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_power_certificate: e.target.checked })}\r\n                                        checked={userInput.is_power_certificate}\r\n                                        label='Power Certified?' />\r\n                                </Col>\r\n\r\n                                {userInput.is_power_certificate && <>\r\n                                    <Col md='12' className=\"mt-1\" >\r\n                                        <FormGroup>\r\n                                            <Label for=\"power_certificate_expire_date\">Power Certificate Expire Date</Label>\r\n                                            <Input\r\n                                                required\r\n                                                type=\"date\"\r\n                                                min={new Date().toLocaleDateString('fr-CA')}\r\n                                                id='power_certificate_expire_date'\r\n                                                name=\"power_certificate_expire_date\"\r\n                                                placeholder=\"100\"\r\n                                                value={userInput.power_certificate_expire_date}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Power Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={powerstate}\r\n                                            setState={setpowerState}\r\n                                            fileUrls={powerfileUrls}\r\n                                            setFileUrls={setpowerFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md='4'>\r\n                        {/* insurance */}\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_property_insurence_certificate\">Insurence Certified?</Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_property_insurence_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_property_insurence_certificate: e.target.checked })}\r\n                                        checked={userInput.is_property_insurence_certificate}\r\n                                        label='Insurance Certified?' />\r\n                                </Col>\r\n\r\n                                {userInput.is_property_insurence_certificate && <>\r\n                                    <Col md='12' className=\"mt-1\" >\r\n                                        <FormGroup>\r\n                                            <Label for=\"property_insurence_certificate_expire_date\">Insurance Certificate Expire Date</Label>\r\n                                            <Input\r\n                                                required\r\n                                                type=\"date\"\r\n                                                min={new Date().toLocaleDateString('fr-CA')}\r\n                                                id='property_insurence_certificate_expire_date'\r\n                                                name=\"property_insurence_certificate_expire_date\"\r\n                                                placeholder=\"100\"\r\n                                                value={userInput.property_insurence_certificate_expire_date}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Insurance Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={insurencestate}\r\n                                            setState={setinsurenceState}\r\n                                            fileUrls={insurencefileUrls}\r\n                                            setFileUrls={setinsurenceFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Card>\r\n                    <Row>\r\n                        <Col md=\"12 text-center\">\r\n                            <Button.Ripple className='my-1' color='primary' type=\"submit\" disabled={isLoading}>\r\n                                {isLoading ? <Spinner size='sm' /> : 'Submit'}\r\n                            </Button.Ripple>\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            </Form>\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default CreateProperty","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar rowColWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar rowColsPropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar propTypes = {\n  tag: tagPropType,\n  noGutters: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  form: PropTypes.bool,\n  xs: rowColsPropType,\n  sm: rowColsPropType,\n  md: rowColsPropType,\n  lg: rowColsPropType,\n  xl: rowColsPropType\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: rowColWidths\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      noGutters = props.noGutters,\n      Tag = props.tag,\n      form = props.form,\n      widths = props.widths,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"noGutters\", \"tag\", \"form\", \"widths\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var colSize = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!colSize) {\n      return;\n    }\n\n    var isXs = !i;\n    colClasses.push(isXs ? \"row-cols-\" + colSize : \"row-cols-\" + colWidth + \"-\" + colSize);\n  });\n  var classes = mapToCssModules(classNames(className, noGutters ? 'no-gutters' : null, form ? 'form-row' : 'row', colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = propTypes;\nRow.defaultProps = defaultProps;\nexport default Row;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;"],"sourceRoot":""}