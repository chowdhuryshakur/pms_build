{"version":3,"sources":["views/components/modal/ModalBasic.js","views/components/modal/ModalThemes.js","views/components/modal/ModalSizes.js","views/components/modal/ModalEvents.js","views/components/modal/ModalFormAndScroll.js","views/components/modal/ModalUnmount.js","views/components/modal/ModalSourceCode.js","views/components/modal/index.js","@core/components/breadcrumbs/index.js","../node_modules/reactstrap/es/ButtonDropdown.js","../node_modules/reactstrap/es/CardTitle.js","../node_modules/reactstrap/es/CardText.js","../node_modules/reactstrap/es/CardHeader.js","../node_modules/reactstrap/es/Breadcrumb.js","../node_modules/reactstrap/es/BreadcrumbItem.js","../node_modules/reactstrap/es/UncontrolledButtonDropdown.js","@core/components/card-snippet/index.js","../node_modules/reactstrap/es/Form.js","../node_modules/reactstrap/es/Alert.js"],"names":["ModalBasic","useState","basicModal","setBasicModal","centeredModal","setCenteredModal","disabledModal","setDisabledModal","disabledAnimation","setDisabledAnimation","className","Button","Ripple","color","outline","onClick","Modal","isOpen","toggle","ModalHeader","ModalBody","ModalFooter","backdrop","fade","Alert","ModalConfig","id","title","modalColor","btnColor","ModalTheme","modal","setModal","toggleModal","renderModal","map","item","modalClassName","btnTitle","modalTitle","modalClass","ModalSizes","ModalEvents","modalOpened","setModalOpened","modalClosed","setModalClosed","onOpened","alert","onClosed","ModalForm","formModal","setFormModal","scrollModal","setScrollModal","scrollInnerModal","setScrollInnerModal","FormGroup","Label","for","Input","type","placeholder","scrollable","ModalDestructuring","visibility","setVisibility","unmountOnClose","setUnmountOnClose","Form","onSubmit","e","preventDefault","Row","Col","sm","md","lg","name","onChange","value","target","JSON","parse","changeUnmountOnClose","rows","modalBasic","modalTheme","modalSizes","modalEvents","modalForm","modalUnmount","Modals","useEffect","Prism","highlightAll","breadCrumbTitle","breadCrumbParent","breadCrumbActive","code","CardText","ModalThemes","ModalFormAndScroll","ModalUnmount","BreadCrumbs","props","breadCrumbParent2","breadCrumbParent3","tag","to","active","size","right","Link","propTypes","children","PropTypes","node","ButtonDropdown","React","createElement","Dropdown","_extends","group","tagPropType","string","cssModule","object","CardTitle","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","defaultProps","CardHeader","listTag","listClassName","Breadcrumb","ListTag","label","listClasses","bool","BreadcrumbItem","undefined","ownKeys","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","omitKeys","UncontrolledButtonDropdown","_Component","_this","call","this","state","defaultOpen","bind","_assertThisInitialized","_inheritsLoose","_proto","prototype","setState","render","omit","Component","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_objectSpread","CardSnippet","noBody","iconCode","setIsOpen","IconCode","Wrapper","Fragment","CardBody","inline","innerRef","oneOfType","func","getRef","submit","ref","_this$props","closeClassName","closeAriaLabel","transition","shape","Fade","unmountOnExit","closeClasses","alertTransition","baseClass","timeout","in","role"],"mappings":"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","file":"static/js/114.2d7ec5d2.chunk.js","sourcesContent":["import { Fragment, useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Alert } from 'reactstrap'\r\n\r\nconst ModalBasic = () => {\r\n  const [basicModal, setBasicModal] = useState(false)\r\n  const [centeredModal, setCenteredModal] = useState(false)\r\n  const [disabledModal, setDisabledModal] = useState(false)\r\n  const [disabledAnimation, setDisabledAnimation] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='basic-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setBasicModal(!basicModal)}>\r\n          Basic Modal\r\n        </Button.Ripple>\r\n        <Modal isOpen={basicModal} toggle={() => setBasicModal(!basicModal)}>\r\n          <ModalHeader toggle={() => setBasicModal(!basicModal)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            <h5>Check First Paragraph</h5>\r\n            Oat cake ice cream candy chocolate cake chocolate cake cotton candy dragée apple pie. Brownie carrot cake\r\n            candy canes bonbon fruitcake topping halvah. Cake sweet roll cake cheesecake cookie chocolate cake\r\n            liquorice.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setBasicModal(!basicModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='vertically-centered-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setCenteredModal(!centeredModal)}>\r\n          Vertically Centered\r\n        </Button.Ripple>\r\n        <Modal isOpen={centeredModal} toggle={() => setCenteredModal(!centeredModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setCenteredModal(!centeredModal)}>Vertically Centered</ModalHeader>\r\n          <ModalBody>\r\n            Oat cake ice cream candy chocolate cake chocolate cake cotton candy dragée apple pie. Brownie carrot cake\r\n            candy canes bonbon fruitcake topping halvah. Cake sweet roll cake cheesecake cookie chocolate cake\r\n            liquorice.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setCenteredModal(!centeredModal)}>\r\n              Accept\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='disabled-backdrop-modal'>\r\n        <Fragment>\r\n          <Button.Ripple color='primary' outline onClick={() => setDisabledModal(!disabledModal)}>\r\n            Disabled Backdrop\r\n          </Button.Ripple>\r\n          <Modal\r\n            isOpen={disabledModal}\r\n            toggle={() => setDisabledModal(!disabledModal)}\r\n            className='modal-dialog-centered'\r\n            backdrop={false}\r\n          >\r\n            <ModalHeader toggle={() => setDisabledModal(!disabledModal)}>Disabled Backdrop</ModalHeader>\r\n            <ModalBody>\r\n              Candy oat cake topping topping chocolate cake. Icing pudding jelly beans I love chocolate carrot cake\r\n              wafer candy canes. Biscuit croissant fruitcake bonbon soufflé.\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color='primary' onClick={() => setDisabledModal(!disabledModal)}>\r\n                Accept\r\n              </Button>{' '}\r\n            </ModalFooter>\r\n          </Modal>\r\n        </Fragment>\r\n      </div>\r\n      <div className='disabled-animation-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setDisabledAnimation(!disabledAnimation)}>\r\n          Disabled Animation\r\n        </Button.Ripple>\r\n        <Modal\r\n          isOpen={disabledAnimation}\r\n          toggle={() => setDisabledAnimation(!disabledAnimation)}\r\n          className='modal-dialog-centered'\r\n          fade={false}\r\n        >\r\n          <ModalHeader toggle={() => setDisabledAnimation(!disabledAnimation)}>Disabled Fade</ModalHeader>\r\n          <ModalBody>\r\n            Chocolate bar jelly dragée cupcake chocolate bar I love donut liquorice. Powder I love marzipan donut candy\r\n            canes jelly-o. Dragée liquorice apple pie candy biscuit danish lemon drops sugar plum.\r\n            <Alert className='mt-1' color='success'>\r\n              <div className='alert-body'>Well done! You successfully read this important alert message.</div>\r\n            </Alert>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setDisabledAnimation(!disabledAnimation)}>\r\n              Accept\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ModalBasic\r\n","import { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalConfig = [\r\n  {\r\n    id: 1,\r\n    title: 'Primary',\r\n    modalColor: 'modal-primary',\r\n    btnColor: 'primary'\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Secondary',\r\n    modalColor: 'modal-secondary',\r\n    btnColor: 'secondary'\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Success',\r\n    modalColor: 'modal-success',\r\n    btnColor: 'success'\r\n  },\r\n  {\r\n    id: 4,\r\n    title: 'Danger',\r\n    modalColor: 'modal-danger',\r\n    btnColor: 'danger'\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Warning',\r\n    modalColor: 'modal-warning',\r\n    btnColor: 'warning'\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Info',\r\n    modalColor: 'modal-info',\r\n    btnColor: 'info'\r\n  },\r\n  {\r\n    id: 7,\r\n    title: 'Dark',\r\n    modalColor: 'modal-dark',\r\n    btnColor: 'dark'\r\n  }\r\n]\r\n\r\nconst ModalTheme = () => {\r\n  const [modal, setModal] = useState(null)\r\n\r\n  const toggleModal = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n\r\n  const renderModal = ModalConfig.map(item => {\r\n    return (\r\n      <div className={`theme-${item.modalColor}`} key={item.id}>\r\n        <Button.Ripple color={item.btnColor} onClick={() => toggleModal(item.id)} key={item.title} outline>\r\n          {item.title}\r\n        </Button.Ripple>\r\n        <Modal\r\n          isOpen={modal === item.id}\r\n          toggle={() => toggleModal(item.id)}\r\n          className='modal-dialog-centered'\r\n          modalClassName={item.modalColor}\r\n          key={item.id}\r\n        >\r\n          <ModalHeader toggle={() => toggleModal(item.id)}>{item.title}</ModalHeader>\r\n          <ModalBody>\r\n            Tart lemon drops macaroon oat cake chocolate toffee chocolate bar icing. Pudding jelly beans carrot cake\r\n            pastry gummies cheesecake lollipop. I love cookie lollipop cake I love sweet gummi bears cupcake dessert.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color={item.btnColor} onClick={() => toggleModal(item.id)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return <div className='demo-inline-spacing'>{renderModal}</div>\r\n}\r\nexport default ModalTheme\r\n","import { Fragment, useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalConfig = [\r\n  {\r\n    id: 1,\r\n    btnTitle: 'Extra Small',\r\n    modalTitle: 'Extra Small modal',\r\n    modalClass: 'modal-xs'\r\n  },\r\n  {\r\n    id: 2,\r\n    btnTitle: 'Small Modal',\r\n    modalTitle: 'Small Modal',\r\n    modalClass: 'modal-sm'\r\n  },\r\n  {\r\n    id: 3,\r\n    btnTitle: 'Default Modal',\r\n    modalTitle: 'Default Modal',\r\n    modalClass: ''\r\n  },\r\n  {\r\n    id: 4,\r\n    btnTitle: 'Large Modal',\r\n    modalTitle: 'Large Modal',\r\n    modalClass: 'modal-lg'\r\n  },\r\n  {\r\n    id: 5,\r\n    btnTitle: 'Extra Large Modal',\r\n    modalTitle: 'Extra Large Modal',\r\n    modalClass: 'modal-xl'\r\n  }\r\n]\r\n\r\nconst ModalSizes = () => {\r\n  const [modal, setModal] = useState(null)\r\n\r\n  const toggleModal = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n\r\n  const renderModal = ModalConfig.map(item => {\r\n    return (\r\n      <Fragment key={item.id}>\r\n        <div>\r\n          <Button.Ripple color='primary' onClick={() => toggleModal(item.id)} key={item.title} outline>\r\n            {item.btnTitle}\r\n          </Button.Ripple>\r\n        </div>\r\n        <Modal\r\n          isOpen={modal === item.id}\r\n          toggle={() => toggleModal(item.id)}\r\n          className={`modal-dialog-centered ${item.modalClass}`}\r\n          key={item.id}\r\n        >\r\n          <ModalHeader toggle={() => toggleModal(item.id)}>\r\n            {item.modalTitle}\r\n            {item.title}\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            Halvah powder wafer. Chupa chups pie topping carrot cake cake. Tootsie roll sesame snaps jelly-o marshmallow\r\n            marshmallow jelly jujubes candy. Chupa chups cheesecake gingerbread chupa chups cake candy canes sweet roll.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => toggleModal(item.id)} outline>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </Fragment>\r\n    )\r\n  })\r\n\r\n  return <div className='demo-inline-spacing'>{renderModal}</div>\r\n}\r\nexport default ModalSizes\r\n","import { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalEvents = () => {\r\n  const [modalOpened, setModalOpened] = useState(false)\r\n  const [modalClosed, setModalClosed] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='on-opened-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setModalOpened(!modalOpened)}>\r\n          On Opened\r\n        </Button.Ripple>\r\n        <Modal\r\n          isOpen={modalOpened}\r\n          onOpened={() => alert('On Opened Event Fired')}\r\n          toggle={() => setModalOpened(!modalOpened)}\r\n          className='modal-dialog-centered'\r\n        >\r\n          <ModalHeader toggle={() => setModalOpened(!modalOpened)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            Donut chocolate halvah I love caramels. Dessert croissant I love icing I love dragée candy canes chocolate\r\n            bar. Oat cake lollipop I love cake chocolate bar jelly sweet. I love cotton candy oat cake jelly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setModalOpened(!modalOpened)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='on-closed-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setModalClosed(!modalClosed)}>\r\n          On Closed\r\n        </Button.Ripple>\r\n        <Modal\r\n          isOpen={modalClosed}\r\n          onClosed={() => alert('On Closed Event Fired')}\r\n          toggle={() => setModalClosed(!modalClosed)}\r\n          className='modal-dialog-centered'\r\n        >\r\n          <ModalHeader toggle={() => setModalClosed(!modalClosed)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            Donut chocolate halvah I love caramels. Dessert croissant I love icing I love dragée candy canes chocolate\r\n            bar. Oat cake lollipop I love cake chocolate bar jelly sweet. I love cotton candy oat cake jelly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setModalClosed(!modalClosed)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalEvents\r\n","import { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label, FormGroup, Input } from 'reactstrap'\r\n\r\nconst ModalForm = () => {\r\n  const [formModal, setFormModal] = useState(false)\r\n  const [scrollModal, setScrollModal] = useState(false)\r\n  const [scrollInnerModal, setScrollInnerModal] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Button.Ripple color='primary' outline onClick={() => setFormModal(!formModal)}>\r\n          Login Form\r\n        </Button.Ripple>\r\n        <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setFormModal(!formModal)}>Login Form</ModalHeader>\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <Label for='email'>Email:</Label>\r\n              <Input type='email' id='email' placeholder='Email Address' />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for='password'>Password:</Label>\r\n              <Input type='password' id='password' placeholder='Password' />\r\n            </FormGroup>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setFormModal(!formModal)}>\r\n              Login\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button.Ripple color='primary' outline onClick={() => setScrollModal(!scrollModal)}>\r\n          Scrolling Long Content\r\n        </Button.Ripple>\r\n        <Modal isOpen={scrollModal} toggle={() => setScrollModal(!scrollModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setScrollModal(!scrollModal)}>Modal Title</ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake fruitcake powder\r\n              pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah.\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setScrollModal(!scrollModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button.Ripple color='primary' outline onClick={() => setScrollInnerModal(!scrollInnerModal)}>\r\n          Scrolling Content Inside Modal\r\n        </Button.Ripple>\r\n        <Modal scrollable isOpen={scrollInnerModal} toggle={() => setScrollInnerModal(!scrollInnerModal)}>\r\n          <ModalHeader toggle={() => setScrollInnerModal(!scrollInnerModal)}>Modal Title</ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake fruitcake powder\r\n              pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah.\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setScrollInnerModal(!scrollInnerModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ModalForm\r\n","import { Fragment, useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Form, Row, Col } from 'reactstrap'\r\n\r\nconst ModalDestructuring = () => {\r\n  const [visibility, setVisibility] = useState(false)\r\n  const [unmountOnClose, setUnmountOnClose] = useState(true)\r\n\r\n  const changeUnmountOnClose = e => {\r\n    const value = e.target.value\r\n    setUnmountOnClose(JSON.parse(value))\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Form onSubmit={e => e.preventDefault()}>\r\n        <Row>\r\n          <Col className='mb-sm-0 mb-1' sm='6' md='4' lg='2'>\r\n            <Input type='select' name='unmountOnClose' id='unmountOnClose' onChange={e => changeUnmountOnClose(e)}>\r\n              <option value='true'>true</option>\r\n              <option value='false'>false</option>\r\n            </Input>\r\n          </Col>\r\n          <Col sm='6' md='4' lg='2'>\r\n            <Button color='success' onClick={() => setVisibility(!visibility)} outline>\r\n              Launch Modal\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <Modal isOpen={visibility} toggle={() => setVisibility(!visibility)} unmountOnClose={unmountOnClose}>\r\n        <ModalHeader toggle={() => setVisibility(!visibility)}>Modal title</ModalHeader>\r\n        <ModalBody>\r\n          <Input\r\n            type='textarea'\r\n            placeholder='Write something (data should remain in modal if unmountOnClose is set to false)'\r\n            rows={5}\r\n          />\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color='primary' onClick={() => setVisibility(!visibility)} outline>\r\n            Accept\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default ModalDestructuring\r\n","export const modalBasic = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Alert } from 'reactstrap'\r\n\r\nconst ModalBasic = () => {\r\n  const [basicModal, setBasicModal] = useState(false)\r\n  const [centeredModal, setCenteredModal] = useState(false)\r\n  const [disabledModal, setDisabledModal] = useState(false)\r\n  const [disabledAnimation, setDisabledAnimation] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='basic-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setBasicModal(!basicModal)}>\r\n          Vertically Centered\r\n        </Button.Ripple>\r\n        <Modal isOpen={basicModal} toggle={() => setBasicModal(!basicModal)}>\r\n          <ModalHeader toggle={() => setBasicModal(!basicModal)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            <h5>Check First Paragraph</h5>\r\n            Oat cake ice cream candy chocolate cake chocolate cake cotton candy dragée apple pie. Brownie carrot cake\r\n            candy canes bonbon fruitcake topping halvah. Cake sweet roll cake cheesecake cookie chocolate cake\r\n            liquorice.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setBasicModal(!basicModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='vertically-centered-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setCenteredModal(!centeredModal)}>\r\n          Launch Modal\r\n        </Button.Ripple>\r\n        <Modal isOpen={centeredModal} toggle={() => setCenteredModal(!centeredModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setCenteredModal(!centeredModal)}>Vertically Centered</ModalHeader>\r\n          <ModalBody>\r\n            Oat cake ice cream candy chocolate cake chocolate cake cotton candy dragée apple pie. Brownie carrot cake\r\n            candy canes bonbon fruitcake topping halvah. Cake sweet roll cake cheesecake cookie chocolate cake\r\n            liquorice.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setCenteredModal(!centeredModal)}>\r\n              Accept\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='disabled-backdrop-modal'>\r\n        <React.Fragment>\r\n          <Button.Ripple color='primary' outline onClick={() => setDisabledModal(!disabledModal)}>\r\n            Disabled Backdrop\r\n          </Button.Ripple>\r\n          <Modal\r\n            isOpen={disabledModal}\r\n            toggle={() => setDisabledModal(!disabledModal)}\r\n            className='modal-dialog-centered'\r\n            backdrop={false}\r\n          >\r\n            <ModalHeader toggle={() => setDisabledModal(!disabledModal)}>Disabled Backdrop</ModalHeader>\r\n            <ModalBody>\r\n              Candy oat cake topping topping chocolate cake. Icing pudding jelly beans I love chocolate carrot cake\r\n              wafer candy canes. Biscuit croissant fruitcake bonbon soufflé.\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button color='primary' onClick={() => setDisabledModal(!disabledModal)}>\r\n                Accept\r\n              </Button>{' '}\r\n            </ModalFooter>\r\n          </Modal>\r\n        </React.Fragment>\r\n      </div>\r\n      <div className='disabled-animation-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setDisabledAnimation(!disabledAnimation)}>\r\n          Disabled Animation\r\n        </Button.Ripple>\r\n        <Modal\r\n          isOpen={disabledAnimation}\r\n          toggle={() => setDisabledAnimation(!disabledAnimation)}\r\n          className='modal-dialog-centered'\r\n          fade={false}\r\n        >\r\n          <ModalHeader toggle={() => setDisabledAnimation(!disabledAnimation)}>Disabled Fade</ModalHeader>\r\n          <ModalBody>\r\n            Chocolate bar jelly dragée cupcake chocolate bar I love donut liquorice. Powder I love marzipan donut candy\r\n            canes jelly-o. Dragée liquorice apple pie candy biscuit danish lemon drops sugar plum.\r\n            <Alert className='mt-1' color='success'>\r\n              <div className='alert-body'>Well done! You successfully read this important alert message.</div>\r\n            </Alert>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setDisabledAnimation(!disabledAnimation)}>\r\n              Accept\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ModalBasic\r\n  `}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalTheme = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalConfig = [\r\n  {\r\n    id: 1,\r\n    title: 'Primary',\r\n    modalColor: 'modal-primary',\r\n    btnColor: 'primary'\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Secondary',\r\n    modalColor: 'modal-secondary',\r\n    btnColor: 'secondary'\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Success',\r\n    modalColor: 'modal-success',\r\n    btnColor: 'success'\r\n  },\r\n {\r\n    id: 4,\r\n    title: 'Danger',\r\n    modalColor: 'modal-danger',\r\n    btnColor: 'danger'\r\n  },\r\n  {\r\n    id: 5,\r\n    title: 'Warning',\r\n    modalColor: 'modal-warning',\r\n    btnColor: 'warning'\r\n  },\r\n  {\r\n    id: 6,\r\n    title: 'Info',\r\n    modalColor: 'modal-info',\r\n    btnColor: 'info'\r\n  },\r\n  {\r\n    id: 7,\r\n    title: 'Dark',\r\n    modalColor: 'modal-dark',\r\n    btnColor: 'dark'\r\n  }\r\n]\r\n\r\nconst ModalTheme = () => {\r\n  const [modal, setModal] = useState(null)\r\n\r\n  const toggleModal = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n\r\n  const renderModal = ModalConfig.map(item => {\r\n    return (\r\n      <div className={'theme-{item.modalColor}'} key={item.id}>\r\n        <Button.Ripple color={item.btnColor} onClick={() => toggleModal(item.id)} key={item.title} outline>\r\n          {item.title}\r\n        </Button.Ripple>\r\n        <Modal\r\n          isOpen={modal === item.id}\r\n          toggle={() => toggleModal(item.id)}\r\n          className='modal-dialog-centered'\r\n          modalClassName={item.modalColor}\r\n          key={item.id}\r\n        >\r\n          <ModalHeader toggle={() => toggleModal(item.id)}>{item.title}</ModalHeader>\r\n          <ModalBody>\r\n            Tart lemon drops macaroon oat cake chocolate toffee chocolate bar icing. Pudding jelly beans carrot cake\r\n            pastry gummies cheesecake lollipop. I love cookie lollipop cake I love sweet gummi bears cupcake dessert.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color={item.btnColor} onClick={() => toggleModal(item.id)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  return <div className='demo-inline-spacing'>{renderModal}</div>\r\n}\r\nexport default ModalTheme\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalSizes = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalConfig = [\r\n  {\r\n    id: 1,\r\n    btnTitle: 'Extra Small',\r\n    modalTitle: 'Extra Small modal',\r\n    modalClass: 'modal-xs'\r\n  },\r\n  {\r\n    id: 2,\r\n    btnTitle: 'Small Modal',\r\n    modalTitle: 'Small Modal',\r\n    modalClass: 'modal-sm'\r\n  },\r\n  {\r\n    id: 3,\r\n    btnTitle: 'Default Modal',\r\n    modalTitle: 'Default Modal',\r\n    modalClass: ''\r\n  },\r\n  {\r\n    id: 4,\r\n    btnTitle: 'Large Modal',\r\n    modalTitle: 'Large Modal',\r\n    modalClass: 'modal-lg'\r\n  },\r\n  {\r\n    id: 5,\r\n    btnTitle: 'Extra Large Modal',\r\n    modalTitle: 'Extra Large Modal',\r\n    modalClass: 'modal-xl'\r\n  }\r\n]\r\n\r\nconst ModalSizes = () => {\r\n  const [modal, setModal] = useState(null)\r\n\r\n  const toggleModal = id => {\r\n    if (modal !== id) {\r\n      setModal(id)\r\n    } else {\r\n      setModal(null)\r\n    }\r\n  }\r\n\r\n  const renderModal = ModalConfig.map(item => {\r\n    return (\r\n      <React.Fragment key={item.id}>\r\n        <div>\r\n          <Button.Ripple color='primary' onClick={() => toggleModal(item.id)} key={item.title} outline>\r\n            {item.btnTitle}\r\n          </Button.Ripple>\r\n        </div>\r\n        <Modal\r\n          isOpen={modal === item.id}\r\n          toggle={() => toggleModal(item.id)}\r\n          className={modal-dialog-centered item.modalClass}\r\n          key={item.id}\r\n        >\r\n          <ModalHeader toggle={() => toggleModal(item.id)}>\r\n            {item.modalTitle}\r\n            {item.title}\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            Halvah powder wafer. Chupa chups pie topping carrot cake cake. Tootsie roll sesame snaps jelly-o marshmallow\r\n            marshmallow jelly jujubes candy. Chupa chups cheesecake gingerbread chupa chups cake candy canes sweet roll.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => toggleModal(item.id)} outline>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </React.Fragment>\r\n    )\r\n  })\r\n\r\n  return <div className='demo-inline-spacing'>{renderModal}</div>\r\n}\r\nexport default ModalSizes\r\n  `}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalEvents = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\r\n\r\nconst ModalEvents = () => {\r\n  const [modalOpened, setModalOpened] = useState(false)\r\n  const [modalClosed, setModalClosed] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='on-opened-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setModalOpened(!modalOpened)}>\r\n          On Opened\r\n        </Button.Ripple>\r\n        <Modal\r\n          isOpen={modalOpened}\r\n          onOpened={() => alert('On Opened Event Fired')}\r\n          toggle={() => setModalOpened(!modalOpened)}\r\n          className='modal-dialog-centered'\r\n        >\r\n          <ModalHeader toggle={() => setModalOpened(!modalOpened)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            Donut chocolate halvah I love caramels. Dessert croissant I love icing I love dragée candy canes chocolate\r\n            bar. Oat cake lollipop I love cake chocolate bar jelly sweet. I love cotton candy oat cake jelly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setModalOpened(!modalOpened)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div className='on-closed-modal'>\r\n        <Button.Ripple color='primary' outline onClick={() => setModalClosed(!modalClosed)}>\r\n          On Closed\r\n        </Button.Ripple>\r\n        <Modal\r\n          isOpen={modalClosed}\r\n          onClosed={() => alert('On Closed Event Fired')}\r\n          toggle={() => setModalClosed(!modalClosed)}\r\n          className='modal-dialog-centered'\r\n        >\r\n          <ModalHeader toggle={() => setModalClosed(!modalClosed)}>Basic Modal</ModalHeader>\r\n          <ModalBody>\r\n            Donut chocolate halvah I love caramels. Dessert croissant I love icing I love dragée candy canes chocolate\r\n            bar. Oat cake lollipop I love cake chocolate bar jelly sweet. I love cotton candy oat cake jelly.\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setModalClosed(!modalClosed)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalEvents`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalForm = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport React, { useState } from 'react'\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label, FormGroup, Input } from 'reactstrap'\r\n\r\nconst ModalForm = () => {\r\n  const [formModal, setFormModal] = useState(false)\r\n  const [scrollModal, setScrollModal] = useState(false)\r\n  const [scrollInnerModal, setScrollInnerModal] = useState(false)\r\n\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div>\r\n        <Button.Ripple color='primary' outline onClick={() => setFormModal(!formModal)}>\r\n          Login Form\r\n        </Button.Ripple>\r\n        <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setFormModal(!formModal)}>Login Form</ModalHeader>\r\n          <ModalBody>\r\n            <FormGroup>\r\n              <Label for='email'>Email:</Label>\r\n              <Input type='email' id='email' placeholder='Email Address' />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for='password'>Password:</Label>\r\n              <Input type='password' id='password' placeholder='Password' />\r\n            </FormGroup>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setFormModal(!formModal)}>\r\n              Login\r\n            </Button>{' '}\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button.Ripple color='primary' outline onClick={() => setScrollModal(!scrollModal)}>\r\n          Scrolling Long Content\r\n        </Button.Ripple>\r\n        <Modal isOpen={scrollModal} toggle={() => setScrollModal(!scrollModal)} className='modal-dialog-centered'>\r\n          <ModalHeader toggle={() => setScrollModal(!scrollModal)}>Modal Title</ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake fruitcake powder\r\n              pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah.\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setScrollModal(!scrollModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n      <div>\r\n        <Button.Ripple color='primary' outline onClick={() => setScrollInnerModal(!scrollInnerModal)}>\r\n          Scrolling Content Inside Modal\r\n        </Button.Ripple>\r\n        <Modal scrollable isOpen={scrollInnerModal} toggle={() => setScrollInnerModal(!scrollInnerModal)}>\r\n          <ModalHeader toggle={() => setScrollInnerModal(!scrollInnerModal)}>Modal Title</ModalHeader>\r\n          <ModalBody>\r\n            <p>\r\n              Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake fruitcake powder\r\n              pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah. Biscuit powder jelly beans. Lollipop candy canes croissant icing chocolate cake. Cake\r\n              fruitcake powder pudding pastry.\r\n            </p>\r\n            <p>\r\n              Tootsie roll oat cake I love bear claw I love caramels caramels halvah chocolate bar. Cotton candy gummi\r\n              bears pudding pie apple pie cookie. Cheesecake jujubes lemon drops danish dessert I love caramels powder.\r\n            </p>\r\n            <p>\r\n              Chocolate cake icing tiramisu liquorice toffee donut sweet roll cake. Cupcake dessert icing dragée\r\n              dessert. Liquorice jujubes cake tart pie donut. Cotton candy candy canes lollipop liquorice chocolate\r\n              marzipan muffin pie liquorice.\r\n            </p>\r\n            <p>\r\n              Powder cookie jelly beans sugar plum ice cream. Candy canes I love powder sugar plum tiramisu. Liquorice\r\n              pudding chocolate cake cupcake topping biscuit. Lemon drops apple pie sesame snaps tootsie roll carrot\r\n              cake soufflé halvah.\r\n            </p>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color='primary' onClick={() => setScrollInnerModal(!scrollInnerModal)}>\r\n              Accept\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default ModalForm\r\n  `}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const modalUnmount = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Form, Row, Col } from 'reactstrap'\r\n\r\nconst ModalDestructuring = () => {\r\n  const [visibility, setVisibility] = useState(false)\r\n  const [unmountOnClose, setUnmountOnClose] = useState(true)\r\n\r\n  const changeUnmountOnClose = e => {\r\n    let value = e.target.value\r\n    setUnmountOnClose(JSON.parse(value))\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Form onSubmit={e => e.preventDefault()}>\r\n        <Row>\r\n          <Col className='mb-sm-0 mb-1' sm='6' md='4' lg='2'>\r\n            <Input type='select' name='unmountOnClose' id='unmountOnClose' onChange={e => changeUnmountOnClose(e)}>\r\n              <option value='true'>true</option>\r\n              <option value='false'>false</option>\r\n            </Input>\r\n          </Col>\r\n          <Col sm='6' md='4' lg='2'>\r\n            <Button color='success' onClick={() => setVisibility(!visibility)} outline>\r\n              Launch Modal\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n      <Modal isOpen={visibility} toggle={() => setVisibility(!visibility)} unmountOnClose={unmountOnClose}>\r\n        <ModalHeader toggle={() => setVisibility(!visibility)}>Modal title</ModalHeader>\r\n        <ModalBody>\r\n          <Input\r\n            type='textarea'\r\n            placeholder='Write something (data should remain in modal if unmountOnClose is set to false)'\r\n            rows={5}\r\n          />\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color='primary' onClick={() => setVisibility(!visibility)} outline>\r\n            Accept\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default ModalDestructuring\r\n        `}\r\n    </code>\r\n  </pre>\r\n)\r\n","import { Fragment, useEffect } from 'react'\r\nimport Prism from 'prismjs'\r\nimport { Row, Col, CardText } from 'reactstrap'\r\nimport ModalBasic from './ModalBasic'\r\nimport ModalThemes from './ModalThemes'\r\nimport ModalSizes from './ModalSizes'\r\nimport ModalEvents from './ModalEvents'\r\nimport ModalFormAndScroll from './ModalFormAndScroll'\r\nimport ModalUnmount from './ModalUnmount'\r\nimport BreadCrumbs from '@components/breadcrumbs'\r\nimport Card from '@components/card-snippet'\r\nimport { modalBasic, modalTheme, modalSizes, modalEvents, modalForm, modalUnmount } from './ModalSourceCode'\r\nconst Modals = () => {\r\n  useEffect(() => {\r\n    Prism.highlightAll()\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <BreadCrumbs breadCrumbTitle='Modal' breadCrumbParent='Components' breadCrumbActive='Modal' />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <Card title='Modal Basic' code={modalBasic}>\r\n            <CardText className='mb-0'>\r\n              Use <code>Modal</code>, <code>ModalBody</code> and <code>ModalFooter</code> tags to create a Modal with\r\n              reactstrap.\r\n            </CardText>\r\n            <ModalBasic />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm='12'>\r\n          <Card title='Modal Themes' code={modalTheme}>\r\n            <CardText className='mb-0'>\r\n              Use class <code>.modal-[color]</code> with your <code>.modal</code> to change theme of modal\r\n            </CardText>\r\n            <ModalThemes />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Modal Sizes' code={modalSizes}>\r\n            <CardText className='mb-0'>\r\n              Use class <code>.modal-[xs/sm/lg/xl]</code> with <code>ModalHeader</code> to change modal Size.\r\n            </CardText>\r\n            <ModalSizes />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Modal Events' code={modalEvents}>\r\n            <CardText className='mb-0'>\r\n              Use props <code>onClosed / onOpened</code> for modal events.\r\n            </CardText>\r\n            <ModalEvents />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col sm='12'>\r\n          <Card title='Form & Scrolling Modals' code={modalForm}>\r\n            <ModalFormAndScroll />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Unmount On Close' code={modalUnmount}>\r\n            <CardText>Write something (data should remain in modal if unmountOnClose is set to false).</CardText>\r\n            <ModalUnmount />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default Modals\r\n","// ** React Imports\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n  UncontrolledButtonDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                <BreadcrumbItem tag='li' className='text-primary'>\r\n                  {breadCrumbParent}\r\n                </BreadcrumbItem>\r\n                {breadCrumbParent2 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent2}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                {breadCrumbParent3 ? (\r\n                  <BreadcrumbItem tag='li' className='text-primary'>\r\n                    {breadCrumbParent3}\r\n                  </BreadcrumbItem>\r\n                ) : (\r\n                  ''\r\n                )}\r\n                <BreadcrumbItem tag='li' active>\r\n                  {breadCrumbActive}\r\n                </BreadcrumbItem>\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\r\n        <div className='form-group breadcrum-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' right>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <CheckSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='mr-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='mr-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='mr-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  breadCrumbTitle: Proptypes.string.isRequired,\r\n  breadCrumbActive: Proptypes.string.isRequired\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  children: PropTypes.node\n};\n\nvar ButtonDropdown = function ButtonDropdown(props) {\n  return /*#__PURE__*/React.createElement(Dropdown, _extends({\n    group: true\n  }, props));\n};\n\nButtonDropdown.propTypes = propTypes;\nexport default ButtonDropdown;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardTitle = function CardTitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-title'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardTitle.propTypes = propTypes;\nCardTitle.defaultProps = defaultProps;\nexport default CardTitle;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'p'\n};\n\nvar CardText = function CardText(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-text'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardText.propTypes = propTypes;\nCardText.defaultProps = defaultProps;\nexport default CardText;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardHeader = function CardHeader(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-header'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardHeader.propTypes = propTypes;\nCardHeader.defaultProps = defaultProps;\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  listTag: tagPropType,\n  className: PropTypes.string,\n  listClassName: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.node,\n  'aria-label': PropTypes.string\n};\nvar defaultProps = {\n  tag: 'nav',\n  listTag: 'ol',\n  'aria-label': 'breadcrumb'\n};\n\nvar Breadcrumb = function Breadcrumb(props) {\n  var className = props.className,\n      listClassName = props.listClassName,\n      cssModule = props.cssModule,\n      children = props.children,\n      Tag = props.tag,\n      ListTag = props.listTag,\n      label = props['aria-label'],\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"listClassName\", \"cssModule\", \"children\", \"tag\", \"listTag\", \"aria-label\"]);\n\n  var classes = mapToCssModules(classNames(className), cssModule);\n  var listClasses = mapToCssModules(classNames('breadcrumb', listClassName), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-label\": label\n  }), /*#__PURE__*/React.createElement(ListTag, {\n    className: listClasses\n  }, children));\n};\n\nBreadcrumb.propTypes = propTypes;\nBreadcrumb.defaultProps = defaultProps;\nexport default Breadcrumb;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  active: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'li'\n};\n\nvar BreadcrumbItem = function BreadcrumbItem(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      active = props.active,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"active\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, active ? 'active' : false, 'breadcrumb-item'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    \"aria-current\": active ? 'page' : undefined\n  }));\n};\n\nBreadcrumbItem.propTypes = propTypes;\nBreadcrumbItem.defaultProps = defaultProps;\nexport default BreadcrumbItem;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ButtonDropdown from './ButtonDropdown';\nimport { omit } from './utils';\nvar omitKeys = ['defaultOpen'];\n\nvar UncontrolledButtonDropdown = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(UncontrolledButtonDropdown, _Component);\n\n  function UncontrolledButtonDropdown(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      isOpen: props.defaultOpen || false\n    };\n    _this.toggle = _this.toggle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = UncontrolledButtonDropdown.prototype;\n\n  _proto.toggle = function toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  };\n\n  _proto.render = function render() {\n    return /*#__PURE__*/React.createElement(ButtonDropdown, _extends({\n      isOpen: this.state.isOpen,\n      toggle: this.toggle\n    }, omit(this.props, omitKeys)));\n  };\n\n  return UncontrolledButtonDropdown;\n}(Component);\n\nexport { UncontrolledButtonDropdown as default };\nUncontrolledButtonDropdown.propTypes = _objectSpread({\n  defaultOpen: PropTypes.bool\n}, ButtonDropdown.propTypes);","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport { Code } from 'react-feather'\r\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardSnippet = props => {\r\n  // ** Props\r\n  const { title, children, noBody, code, iconCode } = props\r\n\r\n  // ** State\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  // ** If user passes custom icon then render that else render default icon\r\n  const IconCode = iconCode ? iconCode : <Code size={15} />\r\n\r\n  // ** To toggle collapse\r\n  const toggle = () => setIsOpen(!isOpen)\r\n\r\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\r\n  const Wrapper = noBody ? Fragment : CardBody\r\n\r\n  return (\r\n    <Card className='card-snippet'>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>{title}</CardTitle>\r\n        <div className='views cursor-pointer' onClick={toggle}>\r\n          {IconCode}\r\n        </div>\r\n      </CardHeader>\r\n      <Wrapper>{children}</Wrapper>\r\n      <Collapse isOpen={isOpen}>\r\n        <CardBody>{code}</CardBody>\r\n      </Collapse>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CardSnippet\r\n\r\n// ** PropTypes\r\nCardSnippet.propTypes = {\r\n  className: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.any,\r\n  code: PropTypes.node,\r\n  iconCode: PropTypes.node,\r\n  noBody: PropTypes.bool\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nimport Fade from './Fade';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeClassName: PropTypes.string,\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  color: PropTypes.string,\n  fade: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  tag: tagPropType,\n  transition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  color: 'success',\n  isOpen: true,\n  tag: 'div',\n  closeAriaLabel: 'Close',\n  fade: true,\n  transition: _objectSpread(_objectSpread({}, Fade.defaultProps), {}, {\n    unmountOnExit: true\n  })\n};\n\nfunction Alert(props) {\n  var className = props.className,\n      closeClassName = props.closeClassName,\n      closeAriaLabel = props.closeAriaLabel,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      color = props.color,\n      isOpen = props.isOpen,\n      toggle = props.toggle,\n      children = props.children,\n      transition = props.transition,\n      fade = props.fade,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"closeClassName\", \"closeAriaLabel\", \"cssModule\", \"tag\", \"color\", \"isOpen\", \"toggle\", \"children\", \"transition\", \"fade\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'alert', \"alert-\" + color, {\n    'alert-dismissible': toggle\n  }), cssModule);\n  var closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);\n\n  var alertTransition = _objectSpread(_objectSpread(_objectSpread({}, Fade.defaultProps), transition), {}, {\n    baseClass: fade ? transition.baseClass : '',\n    timeout: fade ? transition.timeout : 0\n  });\n\n  return /*#__PURE__*/React.createElement(Fade, _extends({}, attributes, alertTransition, {\n    tag: Tag,\n    className: classes,\n    in: isOpen,\n    role: \"alert\",\n    innerRef: innerRef\n  }), toggle ? /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: closeClasses,\n    \"aria-label\": closeAriaLabel,\n    onClick: toggle\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")) : null, children);\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport default Alert;"],"sourceRoot":""}