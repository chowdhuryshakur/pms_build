{"version":3,"sources":["views/CustomComponents/EstateAdminPages/BranchePages/EditModal.js","views/CustomComponents/EstateAdminPages/BranchePages/BranchList.js","views/CustomComponents/CommonDataTable.js"],"names":["EditModal","modal","toggleModal","BranchInfo","setBranchInfo","resetData","setReset","useState","isLoading","setLoading","managerList","setmanagerList","useEffect","useJwt","EstateManagerList","then","res","console","log","data","payload","catch","err","Error","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Form","style","width","onSubmit","e","preventDefault","id","estate_manager_id","branch_name","sub_estate_manager_id","editEstateBranch","Success","autoComplete","Col","md","FormGroup","Label","for","Input","required","type","name","placeholder","value","onChange","target","theme","selectThemeColors","classNamePrefix","selected","estate_manager_info","full_name","label","options","map","x","user_id","length","isClearable","Button","Ripple","color","disabled","Spinner","size","MySwal","withReactContent","Swal","BranchLists","TableDataLoading","setTableDataLoading","BranchList","setBranchList","setModal","column","minWidth","sortable","selector","row","title","cursor","onClick","message","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","deleteBrach","filter","buttonsStyling","result","isConfirmed","Card","CardHeader","CardTitle","tag","CardBody","Row","CommonDataTable","TableData","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","handlePagination","pageCount","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive"],"mappings":"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","file":"static/js/187.e8ac6769.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\n\r\nconst EditModal = ({ modal, toggleModal, BranchInfo, setBranchInfo, resetData, setReset }) => {\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [managerList, setmanagerList] = useState([])\r\n\r\n    useEffect(() => {\r\n        useJwt.EstateManagerList().then(res => {\r\n            console.log(res.data.payload)\r\n            setmanagerList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n\r\n    const handleChange = e => {\r\n        setBranchInfo({ ...BranchInfo, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        const { id, estate_manager_id, branch_name } = BranchInfo\r\n        console.log({ sub_estate_manager_id: estate_manager_id, id, branch_name })\r\n        useJwt.editEstateBranch({ sub_estate_manager_id: estate_manager_id, id, branch_name }).then(res => {\r\n            setReset(!resetData)\r\n            console.log(res)\r\n            Success(res)\r\n            setLoading(false)\r\n            toggleModal()\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Edit Branch</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row pt-1\" style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Col md='12' >\r\n                        <FormGroup>\r\n                            <Label for=\"branch_name\">Branch Name</Label>\r\n                            <Input\r\n                                required\r\n                                type=\"text\"\r\n                                id='branch_name'\r\n                                name=\"branch_name\"\r\n                                placeholder=\"name\"\r\n                                value={BranchInfo.branch_name}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <Label>Branch Manager</Label>\r\n                        <Select\r\n                            // ref={managerRef}\r\n                            theme={selectThemeColors}\r\n                            className='react-select'\r\n                            classNamePrefix='select'\r\n                            name='sub_estate_manager_id'\r\n                            onChange={selected => {\r\n                                setBranchInfo({ ...BranchInfo, estate_manager_id: selected.value, estate_manager_info: { ...BranchInfo.estate_manager_info, full_name: selected.label } })\r\n                            }}\r\n                            options={managerList.map(x => { return { value: x.user_id, label: x.full_name } })}\r\n                            value={{ value: BranchInfo.estate_manager_id, label: BranchInfo.estate_manager_info ? BranchInfo.estate_manager_info.full_name : '' }}\r\n                            isLoading={!managerList.length}\r\n                            isClearable={false}\r\n                        />\r\n                    </Col>\r\n                    <Col md=\"12 text-center\">\r\n                        <Button.Ripple className='mt-2' color='primary' type=\"submit\" disabled={isLoading}>\r\n                            {isLoading ? <Spinner size='sm' /> : 'Submit'}\r\n                        </Button.Ripple>\r\n                    </Col>\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../../CommonDataTable'\r\nimport EditModal from './EditModal'\r\n\r\nconst BranchLists = () => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [BranchList, setBranchList] = useState([])\r\n    const [BranchInfo, setBranchInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    useEffect(() => {\r\n        useJwt.BranchList().then(res => {\r\n            console.log(res.data.payload)\r\n            setBranchList(res.data.payload)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n        })\r\n    }, [resetData])\r\n    const handlePoPupActions = (id, message) => {\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // return true\r\n                return useJwt.deleteBrach({ id }).then(res => {\r\n                    Success(res)\r\n                    console.log(res)\r\n                    setBranchList(BranchList.filter(x => x.id !== id))\r\n                }).catch(err => {\r\n                    console.log(err)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'Branch Name',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'branch_name'\r\n        },\r\n        {\r\n            name: 'Manager Name',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: row => row.estate_manager_info.full_name\r\n        },\r\n        // {\r\n        //     name: 'Status',\r\n        //     minWidth: '100px',\r\n        //     // sortable: true,\r\n        //     selector: row => {\r\n        //         const statusBG = {\r\n        //             0: { title: 'Blocked', color: 'light-danger' },\r\n        //             1: { title: 'Active', color: 'light-success' }\r\n        //         }\r\n        //         return <Badge color={statusBG[row.status].color} pill className='px-1'>\r\n        //             {statusBG[row.status].title}\r\n        //         </Badge>\r\n        //     }\r\n        // },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Edit\">\r\n                        <Edit size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                setBranchInfo(row)\r\n                                setModal(true)\r\n                            }}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    <span title=\"Delete\">\r\n                        <Trash size={15}\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.id, 'Do you want to delete?')}\r\n                        />\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>My Branches</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={BranchList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n                <EditModal\r\n                    toggleModal={toggleModal}\r\n                    modal={modal}\r\n                    resetData={resetData}\r\n                    setReset={setReset}\r\n                    BranchInfo={BranchInfo}\r\n                    setBranchInfo={setBranchInfo}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BranchLists","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 15 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={15}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable"],"sourceRoot":""}