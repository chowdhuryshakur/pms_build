{"version":3,"sources":["views/CustomComponents/EstateManagerPages/ChatComponent.js","views/CustomComponents/EstateManagerPages/ContractorModal.js","views/CustomComponents/EstateManagerPages/ComplainDetails.js","views/CustomComponents/CommonDataTable.js","views/helper.js"],"names":["mic","window","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","ChatComponent","note","setNote","complain_item_id","userID","JSON","parse","localStorage","getItem","user_id","useState","comment","setcomment","recallAPis","setRecall","sending","setsending","isListening","setIsListening","updateScroll","element","document","getElementById","scrollTop","scrollHeight","useEffect","start","onend","console","log","stop","onstart","onresult","event","transcript","Array","from","results","map","result","join","onerror","error","length","useJwt","complainComments","then","res","data","payload","catch","Error","Card","CardHeader","className","CardTitle","tag","CardBody","style","padding","height","id","item","index","comment_user","img","photo","maxWidth","full_name","fontSize","formatReadableDate","created_at","borderRadius","CardFooter","Form","onSubmit","e","preventDefault","submitComplain","width","InputGroup","InputGroupAddon","addonType","InputGroupText","size","onClick","Input","required","value","onChange","target","placeholder","Label","for","title","type","disabled","Spinner","class","ContractorModal","withReactContent","Swal","Contractormodal","contractorList","toggleContractormodal","Modal","isOpen","toggle","ModalHeader","ModalBody","Row","Col","md","x","i","src","alt","borderRadious","email","mobile","MySwal","ComplainDetails","history","useHistory","chatTexts","setchatTexts","isAcceptButtonVisible","setisAcceptButtonVisible","isLandLordButtonVisible","setisLandLordButtonVisible","isAssignContractorButtonVisible","setisAssignContractorButtonVisible","SubmitQPercentLoading","setSubmitQPercentLoading","modal","setModal","toggleModal","setContractormodal","setcontractorList","recall","renderDetails","setRenderDetails","quotationPercentage","setQPercentage","ComplainID","useParams","complain_id","String","split","item_id","complainItems","complain_image_urls","statusType","contractor_quotation_list","setComplainDetails","proposedDateTimeText","setproposedDateTimeText","complainSmallStatuses","setcomplainSmallStatuses","getSingleComplainDetails","isNeedLandLordApproval","isApprovedByLandLord","complainResolve","isApprovedByEstateManager","quotation","isNeedLandLordApprovalForQu","isQuotationCanceledByLandLor","isApprovedQuotationByLandLor","renter_avilable_date_time","is_approved_working_date_time","complain_type_id","complainType","complain_details","handlePoPupActions","message","contractor_quotation_id","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","approveComplain","Success","err","needLandlordpproval","reqForQuotation","contractor_id","acceptQuotation","buttonsStyling","isLoading","isConfirmed","column","name","minWidth","selector","row","Date","working_start_datetime","working_end_datetime","sortable","CURRENCY_SYMBOL","Button","Ripple","color","goBack","toast","ContractorListByType","contractor_type_id","status_name","complain_type_name","sm","CommonDataTable","TableData","TableDataLoading","quotationNeedLandlordpproval","adding_percent_with_quotation","Number","autoComplete","FormGroup","min","max","renter_info","margin","marginTop","renter_house_info","house_details","Object","keys","contractor","working_date_time","working_end_date_time","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive","options","year","month","day","date","time","getTime","minutes","Math","floor","hours","finaldate","toLocaleDateString","undefined","finalTime"],"mappings":"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","file":"static/js/44.828be5b2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Send, FileText, Mic, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, ChevronsRight\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, CardFooter, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter, InputGroup,\r\n    InputGroupAddon, InputGroupText\r\n} from 'reactstrap'\r\nimport Avatar from '@components/avatar'\r\nimport classnames from 'classnames'\r\nimport { formatReadableDate } from '../../helper'\r\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\n\r\nconst SpeechRecognition =\r\n    window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst mic = new SpeechRecognition()\r\n\r\nmic.continuous = true\r\nmic.interimResults = true\r\nmic.lang = 'en-US'\r\n\r\nconst ChatComponent = ({ note, setNote, complain_item_id }) => {\r\n    const userID = JSON.parse(localStorage.getItem('userData')).user_id\r\n    const [comment, setcomment] = useState([])\r\n    const [recallAPis, setRecall] = useState(false)\r\n    const [sending, setsending] = useState(false)\r\n    const [isListening, setIsListening] = useState(false)\r\n    const handleListen = () => {\r\n        if (isListening) {\r\n            setNote('')\r\n            mic.start()\r\n            mic.onend = () => {\r\n                console.log('continue..')\r\n                // mic.start()\r\n                setIsListening(false)\r\n            }\r\n        } else {\r\n            mic.stop()\r\n            mic.onend = () => {\r\n                console.log('Stopped Mic on Click')\r\n            }\r\n        }\r\n        mic.onstart = () => {\r\n            console.log('Mics on')\r\n        }\r\n\r\n        mic.onresult = event => {\r\n            const transcript = Array.from(event.results)\r\n                .map(result => result[0])\r\n                .map(result => result.transcript)\r\n                .join('')\r\n            console.log(transcript)\r\n            setNote(transcript)\r\n            mic.onerror = event => {\r\n                console.log(event.error)\r\n            }\r\n        }\r\n    }\r\n    function updateScroll() {\r\n        const element = document.getElementById(\"chatScroll\")\r\n        element.scrollTop = element.scrollHeight\r\n    }\r\n    useEffect(() => {\r\n        handleListen()\r\n    }, [isListening])\r\n\r\n    useEffect(() => {\r\n        if (comment.length !== 0) {\r\n            updateScroll()\r\n        }\r\n        useJwt.complainComments({ complain_item_id }).then(res => {\r\n            // console.log(\"complainComments\", res.data.payload.comment)\r\n            setcomment(res.data.payload.comment)\r\n            if (res.data.payload.comment.length !== 0) {\r\n                updateScroll()\r\n            }\r\n        }).catch(error => {\r\n            console.log(\"complainComments\", error)\r\n            Error(error)\r\n        })\r\n    }, [recallAPis])\r\n\r\n    const handleSendMsg = e => {\r\n        e.preventDefault()\r\n        setsending(true)\r\n        useJwt.submitComplain({ complain_item_id, comment: note }).then(res => {\r\n            setNote('')\r\n            setIsListening(false)\r\n            // console.log(\"submitComplain\", res.data.payload)\r\n            setRecall(!recallAPis)\r\n            setsending(false)\r\n        }).catch(error => {\r\n            setsending(false)\r\n            console.log(\"submitComplain\", error)\r\n            Error(error)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom py-1'>\r\n                <CardTitle tag='h4'>Chat</CardTitle>\r\n            </CardHeader>\r\n            <CardBody className='d-flex align-items-end overflow-auto' style={{ padding: '0', height: '322px' }}>\r\n                {comment.length !== 0 && <div id='chatScroll' className='w-100 overflow-auto p-1' style={{ height: '322px' }}>\r\n                    {\r\n                        comment.map((item, index) => {\r\n                            return item.comment_user.user_id !== userID ? <div\r\n                                key={index}\r\n                                className={`d-flex  my-1 `}\r\n                            >\r\n                                <div className='chat-avatar'>\r\n                                    <Avatar\r\n                                        className='box-shadow-1 cursor-pointer mt-1'\r\n                                        img={item.comment_user.photo}\r\n                                    />\r\n                                </div>\r\n\r\n                                <div className={`chat-body ml-1 `} style={{ maxWidth: '80%' }}>\r\n                                    <div className='chat-content'>\r\n                                        <div className=\"d-flex flex-column justify-content-between\">\r\n                                            <small>{item.comment_user.full_name}</small>\r\n                                            <small style={{ fontSize: '10px' }} className='text-right'>{formatReadableDate(item.created_at)}</small>\r\n                                        </div>\r\n                                        <p style={{ fontSize: '14px', borderRadius: '0px 8px 8px 8px', padding: '5px 15px 5px 15px' }} className='bg-light-secondary text-black' >{item.comment}</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div> : <div\r\n                                key={index}\r\n                                className={`d-flex  my-1 justify-content-end`}\r\n                            >\r\n                                <div className={`chat-body mr-1  text-right `} style={{ maxWidth: '80%' }}>\r\n                                    <div className='chat-content'>\r\n                                        <div className=\"d-flex flex-column justify-content-between\">\r\n                                            <small>{item.comment_user.full_name}</small>\r\n                                            <small style={{ fontSize: '10px' }} className='text-left'>{formatReadableDate(item.created_at)}</small>\r\n                                        </div>\r\n                                        <p style={{ fontSize: '14px', borderRadius: '8px 0px 8px 8px', padding: '5px 15px 5px 15px' }} className='text-light bg-primary' >{item.comment}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className='chat-avatar'>\r\n                                    <Avatar\r\n                                        className='box-shadow-1 cursor-pointer mt-1'\r\n                                        img={item.comment_user.photo}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                        )\r\n                    }\r\n                </div>}\r\n            </CardBody>\r\n            <CardFooter className='p-1'>\r\n                <Form className='chat-app-form' onSubmit={handleSendMsg} style={{ width: '100%' }}>\r\n                    <InputGroup className='input-group-merge mr-1 form-send-message'>\r\n                        <InputGroupAddon addonType='prepend'>\r\n                            <InputGroupText>\r\n                                <Mic className={isListening ? `cursor-pointer listening` : 'cursor-pointer'} size={14} onClick={() => setIsListening(!isListening)} />\r\n                            </InputGroupText>\r\n                        </InputGroupAddon>\r\n                        <Input\r\n                            required\r\n                            value={note}\r\n                            onChange={e => {\r\n                                setIsListening(false)\r\n                                setNote(e.target.value)\r\n                            }}\r\n                            placeholder='Type your message or use speech to text'\r\n                        />\r\n                        <InputGroupAddon addonType='append'>\r\n                            <InputGroupText >\r\n                                <Label className='attachment-icon mb-0' for='attach-doc' title='Send'>\r\n                                    <button type='submit' className=\"sendBtn\" disabled={sending} >\r\n                                        {!sending ? <Send className='cursor-pointer text-secondary' size={14} /> : <Spinner className='text-secondary' size={'sm'} />}\r\n                                    </button>\r\n                                    {/* <input type='file' id='attach-doc' hidden /> */}\r\n                                </Label>\r\n                            </InputGroupText>\r\n                        </InputGroupAddon>\r\n                    </InputGroup>\r\n                    {/* <Button className='send' color='primary' type=\"submit\">\r\n                                    <Send size={14} />\r\n                                    <span className='d-none d-lg-block'>Send</span>\r\n                                </Button> */}\r\n                    {isListening && <div class=\"loader\">\r\n                        <div class=\"line\"></div>\r\n                        <div class=\"line\"></div>\r\n                        <div class=\"line\"></div>\r\n                        <div class=\"line\"></div>\r\n                    </div>}\r\n                </Form>\r\n            </CardFooter>\r\n        </Card >\r\n\r\n    )\r\n}\r\n\r\nexport default ChatComponent","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Send, FileText, Mic, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, ChevronsRight\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, CardFooter, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter, InputGroup,\r\n    InputGroupAddon, InputGroupText\r\n} from 'reactstrap'\r\nimport { formatReadableDate } from '../../helper'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\r\nimport { toast } from 'react-toastify'\r\nimport { useParams, useHistory } from 'react-router'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport ChatComponent from './ChatComponent'\r\nimport CommonDataTable from '../CommonDataTable'\r\nimport { CURRENCY_SYMBOL } from '../../Configuarables'\r\n\r\nconst ContractorModal = ({ Contractormodal, contractorList, toggleContractormodal }) => {\r\n    const column = [\r\n        // {\r\n        //     name: 'Photo',\r\n        //     maxWidth: '100px',\r\n        //     // sortable: true,\r\n        //     selector: row => <img src={row.photo} alt=\"photo\" width=\"50px\" />\r\n        // },\r\n        {\r\n            name: 'Start date',\r\n            minWidth: '250px',\r\n            // sortable: true,\r\n            selector: row => formatReadableDate(new Date(row.working_start_datetime))\r\n        },\r\n        {\r\n            name: 'End date',\r\n            minWidth: '250px',\r\n            // sortable: true,\r\n            selector: row => formatReadableDate(new Date(row.working_end_datetime))\r\n        },\r\n        {\r\n            name: 'Contractor',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'contractor_name'\r\n        },\r\n        {\r\n            name: 'Quotation',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => `${CURRENCY_SYMBOL} ${row.quotation}`\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <Button.Ripple size='sm' color='success' onClick={e => handlePoPupActions('acceptQuotation', 'Do you want to accept this quotation?', row.id)}>\r\n                    Approve\r\n                </Button.Ripple>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Modal isOpen={Contractormodal} toggle={toggleContractormodal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleContractormodal}>Contractor List</ModalHeader>\r\n            <ModalBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        {/* <CommonDataTable column={column} TableData={contractorList} TableDataLoading={false} /> */}\r\n                        {contractorList.map((x, i) => <div className='border m-1 p-1' key={i}>\r\n                            <img src={x.photo} alt=\"photo\" style={{ width: '50px', height: '50px', borderRadious: \"50%\" }} />&nbsp;&nbsp;<span className='text-primary'>{x.full_name}</span> <br />\r\n                            <span>Email :- &nbsp;&nbsp;{x.email} </span> <br />\r\n                            <span>Phone :- &nbsp;&nbsp;{x.mobile}</span>\r\n                        </div>)}\r\n                    </Col>\r\n\r\n                </Row>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ContractorModal","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Send, FileText, Mic, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, ChevronsRight, CornerUpRight, MapPin\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, CardFooter, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter, InputGroup,\r\n    InputGroupAddon, InputGroupText\r\n} from 'reactstrap'\r\nimport { formatReadableDate } from '../../helper'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\r\nimport { toast } from 'react-toastify'\r\nimport { useParams, useHistory } from 'react-router'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport ChatComponent from './ChatComponent'\r\nimport ContractorsModal from './ContractorModal'\r\nimport CommonDataTable from '../CommonDataTable'\r\nimport { CURRENCY_SYMBOL } from '../../Configuarables'\r\n\r\nconst ComplainDetails = () => {\r\n    const history = useHistory()\r\n    // speechto text\r\n    const [chatTexts, setchatTexts] = useState([])\r\n    const [note, setNote] = useState('')\r\n    // speechto text\r\n    const [isAcceptButtonVisible, setisAcceptButtonVisible] = useState(false)\r\n    const [isLandLordButtonVisible, setisLandLordButtonVisible] = useState(false)\r\n    const [isAssignContractorButtonVisible, setisAssignContractorButtonVisible] = useState(false)\r\n\r\n    const [SubmitQPercentLoading, setSubmitQPercentLoading] = useState(false)\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    const [Contractormodal, setContractormodal] = useState(false)\r\n    const [contractorList, setcontractorList] = useState([])\r\n    const toggleContractormodal = () => setContractormodal(!Contractormodal)\r\n\r\n    const [recall, setRecall] = useState(false)\r\n    const [renderDetails, setRenderDetails] = useState(false)\r\n    const [quotationPercentage, setQPercentage] = useState('')\r\n\r\n    const { ComplainID } = useParams()\r\n    const complain_id = String(ComplainID).split(\"-\")[0]\r\n    const item_id = String(ComplainID).split(\"-\")[1]\r\n\r\n    const [ComplainDetails, setComplainDetails] = useState({\r\n        complainItems: [{ complain_image_urls: [''], statusType: { id: 0 }, contractor_quotation_list: [] }]\r\n    })\r\n    const [proposedDateTimeText, setproposedDateTimeText] = useState('Contractor assigned working Date-Time.')\r\n    const [complainSmallStatuses, setcomplainSmallStatuses] = useState('')\r\n    useEffect(() => {\r\n        useJwt.getSingleComplainDetails({ complain_id, item_id }).then(res => {\r\n            console.log(\"getSingleComplainDetails\", res.data.payload)\r\n            setComplainDetails(res.data.payload[0])\r\n            setRenderDetails(true)\r\n            const { comment, statusType, isNeedLandLordApproval, isApprovedByLandLord, complainResolve, isApprovedByEstateManager } = res.data.payload[0].complainItems[0]\r\n            setchatTexts(comment)\r\n            if (statusType.id === 3) {\r\n                setcomplainSmallStatuses(\"Accept/Forward to Landlord\")\r\n            } else if (statusType.id === 7) {\r\n                if (isApprovedByEstateManager === true) {\r\n                    setcomplainSmallStatuses(\"Accepted by - Branch Manager.\")\r\n                }\r\n            } else if (statusType.id === 12) {\r\n                if (isNeedLandLordApproval === true) {\r\n                    setcomplainSmallStatuses(\"Waiting for Landlords approval.\")\r\n                    if (isApprovedByLandLord === true) {\r\n                        setcomplainSmallStatuses(\"Approved by - Landlord.\")\r\n                    }\r\n                } else {\r\n                    setcomplainSmallStatuses(\"Accept/Forward to Landlord\")\r\n                }\r\n            } else if (statusType.id === 10) {\r\n                if (complainResolve !== null) {\r\n                    setcomplainSmallStatuses(\"Contractor assigned, waiting for - Quotation\")\r\n                    if (complainResolve.quotation !== 0) {\r\n                        setcomplainSmallStatuses(\"Quotation set, waiting for - Branch Mng. Approval\")\r\n                        if (complainResolve.isNeedLandLordApprovalForQu === true) {\r\n                            setcomplainSmallStatuses(\"Waiting for Landlord - Quotation Approval\")\r\n                            if (complainResolve.isQuotationCanceledByLandLor === true) {\r\n                                setcomplainSmallStatuses(\"Quotation cancelled by - Landlord\")\r\n                            } else if (complainResolve.isApprovedQuotationByLandLor === true) {\r\n                                setcomplainSmallStatuses(\"Quotation approved by - landlord\")\r\n                            }\r\n                        } else {\r\n                            setcomplainSmallStatuses(\"Need Landlord Approval For Quotation\")\r\n                        }\r\n                    }\r\n                } else {\r\n                    setcomplainSmallStatuses(\"Waiting for approval\")\r\n                }\r\n            } else if (statusType.id === 11) {\r\n                setcomplainSmallStatuses(\"Quotation approved by - Branch Mng.\")\r\n            } else if (statusType.id === 13) {\r\n                setcomplainSmallStatuses(\"Finished by - Contractor\")\r\n            } else if (statusType.id === 2) {\r\n                setcomplainSmallStatuses(\"Completed by - Tenant\")\r\n            } else if (statusType.id === 4) {\r\n                setcomplainSmallStatuses(\"Cancelled..!!\")\r\n            }\r\n\r\n            if (complainResolve !== null) {\r\n                if (complainResolve.renter_avilable_date_time !== null) {\r\n                    if (complainResolve.is_approved_working_date_time === true) {\r\n                        setproposedDateTimeText('Accepted - by Tenant')\r\n                    } else {\r\n                        setproposedDateTimeText('Pending')\r\n                    }\r\n                } else {\r\n                    if (complainResolve.is_approved_working_date_time === true) {\r\n                        setproposedDateTimeText('Accepted - by Tenant')\r\n                    }\r\n                }\r\n            }\r\n            if (statusType.id === 3) {\r\n                setisAcceptButtonVisible(true)\r\n                setisLandLordButtonVisible(true)\r\n                setisAssignContractorButtonVisible(false)\r\n            } else if (statusType.id === 7) {\r\n                setisAcceptButtonVisible(false)\r\n                setisLandLordButtonVisible(false)\r\n                setisAssignContractorButtonVisible(true)\r\n            } else if (statusType.id === 4) {\r\n                setisAcceptButtonVisible(false)\r\n                setisLandLordButtonVisible(false)\r\n                setisAssignContractorButtonVisible(false)\r\n            } else if (statusType.id === 12) {\r\n                if (isNeedLandLordApproval === true) {\r\n                    if (isApprovedByLandLord === true) {\r\n                        setisAcceptButtonVisible(true)\r\n                        setisLandLordButtonVisible(false)\r\n                        // isAssignContractorButtonVisibletrue//it change new update.....()\r\n                    } else {\r\n                        setisAcceptButtonVisible(false)\r\n                        setisLandLordButtonVisible(false)\r\n                        setisAssignContractorButtonVisible(false)\r\n                    }\r\n                } else {\r\n                    setisAcceptButtonVisible(false)\r\n                    setisLandLordButtonVisible(false)\r\n                    setisAssignContractorButtonVisible(false)\r\n                }\r\n            } else {\r\n                setisAcceptButtonVisible(false)\r\n                setisLandLordButtonVisible(false)\r\n                setisAssignContractorButtonVisible(false)\r\n            }\r\n        }).catch(error => {\r\n            console.log(\"getSingleComplainDetails\", error)\r\n            Error(error)\r\n        })\r\n    }, [recall])\r\n    const { complain_type_id, complain_image_urls, complainType, statusType, complain_details, contractor_quotation_list, complainResolve } = ComplainDetails.complainItems[0]\r\n\r\n    const handlePoPupActions = (type, message, contractor_quotation_id) => {\r\n        return MySwal.fire({\r\n            title: 'Are you sure?',\r\n            text: message,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // return true\r\n                if (type === 'approve') {\r\n                    return useJwt.approveComplain({ complain_item_id: item_id }).then(res => {\r\n                        Success(res)\r\n                        console.log(res)\r\n                        setRecall(!recall)\r\n                    }).catch(err => {\r\n                        console.log(err)\r\n                        Error(err)\r\n                    })\r\n                } else if (type === 'forward') {\r\n                    return useJwt.needLandlordpproval({ complain_item_id: item_id }).then(res => {\r\n                        Success(res)\r\n                        console.log(res)\r\n                        setRecall(!recall)\r\n                    }).catch(err => {\r\n                        console.log(err)\r\n                        Error(err)\r\n                    })\r\n                } else if (type === 'quotation') {\r\n                    return useJwt.reqForQuotation({ complain_item_id: item_id, contractor_id: complainType.id }).then(res => {\r\n                        Success(res)\r\n                        console.log(res)\r\n                        setRecall(!recall)\r\n                    }).catch(err => {\r\n                        console.log(err)\r\n                        Error(err)\r\n                    })\r\n                } else if (type === 'acceptQuotation') {\r\n                    return useJwt.acceptQuotation({ complain_item_id: item_id, contractor_quotation_id }).then(res => {\r\n                        Success(res)\r\n                        console.log(res)\r\n                        setRecall(!recall)\r\n                    }).catch(err => {\r\n                        console.log(err)\r\n                        Error(err)\r\n                    })\r\n                }\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        // {\r\n        //     name: 'Photo',\r\n        //     maxWidth: '100px',\r\n        //     // sortable: true,\r\n        //     selector: row => <img src={row.photo} alt=\"photo\" width=\"50px\" />\r\n        // },\r\n        {\r\n            name: 'Start date',\r\n            minWidth: '250px',\r\n            // sortable: true,\r\n            selector: row => formatReadableDate(new Date(row.working_start_datetime))\r\n        },\r\n        {\r\n            name: 'End date',\r\n            minWidth: '250px',\r\n            // sortable: true,\r\n            selector: row => formatReadableDate(new Date(row.working_end_datetime))\r\n        },\r\n        {\r\n            name: 'Contractor',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'contractor_name'\r\n        },\r\n        {\r\n            name: 'Quotation',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => `${CURRENCY_SYMBOL} ${row.quotation}`\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <Button.Ripple size='sm' color='success' onClick={e => handlePoPupActions('acceptQuotation', 'Do you want to accept this quotation?', row.id)}>\r\n                    Approve\r\n                </Button.Ripple>\r\n            }\r\n        }\r\n    ]\r\n    const SubmitQPercent = e => {\r\n        e.preventDefault()\r\n        setSubmitQPercentLoading(true)\r\n        useJwt.quotationNeedLandlordpproval({ complain_item_id: item_id, adding_percent_with_quotation: Number(quotationPercentage) }).then(res => {\r\n            Success(res)\r\n            toggleModal()\r\n            console.log(res)\r\n            setRecall(!recall)\r\n            setSubmitQPercentLoading(false)\r\n        }).catch(err => {\r\n            console.log(err)\r\n            Error(err)\r\n            setSubmitQPercentLoading(false)\r\n        })\r\n    }\r\n    const handleViewContractors = e => {\r\n        toggleContractormodal()\r\n        useJwt.ContractorListByType({ contractor_type_id: complain_type_id }).then(res => {\r\n            console.log(\"ContractorListByType\", res.data.payload)\r\n            setcontractorList(res.data.payload)\r\n        }).catch(error => {\r\n            console.log(\"ContractorListByType\", error)\r\n            Error(error)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex justify-content-between\">\r\n                <Button.Ripple className='mb-1 ml-1' color='primary' onClick={e => history.goBack()}>\r\n                    <ChevronLeft size={12} /> Back\r\n                </Button.Ripple>\r\n                <div>\r\n                    {isAcceptButtonVisible && <><Button.Ripple color='success' onClick={e => handlePoPupActions('approve', 'Do you want to approve?')}>\r\n                        Approve\r\n                    </Button.Ripple>&nbsp;</>}\r\n                    {isLandLordButtonVisible && <Button.Ripple color='primary' onClick={e => handlePoPupActions('forward', 'Forward to landlord')}>\r\n                        <CornerUpRight size={12} /> &nbsp;Forward to landlord\r\n                    </Button.Ripple>}\r\n                    {isAssignContractorButtonVisible && <Button.Ripple color='primary' onClick={e => {\r\n                        if (statusType.id === 7 || statusType.id === 10) {\r\n                            handlePoPupActions('quotation', 'Request for quotation')\r\n                            // callAssignContractorApi(complainItemsList.itemsId, complainItemsList.complainType.id.toString())\r\n                        } else {\r\n                            toast.error(\"Can't Request For Quotation by this state\")\r\n                        }\r\n                        // handlePoPupActions('quotation', 'Request for quotation')\r\n                    }}>\r\n                        Request for quotation\r\n                    </Button.Ripple>}\r\n                </div>\r\n            </div>\r\n            <Row className='match-height'>\r\n                <Col md='7'>\r\n                    <Card>\r\n                        <CardHeader className='border-bottom py-1'>\r\n                            <CardTitle tag='h4'>Complain Details</CardTitle>\r\n                            <CardTitle tag='h4'><small>{renderDetails ? formatReadableDate(new Date(ComplainDetails.created_at)) : ''}</small></CardTitle>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            {renderDetails && <p className='mt-1'>{complain_details}</p>}\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col md='5'>\r\n                    <Row className='match-height'>\r\n                        <Col md='12'>\r\n                            <Card>\r\n                                <CardHeader className='border-bottom py-1'>\r\n                                    <CardTitle tag='h4'>Status</CardTitle>\r\n                                </CardHeader>\r\n                                <CardBody className='mt-1'>\r\n                                    {renderDetails && <div>\r\n                                        {/* <div style={{ height: '10px', width: '10px', borderRadius: '50%', background: 'orange' }}></div> */}\r\n                                        {statusType.id === 10 && <span className='text-warning cursor-pointer' onClick={handleViewContractors}><b>{statusType.status_name}</b></span>}\r\n                                        {statusType.id !== 10 && <span className='text-warning'><b>{statusType.status_name}</b></span>} <br />\r\n                                        <small>{complainSmallStatuses}</small>\r\n                                    </div>}\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col md='12'>\r\n                            <Card>\r\n                                <CardHeader className='border-bottom py-1'>\r\n                                    <CardTitle tag='h4'>Type</CardTitle>\r\n                                </CardHeader>\r\n                                <CardBody className='mt-1'>\r\n                                    {renderDetails && <span ><b>{complainType.complain_type_name}</b></span>}\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Card>\r\n                <CardHeader className='border-bottom py-1'>\r\n                    <CardTitle tag='h4'>Images</CardTitle>\r\n                </CardHeader>\r\n                <CardBody className='mt-1'>\r\n                    {renderDetails ? <Row>\r\n                        {\r\n                            complain_image_urls.map((img, index) => <Col sm='4' key={index}>\r\n                                <img src={img} className=\"img-fluid\" style={{ height: '300px', borderRadius: '10px' }} />\r\n                            </Col>)\r\n                        }\r\n                    </Row> : <Row>\r\n                        <Col sm='4'>\r\n                            <div className='bg-light' style={{ height: '300px', width: '250px', borderRadius: '10px' }}></div>\r\n                        </Col>\r\n                    </Row>}\r\n                </CardBody>\r\n            </Card>\r\n            {\r\n                contractor_quotation_list.length && statusType.id === 10 ? <Card>\r\n                    <CardHeader className='border-bottom'>\r\n                        <CardTitle tag='h4'>Quotation List</CardTitle>\r\n                        <CardTitle tag='h4'><Button.Ripple size='sm' color='primary' onClick={toggleModal}>\r\n                            <CornerUpRight size={12} /> &nbsp;Forward to landlord\r\n                        </Button.Ripple></CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <Row>\r\n                            <Col md='12'>\r\n                                <CommonDataTable column={column} TableData={contractor_quotation_list} TableDataLoading={false} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n                            <ModalHeader toggle={toggleModal}>Enter Quotation Percentage</ModalHeader>\r\n                            <ModalBody>\r\n                                <Form className=\"row pt-1\" style={{ width: '100%' }} onSubmit={SubmitQPercent} autoComplete=\"off\">\r\n                                    <Col md='12' >\r\n                                        <FormGroup>\r\n                                            {/* <Label for=\"quotationPercentage\">Branch Name</Label> */}\r\n                                            <Input\r\n                                                required\r\n                                                type=\"number\"\r\n                                                id='quotationPercentage'\r\n                                                name=\"quotationPercentage\"\r\n                                                min={1}\r\n                                                max={99}\r\n                                                placeholder=\"15%\"\r\n                                                value={quotationPercentage}\r\n                                                onChange={e => setQPercentage(e.target.value)}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md=\"12 text-center\">\r\n                                        <Button.Ripple className='mt-2' color='primary' type=\"submit\" disabled={SubmitQPercentLoading}>\r\n                                            {SubmitQPercentLoading ? <Spinner size='sm' /> : 'Forward'}\r\n                                        </Button.Ripple>\r\n                                    </Col>\r\n                                </Form>\r\n                            </ModalBody>\r\n                        </Modal>\r\n                    </CardBody>\r\n                </Card> : ''\r\n            }\r\n            <Row>\r\n                <Col md='4'>\r\n                    <Card>\r\n                        <CardHeader className='border-bottom py-1'>\r\n                            <CardTitle tag='h4'>Tenant Info</CardTitle>\r\n                        </CardHeader>\r\n                        {renderDetails && <CardBody className='mt-1 text-center'>\r\n                            <img src={ComplainDetails.renter_info.photo} style={{ height: '50px', width: '50px', borderRadius: '50%', margin: '10px 0px' }} />\r\n                            <h3>{ComplainDetails.renter_info.full_name}</h3>\r\n                            <MapPin size={14} style={{ marginTop: '-3px' }} />&nbsp;&nbsp;<span className='text-muted'>{ComplainDetails.renter_info.renter_house_info.house_details}</span>\r\n                        </CardBody>}\r\n                    </Card>\r\n                    {renderDetails && complainResolve !== null && <Card>\r\n                        <CardHeader className='border-bottom py-1'>\r\n                            <CardTitle tag='h4'>Assigned Contractor Info</CardTitle>\r\n                        </CardHeader>\r\n                        {renderDetails && <CardBody className='mt-1 text-center'>\r\n                            {complainResolve !== null ? Object.keys(complainResolve.contractor).length !== 0 && <div>\r\n                                <img src={complainResolve.contractor.photo} style={{ height: '50px', width: '50px', borderRadius: '50%', margin: '10px 0px' }} />\r\n                                <h3>{complainResolve.contractor.full_name}</h3> <hr />\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <small>Amount</small>\r\n                                    <small>{CURRENCY_SYMBOL} {complainResolve.quotation}</small>\r\n                                </div><hr />\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <small>Start Time</small>\r\n                                    <small>{formatReadableDate(new Date(complainResolve.working_date_time))}</small>\r\n                                </div><hr />\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <small>End Time</small>\r\n                                    <small>{formatReadableDate(new Date(complainResolve.working_end_date_time))}</small>\r\n                                </div><hr />\r\n                                <div className=\"text-center\">\r\n                                    <span>{proposedDateTimeText}</span>\r\n                                </div>\r\n                            </div> : ''}\r\n                        </CardBody>}\r\n                    </Card>}\r\n                </Col>\r\n                <Col md='8'>\r\n                    <ChatComponent note={note} setNote={setNote} comment={chatTexts} complain_item_id={item_id} />\r\n                </Col>\r\n            </Row>\r\n            {/* end */}\r\n            {/* <Row className=''>\r\n                <Col md='7'>\r\n                    <Card>\r\n                        <CardHeader className='border-bottom'>\r\n                            <CardTitle tag='h4'>Complain Details</CardTitle>\r\n                        </CardHeader>\r\n                        <CardBody>\r\n                            {renderDetails && <Row>\r\n                                <Col sm='6' className=\"py-1 text-center\">\r\n                                    <img src={complain_image_urls[0]} className=\"img-fluid\" />\r\n                                </Col>\r\n                                <Col sm='6' className=\"py-1 text-center\">\r\n                                    <div>\r\n                                        <span>Type</span> <br />\r\n                                        <span className='text-primary'>{complainType.complain_type_name}</span><br />\r\n                                        <small>{formatReadableDate(new Date(ComplainDetails.created_at))}</small>\r\n                                    </div>\r\n                                    <hr />\r\n                                    <div>\r\n                                        <span>Status</span><br />\r\n                                        {statusType.id === 10 && <span className='text-primary cursor-pointer' onClick={handleViewContractors}>{statusType.status_name}</span>}\r\n                                        {statusType.id !== 10 && <span className='text-primary'>{statusType.status_name}</span>} <br />\r\n                                        <small>{complainSmallStatuses}</small>\r\n                                    </div>\r\n                                    <hr />\r\n                                    <div>\r\n                                        <span>Complain</span><br />\r\n                                        <span className='text-primary'>{complain_details}</span>\r\n                                        <small>{formatReadableDate(ComplainDetails.created_at)}</small>\r\n                                    </div>\r\n                                    <hr />\r\n                                    <div>\r\n                                        <span>Tenant Info</span><br />\r\n                                        <img src={ComplainDetails.renter_info.photo} style={{ height: '20px', width: '20px', borderRadius: '50%', marginTop: '-3px' }} />&nbsp;<span className='text-primary'>{ComplainDetails.renter_info.full_name}</span><br />\r\n                                        <small>{ComplainDetails.renter_info.renter_house_info.house_details}</small>\r\n                                    </div>\r\n                                    <hr />\r\n                                    {complainResolve !== null ? Object.keys(complainResolve.contractor).length !== 0 && <div>\r\n                                        <span>Assigned Contractor Info</span><br />\r\n                                        <img src={complainResolve.contractor.photo} style={{ height: '20px', width: '20px', borderRadius: '50%', marginTop: '-3px' }} />&nbsp;<span className='text-primary'>{complainResolve.contractor.full_name}</span><br />\r\n                                        <div className=\"text-left\">\r\n                                            <small><u>Quotation Amount </u> :- <b>{CURRENCY_SYMBOL} {complainResolve.quotation}</b></small><br />\r\n                                            <small><u>Start Date Time </u> :- <b>{formatReadableDate(new Date(ComplainDetails.created_at))}</b></small><br />\r\n                                            <small><u>End Date Time </u> :- <b>{formatReadableDate(new Date(ComplainDetails.created_at))}</b></small><br />\r\n                                            <small><u>Status </u> :- <b>{proposedDateTimeText}</b></small>\r\n                                        </div>\r\n                                    </div> : ''}\r\n                                </Col>\r\n                            </Row>}\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n                <Col md='5'>\r\n                    <ChatComponent note={note} setNote={setNote} comment={chatTexts} complain_item_id={item_id} />\r\n                </Col>\r\n            </Row > */}\r\n\r\n            <ContractorsModal toggleContractormodal={toggleContractormodal} Contractormodal={Contractormodal} contractorList={contractorList} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComplainDetails","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 15 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={15}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable","const options = { year: 'numeric', month: 'long', day: 'numeric'}\r\n\r\nexport const formatReadableDate = (date) => {\r\n    const time = new Date(date).getTime()\r\n    let minutes = Math.floor((time / (1000 * 60)) % 60)\r\n    let hours = Math.floor((time / (1000 * 60 * 60)) % 24)\r\n\r\n    hours = (hours < 10) ? `0${hours}` : hours\r\n    minutes = (minutes < 10) ? `0${minutes}` : minutes\r\n\r\n    //   console.log(msToTime(new Date(\"2021-08-27T15:05:49.870Z\").getTime()))\r\n    const finaldate = new Date(date).toLocaleDateString(undefined, options)\r\n    const finalTime = `${hours} : ${minutes}`\r\n    return `${finaldate} , ${finalTime}`\r\n}\r\n\r\n"],"sourceRoot":""}