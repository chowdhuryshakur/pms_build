{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/ServiceManagement/PendingServiceList.js","views/tables/data-tables/basic/AdminComponent/ServiceManagement/EditModal.js","views/tables/data-tables/basic/AdminComponent/ServiceManagement/ServiceList.js","views/viewhelper.js","views/tables/data-tables/basic/AdminComponent/ClientSideDataTable.js","views/tables/data-tables/basic/AdminComponent/ServiceLogicManagement/PendingServiceLogicList.js"],"names":["MySwal","withReactContent","Swal","PendingServiceList","useState","TableDataLoading","setTableDataLoading","resetData","pendingServiceList","setpendingServiceList","useEffect","localStorage","setItem","useJwt","getPendingServiceList","then","res","console","log","data","catch","err","Error","handlePoPupActions","id","status","message","fire","title","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","approveOrRejectService","Success","filter","x","response","buttonsStyling","isLoading","result","isConfirmed","column","name","minWidth","sortable","cell","row","index","selector","size","color","style","cursor","onClick","e","className","tag","md","TableData","EditModal","modal","toggleModal","serviceInfo","setserviceInfo","setReset","editPointRuleloading","seteditPointRuleloading","handleChange","target","value","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","width","onSubmit","preventDefault","serviceId","serviceKeyword","editService","autoComplete","Col","sm","FormGroup","Label","for","Input","type","onChange","required","placeholder","Button","Ripple","disabled","marginTop","Spinner","ServiceList","Array2D","JSON","parse","getItem","map","submenu","y","subMenuIDs","concat","serviceList","setserviceList","setModal","getServiceList","deleteService","activeTab","setActiveTab","tab","Card","CardBody","Nav","pills","NavItem","NavLink","active","includes","TabContent","TabPane","tabId","CardHeader","CardTitle","Link","to","marginRight","Row","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success","CommonDataTable","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive","PendingServiceLogicList","getPendingServiceLogicList","approveOrRejectServiceLogic","item","isFinancial"],"mappings":"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","file":"static/js/235.502473cc.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, XSquare, CheckSquare, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../ClientSideDataTable'\r\nimport PendingServiceLogicList from  '../ServiceLogicManagement/PendingServiceLogicList'\r\n\r\nconst PendingServiceList = () => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [pendingServiceList, setpendingServiceList] = useState([])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('useBMStoken', true)\r\n        useJwt.getPendingServiceList().then(res => {\r\n            console.log(res)\r\n            setpendingServiceList(res.data)\r\n            localStorage.setItem('useBMStoken', false)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n            localStorage.setItem('useBMStoken', false)\r\n        })\r\n    }, [resetData])\r\n    const handlePoPupActions = (id, status, message) => {\r\n        localStorage.setItem('useBMStoken', true)\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                return useJwt.approveOrRejectService(id, status).then(res => {\r\n                    Success(res)\r\n                    console.log(res)\r\n                    setpendingServiceList(pendingServiceList.filter(x => x.id !== id))\r\n                    localStorage.setItem('useBMStoken', false)\r\n                }).catch(err => {\r\n                    localStorage.setItem('useBMStoken', false)\r\n                    console.log(err.response)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'SL',\r\n            minWidth: '20px',\r\n            sortable: true,\r\n            cell: (row, index) => index + 1  //RDT provides index by default\r\n        },\r\n        {\r\n            name: 'Service Id',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'serviceId'\r\n        },\r\n        {\r\n            name: 'Service Keyword',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'serviceKeyword'\r\n        },\r\n        {\r\n            name: 'Created By',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'createdBy'\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Approve\">\r\n                        <CheckSquare size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.id, 1, 'Do you want to approve?')}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    <span title=\"Reject\">\r\n                        <XSquare size={15}\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.id, 0, 'Do you want to reject?')}\r\n                        />\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>Pending Services</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={pendingServiceList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n            </CardBody>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default PendingServiceList","import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../viewhelper'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\n\r\nconst EditModal = ({ modal, toggleModal, serviceInfo, setserviceInfo, setReset, resetData }) => {\r\n    const [editPointRuleloading, seteditPointRuleloading] = useState(false)\r\n\r\n    const handleChange = (e) => {\r\n        setserviceInfo({ ...serviceInfo, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { id, serviceId, serviceKeyword } = serviceInfo\r\n        localStorage.setItem('useBMStoken', true)\r\n        seteditPointRuleloading(true)\r\n        useJwt.editService(id, { id, serviceId, serviceKeyword }).then(res => {\r\n            setReset(!resetData)\r\n            seteditPointRuleloading(false)\r\n            console.log(res)\r\n            toggleModal()\r\n            Success(res)\r\n        }).catch(err => {\r\n            seteditPointRuleloading(false)\r\n            localStorage.setItem('useBMStoken', false)\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Edit Service</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row\" style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\r\n                    <Col sm=\"6\" >\r\n                        <FormGroup>\r\n                            <Label for=\"serviceId\">Service ID</Label>\r\n                            <Input type=\"number\"\r\n                                name=\"serviceId\"\r\n                                id='serviceId'\r\n                                value={serviceInfo.serviceId}\r\n                                onChange={handleChange}\r\n                                required\r\n                                placeholder=\"0\"\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"6\" >\r\n                        <FormGroup>\r\n                            <Label for=\"serviceKeyword\">Service Keyword</Label>\r\n                            <Input type=\"text\"\r\n                                name=\"serviceKeyword\"\r\n                                id='serviceKeyword'\r\n                                value={serviceInfo.serviceKeyword}\r\n                                onChange={handleChange}\r\n                                required\r\n                                placeholder=\"keyword\"\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"12\" className='text-center'>\r\n                        {\r\n                            editPointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\r\n                                <Spinner color='white' size='sm' />\r\n                                <span className='ml-50'>Loading...</span>\r\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\r\n                                <span >Update</span>\r\n                            </Button.Ripple>\r\n                        }\r\n                    </Col>\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../ClientSideDataTable'\r\nimport EditModal from './EditModal'\r\nimport PendingServiceList from './PendingServiceList'\r\n\r\nconst ServiceList = () => {\r\n    const AssignedMenus = JSON.parse(localStorage.getItem('AssignedMenus')) || []\r\n    const Array2D = AssignedMenus.map(x => x.submenu.map(y => y.id))\r\n    const subMenuIDs = [].concat(...Array2D)\r\n\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [serviceList, setserviceList] = useState([])\r\n    const [serviceInfo, setserviceInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('useBMStoken', true)\r\n        useJwt.getServiceList().then(res => {\r\n            console.log(res)\r\n            setserviceList(res.data)\r\n            localStorage.setItem('useBMStoken', false)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n            localStorage.setItem('useBMStoken', false)\r\n        })\r\n    }, [resetData])\r\n    const handlePoPupActions = (id, message) => {\r\n        localStorage.setItem('useBMStoken', true)\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                return useJwt.deleteService(id).then(res => {\r\n                    Success(res)\r\n                    console.log(res)\r\n                    localStorage.setItem('useBMStoken', false)\r\n                }).catch(err => {\r\n                    localStorage.setItem('useBMStoken', false)\r\n                    console.log(err.response)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'SL',\r\n            minWidth: '20px',\r\n            sortable: true,\r\n            cell: (row, index) => index + 1  //RDT provides index by default\r\n        },\r\n        {\r\n            name: 'Service Id',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'serviceId'\r\n        },\r\n        {\r\n            name: 'Service Keyword',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'serviceKeyword'\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Edit\">\r\n                        <Edit size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                setserviceInfo(row)\r\n                                setModal(true)\r\n                            }}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    <span title=\"Delete\">\r\n                        <Trash size={15}\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.id, 'Do you want to delete?')}\r\n                        />\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    const [activeTab, setActiveTab] = useState('1')\r\n\r\n  // ** Function to toggle tabs\r\n  const toggle = tab => setActiveTab(tab)\r\n\r\n    return (\r\n        <Card>\r\n          <CardBody className='pt-2'>\r\n            <Nav pills>\r\n              <NavItem>\r\n                <NavLink active={activeTab === '1'} onClick={() => toggle('1')}>\r\n                  <span className='align-middle d-none d-sm-block'>Services</span>\r\n                </NavLink>\r\n              </NavItem>\r\n              {subMenuIDs.includes(21) && <NavItem>\r\n                <NavLink active={activeTab === '2'} onClick={() => toggle('2')}>\r\n                  <span className='align-middle d-none d-sm-block'>Approve Services</span>\r\n                </NavLink>\r\n              </NavItem>}\r\n            </Nav>\r\n            <TabContent activeTab={activeTab}>\r\n              <TabPane tabId='1'>\r\n                <Card>\r\n                    <CardHeader className='border-bottom'>\r\n                        <CardTitle tag='h4'>Services</CardTitle>\r\n                        {subMenuIDs.includes(20) && <Button.Ripple className='ml-2' color='primary' tag={Link} to='/createService' >\r\n                        <div className='d-flex align-items-center'>\r\n                                <Plus size={17} style={{marginRight:'5px'}}/>\r\n                                <span >Add Service</span>\r\n                        </div>\r\n                        </Button.Ripple>}\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <Row>\r\n                            <Col md='12'>\r\n                                <CommonDataTable column={column} TableData={serviceList} TableDataLoading={TableDataLoading} />\r\n                            </Col>\r\n                        </Row>\r\n                        <EditModal\r\n                            toggleModal={toggleModal}\r\n                            modal={modal}\r\n                            resetData={resetData}\r\n                            setReset={setReset}\r\n                            serviceInfo={serviceInfo}\r\n                            setserviceInfo={setserviceInfo}\r\n                        />\r\n                    </CardBody>\r\n                </Card>\r\n              </TabPane>\r\n              <TabPane tabId='2'>\r\n                <PendingServiceList />\r\n              </TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ServiceList","import { Fragment, useState } from 'react'\r\nimport { toast, Slide } from 'react-toastify'\r\n\r\n    export const Error = (err) => {\r\n        try {\r\n            const e = err.response\r\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500) {\r\n                toast.error(e.data.message, {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n            } else  {\r\n                toast.error('The server is under maintenance', {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined\r\n                    }) \r\n            }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        }\r\n \r\n    }\r\n\r\n    export const ErrorMessage = (err) => {\r\n        try {\r\n        const e = err.response\r\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\r\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n         }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        } \r\n    }\r\n    export const Success = (response) => {\r\n        const message = response.data.message || 'success'\r\n        toast.success(message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n    }\r\n\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 10 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={10}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, XSquare, CheckSquare, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../ClientSideDataTable'\r\n\r\nconst PendingServiceLogicList = () => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [pendingServiceList, setpendingServiceList] = useState([])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('useBMStoken', true)\r\n        useJwt.getPendingServiceLogicList().then(res => {\r\n            console.log(res)\r\n            setpendingServiceList(res.data)\r\n            localStorage.setItem('useBMStoken', false)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n            localStorage.setItem('useBMStoken', false)\r\n        })\r\n    }, [resetData])\r\n    const handlePoPupActions = (id, status, message) => {\r\n        localStorage.setItem('useBMStoken', true)\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                return useJwt.approveOrRejectServiceLogic(id, status).then(res => {\r\n                    Success(res)\r\n                    console.log(res)\r\n                    setpendingServiceList(pendingServiceList.filter(x => x.id !== id))\r\n                    localStorage.setItem('useBMStoken', false)\r\n                }).catch(err => {\r\n                    localStorage.setItem('useBMStoken', false)\r\n                    console.log(err.response)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'SL',\r\n            minWidth: '20px',\r\n            sortable: true,\r\n            cell: (row, index) => index + 1  //RDT provides index by default\r\n        },\r\n        {\r\n            name: 'Minimum',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'minimum'\r\n        },\r\n        {\r\n            name: 'Maximum',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'maximum'\r\n        },\r\n        {\r\n            name: 'Is Financial',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: (item) => {\r\n                return item.isFinancial ? 'True' : 'False'\r\n              } \r\n        },\r\n        {\r\n            name: 'Service Keyword',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'serviceKeyword'\r\n        },\r\n        {\r\n            name: 'Rule Provider',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'ruleProvider'\r\n        },\r\n        {\r\n            name: 'Created By',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'createdBy'\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Approve\">\r\n                        <CheckSquare size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.id, 1, 'Do you want to approve?')}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    <span title=\"Reject\">\r\n                        <XSquare size={15}\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.id, 0, 'Do you want to reject?')}\r\n                        />\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>Pending Service Logics</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={pendingServiceList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PendingServiceLogicList"],"sourceRoot":""}