{"version":3,"sources":["views/CustomComponents/EstateAdminPages/BranchManagerPages/EditModal.js","views/CustomComponents/EstateAdminPages/BranchManagerPages/BranchManagerList.js","views/CustomComponents/CommonDataTable.js"],"names":["EditModal","modal","toggleModal","ManagerInfo","setManagerInfo","resetData","setReset","addressRef","useRef","useState","ukaddress","setukaddress","postcode","setPostCode","searching","setSearching","isLoading","setLoading","email","mobile","error","seterror","handleChange","e","chkEmail","test","target","value","name","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Form","style","width","onSubmit","preventDefault","user_id","full_name","address","console","log","estate_manager_id","length","substring","useJwt","editEstateManager","then","res","Success","catch","err","Error","autoComplete","Col","md","FormGroup","Label","for","Input","type","id","placeholder","onChange","InputGroup","InputGroupAddon","addonType","InputGroupText","PHONE_PREFIX","autoFocus","minLength","String","maxLength","color","fontSize","Button","outline","onClick","ukAddressEndpoint","postCode","data","payload","addresses","map","element","building_number","thoroughfare","locality","town_or_city","Spinner","size","ref","theme","selectThemeColors","classNamePrefix","selected","options","x","label","maxMenuHeight","isClearable","Ripple","disabled","MySwal","withReactContent","Swal","BranchManagerList","TableDataLoading","setTableDataLoading","managerList","setmanagerList","setModal","useEffect","EstateManagerList","column","minWidth","sortable","selector","row","statusBG","title","Badge","status","pill","cursor","fire","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","blockEstateManager","buttonsStyling","result","isConfirmed","activateEstateManager","Card","CardHeader","CardTitle","tag","CardBody","Row","CommonDataTable","TableData","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","handlePagination","pageCount","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive"],"mappings":"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","file":"static/js/195.9f9bc227.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport { useHistory } from 'react-router-dom'\r\nconst EditModal = ({ modal, toggleModal, ManagerInfo, setManagerInfo, resetData, setReset }) => {\r\n    const addressRef = useRef()\r\n    const [ukaddress, setukaddress] = useState([])\r\n    const [postcode, setPostCode] = useState('')\r\n    const [searching, setSearching] = useState(false)\r\n    const handlePostCodeSearch = e => {\r\n        e.preventDefault()\r\n        setSearching(true)\r\n        useJwt.ukAddressEndpoint({ postCode: postcode }).then(res => {\r\n            console.log(res.data.payload)\r\n            // const { latitude, longitude } = res.data.payload\r\n            // setUserInput({ ...ManagerInfo, latitude, longitude })\r\n            setukaddress(res.data.payload.addresses.map(element => `${element.building_number}, ${element.thoroughfare}, ${element.locality}, ${element.town_or_city}`))\r\n            setSearching(false)\r\n        }).catch(err => {\r\n            setukaddress([])\r\n            setSearching(false)\r\n            Error(err)\r\n        })\r\n    }\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const [error, seterror] = useState({\r\n        email: false,\r\n        mobile: false\r\n    })\r\n    const handleChange = e => {\r\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(e.target.value)\r\n        // Email Validator\r\n        if (e.target.name === 'email' && chkEmail) {\r\n            seterror({ ...error, email: false })\r\n        }\r\n        if (e.target.name === 'email' && !chkEmail) {\r\n            seterror({ ...error, email: true })\r\n        }\r\n        //mobile number validator\r\n        if (e.target.name === \"mobile\") {\r\n            // console.log(e.target.value)\r\n            // if (e.target.value[0] === '0') {\r\n            //     seterror({ ...error, mobile: true })\r\n            //     return 0\r\n            // } else {\r\n            //     seterror({ ...error, mobile: false })\r\n            // }\r\n            if (!/^[0-9]*$/.test(e.target.value)) {\r\n                return 0\r\n            }\r\n        }\r\n        setManagerInfo({ ...ManagerInfo, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        const { user_id, mobile, email, full_name, address } = ManagerInfo\r\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(email)\r\n        if (!chkEmail) {\r\n            seterror({ ...error, email: true })\r\n            return 0\r\n        }\r\n        console.log({ estate_manager_id: user_id, mobile: mobile.length === 11 ? mobile.substring(1) : mobile, email, full_name, address })\r\n        setLoading(true)\r\n        useJwt.editEstateManager({ estate_manager_id: user_id, mobile: mobile.length === 11 ? mobile.substring(1) : mobile, email, full_name, address }).then(res => {\r\n            console.log(res)\r\n            Success(res)\r\n            setLoading(false)\r\n            toggleModal()\r\n            setReset(!resetData)\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Edit Estate Manager Info</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row\" style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Col md='12'>\r\n                        <FormGroup>\r\n                            <Label for=\"full_name\">Full Name</Label>\r\n                            <Input\r\n                                // required\r\n                                type=\"text\"\r\n                                id='full_name'\r\n                                name=\"full_name\"\r\n                                placeholder=\"manager name\"\r\n                                value={ManagerInfo.full_name}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <FormGroup>\r\n                            <Label className='form-label' for='mobile'>\r\n                                Mobile Number\r\n                            </Label>\r\n                            <InputGroup className='input-group-merge w-100 mb-1'>\r\n                                <InputGroupAddon addonType='prepend'>\r\n                                    <InputGroupText>\r\n                                        {PHONE_PREFIX}\r\n                                    </InputGroupText>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                    autoFocus\r\n                                    // required\r\n                                    type='text'\r\n                                    minLength={String(ManagerInfo.mobile)[0] === '0' ? 11 : 10}\r\n                                    maxLength={String(ManagerInfo.mobile)[0] === '0' ? 11 : 10}\r\n                                    id='mobile'\r\n                                    name='mobile'\r\n                                    value={ManagerInfo.mobile}\r\n                                    onChange={handleChange}\r\n                                    placeholder='123-456-7899'\r\n                                />\r\n                            </InputGroup>\r\n                            {/* {error.mobile && <span style={{ color: 'red', fontSize: '11px' }}>First digit 0 not allow</span>} */}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <FormGroup>\r\n                            <Label for=\"email\">Email</Label>\r\n                            <Input\r\n                                // required\r\n                                type=\"email\"\r\n                                id='email'\r\n                                name=\"email\"\r\n                                placeholder=\"example@gmail.com\"\r\n                                value={ManagerInfo.email}\r\n                                onChange={handleChange}\r\n                            />\r\n                            {error.email && ManagerInfo.email && <span style={{ color: 'red', fontSize: '11px' }}>Please Enter a valid Email</span>}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    {/* <Col md='12' >\r\n                        <Label>address</Label>\r\n                        <Input\r\n                            // required\r\n                            type=\"text\"\r\n                            id='address'\r\n                            name=\"address\"\r\n                            placeholder=\"address\"\r\n                            value={ManagerInfo.address}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </Col> */}\r\n                    <Col md='12' >\r\n                        <Label for=\"postcode\">Search Address by Post Code</Label>\r\n                        <InputGroup>\r\n                            <Input\r\n                                // required\r\n                                type=\"text\"\r\n                                id='postcode'\r\n                                name=\"postcode\"\r\n                                placeholder=\"post code\"\r\n                                value={postcode}\r\n                                onChange={e => setPostCode(e.target.value)}\r\n                            />\r\n                            <InputGroupAddon addonType='append'>\r\n                                <Button color='primary' outline type='button' onClick={handlePostCodeSearch}>\r\n                                    {searching ? <Spinner size='sm' /> : 'Search'}\r\n                                </Button>\r\n                            </InputGroupAddon>\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <Label>Address</Label>\r\n                        <Select\r\n                            ref={addressRef}\r\n                            theme={selectThemeColors}\r\n                            className='react-select'\r\n                            classNamePrefix='select'\r\n                            name='address'\r\n                            onChange={selected => {\r\n                                setManagerInfo({ ...ManagerInfo, address: selected.value })\r\n                            }}\r\n                            options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                            value={{ value: ManagerInfo.address, label: ManagerInfo.address }}\r\n                            // isDisabled={!ukaddress.length}\r\n                            maxMenuHeight={150}\r\n                            isClearable={false}\r\n                        />\r\n                    </Col>\r\n                    <Col md=\"12 text-center\">\r\n                        <Button.Ripple className='mt-2' color='primary' type=\"submit\" disabled={isLoading}>\r\n                            {isLoading ? <Spinner size='sm' /> : 'Update'}\r\n                        </Button.Ripple>\r\n                    </Col>\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../../CommonDataTable'\r\nimport EditModal from './EditModal'\r\n\r\nconst BranchManagerList = () => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [managerList, setmanagerList] = useState([])\r\n    const [ManagerInfo, setManagerInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    useEffect(() => {\r\n        useJwt.EstateManagerList().then(res => {\r\n            console.log(res.data.payload)\r\n            setmanagerList(res.data.payload)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n        })\r\n    }, [resetData])\r\n\r\n    const handleActivate = estate_manager_id => {\r\n        // activateEstateManager\r\n        return MySwal.fire({\r\n            title: 'Are you sure to activate?',\r\n            // text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // console.log({ land_lord_id })\r\n                return useJwt.activateEstateManager({ estate_manager_id }).then(res => {\r\n                    console.log(res)\r\n                    setmanagerList(managerList.map(x => {\r\n                        if (x.user_id === estate_manager_id) {\r\n                            return { ...x, status: 1 }\r\n                        } else { return x }\r\n                    }))\r\n                }).catch(err => {\r\n                    Error(err)\r\n                    console.log(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n            }\r\n        })\r\n    }\r\n    const handleBlock = estate_manager_id => {\r\n        // blockEstateManager\r\n        return MySwal.fire({\r\n            title: 'Are you sure to block?',\r\n            // text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // console.log({ land_lord_id })\r\n                return useJwt.blockEstateManager({ estate_manager_id }).then(res => {\r\n                    console.log(res)\r\n                    setmanagerList(managerList.map(x => {\r\n                        if (x.user_id === estate_manager_id) {\r\n                            return { ...x, status: 0 }\r\n                        } else { return x }\r\n                    }))\r\n                }).catch(err => {\r\n                    Error(err)\r\n                    console.log(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n            }\r\n        })\r\n    }\r\n    const handleDelete = id => {\r\n        // blockEstateManager\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'Name',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'full_name'\r\n        },\r\n        {\r\n            name: 'Email',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'email'\r\n        },\r\n        {\r\n            name: 'Mobile',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'mobile'\r\n        },\r\n        {\r\n            name: 'Address',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: 'address'\r\n        },\r\n        {\r\n            name: 'Status',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                const statusBG = {\r\n                    0: { title: 'Blocked', color: 'light-danger' },\r\n                    1: { title: 'Active', color: 'light-success' }\r\n                }\r\n                return <Badge color={statusBG[row.status].color} pill className='px-1'>\r\n                    {statusBG[row.status].title}\r\n                </Badge>\r\n            }\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Edit\">\r\n                        <Edit size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                setManagerInfo(row)\r\n                                setModal(true)\r\n                            }}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    {row.status ? <span title=\"Block\">\r\n                        <Lock size={15}\r\n                            color='black'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handleBlock(row.user_id)}\r\n                        />\r\n                    </span> : <span title=\"Activate\">\r\n                        <CheckCircle size={15}\r\n                            color='dodgerblue'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handleActivate(row.user_id)}\r\n                        />\r\n                    </span>}\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>Estate Manager List</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={managerList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n                <EditModal\r\n                    toggleModal={toggleModal}\r\n                    modal={modal}\r\n                    resetData={resetData}\r\n                    setReset={setReset}\r\n                    setManagerInfo={setManagerInfo}\r\n                    ManagerInfo={ManagerInfo}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BranchManagerList","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 15 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={15}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable"],"sourceRoot":""}