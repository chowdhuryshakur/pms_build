{"version":3,"sources":["views/CustomComponents/EstateAdminPages/BranchManagerPages/EditModal.js","views/CustomComponents/EstateAdminPages/BranchManagerPages/BranchManagerList.js","views/CustomComponents/CommonDataTable.js"],"names":["EditModal","modal","toggleModal","ManagerInfo","setManagerInfo","resetData","setReset","useState","isLoading","setLoading","email","mobile","error","seterror","handleChange","e","chkEmail","test","target","value","name","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Form","style","width","onSubmit","preventDefault","console","log","user_id","full_name","address","useJwt","editEstateManager","estate_manager_id","then","res","Success","catch","err","Error","autoComplete","Col","md","FormGroup","Label","for","Input","type","id","placeholder","onChange","InputGroup","InputGroupAddon","addonType","InputGroupText","PHONE_PREFIX","autoFocus","minLength","maxLength","color","fontSize","Button","Ripple","disabled","Spinner","size","withReactContent","Swal","BranchManagerList","TableDataLoading","setTableDataLoading","managerList","setmanagerList","setModal","useEffect","EstateManagerList","data","payload","column","minWidth","sortable","selector","row","statusBG","title","Badge","status","pill","cursor","onClick","blockEstateManager","map","x","activateEstateManager","Card","CardHeader","CardTitle","tag","CardBody","Row","CommonDataTable","TableData","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive"],"mappings":"meAoJeA,EAxIG,SAAC,GAA8E,IAA5EC,EAA2E,EAA3EA,MAAOC,EAAoE,EAApEA,YAAaC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,eAAgBC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC7E,EAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAA0BF,mBAAS,CAC/BG,OAAO,EACPC,QAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAIMC,EAAe,SAAAC,GACjB,IAAMC,EAAW,eAAeC,KAAKF,EAAEG,OAAOC,OAS9C,GAPsB,UAAlBJ,EAAEG,OAAOE,MAAoBJ,GAC7BH,EAAS,2BAAKD,GAAN,IAAaF,OAAO,KAEV,UAAlBK,EAAEG,OAAOE,MAAqBJ,GAC9BH,EAAS,2BAAKD,GAAN,IAAaF,OAAO,KAGV,WAAlBK,EAAEG,OAAOE,KAAmB,CAE5B,GAA0B,MAAtBL,EAAEG,OAAOC,MAAM,GAEf,OADAN,EAAS,2BAAKD,GAAN,IAAaD,QAAQ,KACtB,EAIX,GAFIE,EAAS,2BAAKD,GAAN,IAAaD,QAAQ,MAE5B,WAAWM,KAAKF,EAAEG,OAAOC,OAC1B,OAAO,EAGff,EAAe,2BAAKD,GAAN,kBAAoBY,EAAEG,OAAOE,KAAOL,EAAEG,OAAOC,UAuB/D,OACI,eAACE,EAAA,EAAD,CAAOC,OAAQrB,EAAOsB,OAAQrB,EAAasB,UAAU,wBAArD,UACI,cAACC,EAAA,EAAD,CAAaF,OAAQrB,EAArB,sCACA,cAACwB,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMH,UAAU,MAAMI,MAAO,CAAEC,MAAO,QAAUC,SAzBvC,SAAAf,GACjBA,EAAEgB,iBACFC,QAAQC,IAAI9B,GACZ,IAAQ+B,EAA+C/B,EAA/C+B,QAASvB,EAAsCR,EAAtCQ,OAAQD,EAA8BP,EAA9BO,MAAOyB,EAAuBhC,EAAvBgC,UAAWC,EAAYjC,EAAZiC,QAE3C,IADiB,eAAenB,KAAKP,GAGjC,OADAG,EAAS,2BAAKD,GAAN,IAAaF,OAAO,KACrB,EAEXD,GAAW,GACX4B,IAAOC,kBAAkB,CAAEC,kBAAmBL,EAASvB,SAAQD,QAAOyB,YAAWC,YAAWI,MAAK,SAAAC,GAC7FT,QAAQC,IAAIQ,GACZC,YAAQD,GACRhC,GAAW,GACXP,IACAI,GAAUD,MACXsC,OAAM,SAAAC,GACLC,YAAMD,GACNnC,GAAW,OAOiEqC,aAAa,MAArF,UACI,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAOC,IAAI,YAAX,uBACA,cAACC,EAAA,EAAD,CAEIC,KAAK,OACLC,GAAG,YACHlC,KAAK,YACLmC,YAAY,eACZpC,MAAOhB,EAAYgC,UACnBqB,SAAU1C,SAItB,cAACiC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAO1B,UAAU,aAAa2B,IAAI,SAAlC,2BAGA,eAACM,EAAA,EAAD,CAAYjC,UAAU,+BAAtB,UACI,cAACkC,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACI,cAACC,EAAA,EAAD,UACKC,QAGT,cAACT,EAAA,EAAD,CACIU,WAAS,EAETT,KAAK,OACLU,UAAW,GACXC,UAAW,GACXV,GAAG,SACHlC,KAAK,SACLD,MAAOhB,EAAYQ,OACnB6C,SAAU1C,EACVyC,YAAY,oBAGnB3C,EAAMD,QAAU,sBAAMiB,MAAO,CAAEqC,MAAO,MAAOC,SAAU,QAAvC,0CAGzB,cAACnB,EAAA,EAAD,CAAKC,GAAG,KAAR,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,mBACA,cAACC,EAAA,EAAD,CAEIC,KAAK,QACLC,GAAG,QACHlC,KAAK,QACLmC,YAAY,oBACZpC,MAAOhB,EAAYO,MACnB8C,SAAU1C,IAEbF,EAAMF,OAASP,EAAYO,OAAS,sBAAMkB,MAAO,CAAEqC,MAAO,MAAOC,SAAU,QAAvC,6CAG7C,eAACnB,EAAA,EAAD,CAAKC,GAAG,KAAR,UACI,cAACE,EAAA,EAAD,sBACA,cAACE,EAAA,EAAD,CAEIC,KAAK,OACLC,GAAG,UACHlC,KAAK,UACLmC,YAAY,UACZpC,MAAOhB,EAAYiC,QACnBoB,SAAU1C,OAGlB,cAACiC,EAAA,EAAD,CAAKC,GAAG,iBAAR,SACI,cAACmB,EAAA,EAAOC,OAAR,CAAe5C,UAAU,OAAOyC,MAAM,UAAUZ,KAAK,SAASgB,SAAU7D,EAAxE,SACKA,EAAY,cAAC8D,EAAA,EAAD,CAASC,KAAK,OAAU,sBC3HlDC,IAAiBC,KAwJjBC,UApJW,WACtB,MAAgDnE,oBAAS,GAAzD,mBAAOoE,EAAP,KAAyBC,EAAzB,KACA,EAA8BrE,oBAAS,GAAvC,mBAAOF,EAAP,KAAkBC,EAAlB,KACA,EAAsCC,mBAAS,IAA/C,mBAAOsE,EAAP,KAAoBC,EAApB,KACA,EAAsCvE,mBAAS,IAA/C,mBAAOJ,EAAP,KAAoBC,EAApB,KAEA,EAA0BG,oBAAS,GAAnC,mBAAON,EAAP,KAAc8E,EAAd,KAGAC,qBAAU,WACN3C,IAAO4C,oBAAoBzC,MAAK,SAAAC,GAC5BT,QAAQC,IAAIQ,EAAIyC,KAAKC,SACrBL,EAAerC,EAAIyC,KAAKC,SACxBP,GAAoB,MACrBjC,OAAM,SAAAC,GACLC,YAAMD,GACNZ,QAAQC,IAAIW,GACZgC,GAAoB,QAEzB,CAACvE,IAEJ,IA+BM+E,EAAS,CACX,CACIhE,KAAM,OACNiE,SAAU,QACVC,UAAU,EACVC,SAAU,aAEd,CACInE,KAAM,QACNiE,SAAU,QACVC,UAAU,EACVC,SAAU,SAEd,CACInE,KAAM,SACNiE,SAAU,QACVC,UAAU,EACVC,SAAU,UAEd,CACInE,KAAM,UACNiE,SAAU,QAEVE,SAAU,WAEd,CACInE,KAAM,SACNiE,SAAU,QAEVE,SAAU,SAAAC,GACN,IAAMC,EAAW,CACb,EAAG,CAAEC,MAAO,UAAWzB,MAAO,gBAC9B,EAAG,CAAEyB,MAAO,SAAUzB,MAAO,kBAEjC,OAAO,cAAC0B,EAAA,EAAD,CAAO1B,MAAOwB,EAASD,EAAII,QAAQ3B,MAAO4B,MAAI,EAACrE,UAAU,OAAzD,SACFiE,EAASD,EAAII,QAAQF,UAIlC,CACItE,KAAM,SACNiE,SAAU,QAEVE,SAAU,SAAAC,GACN,OAAO,qCACH,sBAAME,MAAM,OAAZ,SACI,cAAC,IAAD,CAAMnB,KAAM,GACRN,MAAM,OACNrC,MAAO,CAAEkE,OAAQ,WACjBC,QAAS,SAAChF,GACNX,EAAeoF,GACfT,GAAS,QAPlB,WAWFS,EAAII,OAAS,sBAAMF,MAAM,QAAZ,SACV,cAAC,IAAD,CAAMnB,KAAM,GACRN,MAAM,QACNrC,MAAO,CAAEkE,OAAQ,WACjBC,QAAS,SAAChF,GAAD,OA5EbwB,EA4EgCiD,EAAItD,aA1EpDG,IAAO2D,mBAAmB,CAAEzD,sBAAqBC,MAAK,SAAAC,GAClDT,QAAQC,IAAIQ,GACZqC,EAAeD,EAAYoB,KAAI,SAAAC,GAC3B,OAAIA,EAAEhE,UAAYK,EACP,2BAAK2D,GAAZ,IAAeN,OAAQ,IACXM,SAErBvD,OAAM,SAAAC,GACLC,YAAMD,GACNZ,QAAQC,IAAIW,MAXA,IAAAL,OA8EM,sBAAMmD,MAAM,WAAZ,SACN,cAAC,IAAD,CAAanB,KAAM,GACfN,MAAM,aACNrC,MAAO,CAAEkE,OAAQ,WACjBC,QAAS,SAAChF,GAAD,OAhGVwB,EAgGgCiD,EAAItD,aA9FvDG,IAAO8D,sBAAsB,CAAE5D,sBAAqBC,MAAK,SAAAC,GACrDT,QAAQC,IAAIQ,GACZqC,EAAeD,EAAYoB,KAAI,SAAAC,GAC3B,OAAIA,EAAEhE,UAAYK,EACP,2BAAK2D,GAAZ,IAAeN,OAAQ,IACXM,SAErBvD,OAAM,SAAAC,GACLC,YAAMD,GACNZ,QAAQC,IAAIW,MAXG,IAAAL,aAuGvB,OACI,eAAC6D,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAY7E,UAAU,gBAAtB,SACI,cAAC8E,EAAA,EAAD,CAAWC,IAAI,KAAf,mCAEJ,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAAC1D,EAAA,EAAD,CAAKC,GAAG,KAAR,SACI,cAAC0D,EAAA,EAAD,CAAiBtB,OAAQA,EAAQuB,UAAW9B,EAAaF,iBAAkBA,QAGnF,cAAC,EAAD,CACIzE,YAjII,kBAAM6E,GAAU9E,IAkIpBA,MAAOA,EACPI,UAAWA,EACXC,SAAUA,EACVF,eAAgBA,EAChBD,YAAaA,Y,0HChGlBuG,IAtDS,SAAC,GAA6C,IAA3CtB,EAA0C,EAA1CA,OAAQuB,EAAkC,EAAlCA,UAAWhC,EAAuB,EAAvBA,iBAC1C,EAAsCpE,mBAAS,GAA/C,mBAAOqG,EAAP,KAAoBC,EAApB,KA+BA,OACI,cAAC,WAAD,UACI,cAAC,IAAD,CACIC,UAAQ,EACRC,YAAU,EAEVC,QAAS5B,EACT6B,kBAAmB,GACnBzF,UAAU,kBACV0F,SAAU,cAAC,IAAD,CAAa3C,KAAM,KAC7B4C,sBAAuBP,EAAc,EACrCQ,oBAnCa,wBACrB,cAAC,KAAD,GACIC,cAAc,GACdC,UAAU,GACVC,UAAWX,EACXY,aAAc,SAAAC,GAAI,OATD,SAAAA,GACrBZ,EAAeY,EAAKC,UAQMC,CAAiBF,IACvCG,UAAWjB,EAAUkB,OAASlB,EAAUkB,OAAS,GAAK,EACtDC,WAAW,MACXC,mBAAoB,EACpBC,qBAAsB,EACtBC,gBAAgB,SAChBC,cAAc,YACdC,eAAe,YACfC,mBAAmB,YACnBC,kBAAkB,YAClBC,cAAc,iBACdC,kBAAkB,iBAClBC,sBAAsB,YACtBC,kBAAkB,aAjBtB,+BAkBmB,aAlBnB,mCAmBuB,aAnBvB,mCAoBuB,8FApBvB,KAmCQvD,KAAMyB,EACN+B,gBAAiB/D,EACjBgE,kBAAmB,cAAC,IAAD,CAAS1E,MAAM,YAClC2E,YAAY","file":"static/js/185.50320c84.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\n\r\nconst EditModal = ({ modal, toggleModal, ManagerInfo, setManagerInfo, resetData, setReset }) => {\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const [error, seterror] = useState({\r\n        email: false,\r\n        mobile: false\r\n    })\r\n    const handleChange = e => {\r\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(e.target.value)\r\n        // Email Validator\r\n        if (e.target.name === 'email' && chkEmail) {\r\n            seterror({ ...error, email: false })\r\n        }\r\n        if (e.target.name === 'email' && !chkEmail) {\r\n            seterror({ ...error, email: true })\r\n        }\r\n        //mobile number validator\r\n        if (e.target.name === \"mobile\") {\r\n            // console.log(e.target.value)\r\n            if (e.target.value[0] === '0') {\r\n                seterror({ ...error, mobile: true })\r\n                return 0\r\n            } else {\r\n                seterror({ ...error, mobile: false })\r\n            }\r\n            if (!/^[0-9]*$/.test(e.target.value)) {\r\n                return 0\r\n            }\r\n        }\r\n        setManagerInfo({ ...ManagerInfo, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        console.log(ManagerInfo)\r\n        const { user_id, mobile, email, full_name, address } = ManagerInfo\r\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(email)\r\n        if (!chkEmail) {\r\n            seterror({ ...error, email: true })\r\n            return 0\r\n        }\r\n        setLoading(true)\r\n        useJwt.editEstateManager({ estate_manager_id: user_id, mobile, email, full_name, address }).then(res => {\r\n            console.log(res)\r\n            Success(res)\r\n            setLoading(false)\r\n            toggleModal()\r\n            setReset(!resetData)\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Edit Estate Manager Info</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row\" style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Col md='12'>\r\n                        <FormGroup>\r\n                            <Label for=\"full_name\">Full Name</Label>\r\n                            <Input\r\n                                // required\r\n                                type=\"text\"\r\n                                id='full_name'\r\n                                name=\"full_name\"\r\n                                placeholder=\"manager name\"\r\n                                value={ManagerInfo.full_name}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <FormGroup>\r\n                            <Label className='form-label' for='mobile'>\r\n                                Mobile Number\r\n                            </Label>\r\n                            <InputGroup className='input-group-merge w-100 mb-1'>\r\n                                <InputGroupAddon addonType='prepend'>\r\n                                    <InputGroupText>\r\n                                        {PHONE_PREFIX}\r\n                                    </InputGroupText>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                    autoFocus\r\n                                    // required\r\n                                    type='text'\r\n                                    minLength={10}\r\n                                    maxLength={10}\r\n                                    id='mobile'\r\n                                    name='mobile'\r\n                                    value={ManagerInfo.mobile}\r\n                                    onChange={handleChange}\r\n                                    placeholder='123-456-7899'\r\n                                />\r\n                            </InputGroup>\r\n                            {error.mobile && <span style={{ color: 'red', fontSize: '11px' }}>First digit 0 not allow</span>}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <FormGroup>\r\n                            <Label for=\"email\">Email</Label>\r\n                            <Input\r\n                                // required\r\n                                type=\"email\"\r\n                                id='email'\r\n                                name=\"email\"\r\n                                placeholder=\"example@gmail.com\"\r\n                                value={ManagerInfo.email}\r\n                                onChange={handleChange}\r\n                            />\r\n                            {error.email && ManagerInfo.email && <span style={{ color: 'red', fontSize: '11px' }}>Please Enter a valid Email</span>}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <Label>address</Label>\r\n                        <Input\r\n                            // required\r\n                            type=\"text\"\r\n                            id='address'\r\n                            name=\"address\"\r\n                            placeholder=\"address\"\r\n                            value={ManagerInfo.address}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </Col>\r\n                    <Col md=\"12 text-center\">\r\n                        <Button.Ripple className='mt-2' color='primary' type=\"submit\" disabled={isLoading}>\r\n                            {isLoading ? <Spinner size='sm' /> : 'Update'}\r\n                        </Button.Ripple>\r\n                    </Col>\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../../CommonDataTable'\r\nimport EditModal from './EditModal'\r\n\r\nconst BranchManagerList = () => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [managerList, setmanagerList] = useState([])\r\n    const [ManagerInfo, setManagerInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    useEffect(() => {\r\n        useJwt.EstateManagerList().then(res => {\r\n            console.log(res.data.payload)\r\n            setmanagerList(res.data.payload)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n        })\r\n    }, [resetData])\r\n\r\n    const handleActivate = estate_manager_id => {\r\n        // activateEstateManager\r\n        useJwt.activateEstateManager({ estate_manager_id }).then(res => {\r\n            console.log(res)\r\n            setmanagerList(managerList.map(x => {\r\n                if (x.user_id === estate_manager_id) {\r\n                    return { ...x, status: 1 }\r\n                } else { return x }\r\n            }))\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }\r\n    const handleBlock = estate_manager_id => {\r\n        // blockEstateManager\r\n        useJwt.blockEstateManager({ estate_manager_id }).then(res => {\r\n            console.log(res)\r\n            setmanagerList(managerList.map(x => {\r\n                if (x.user_id === estate_manager_id) {\r\n                    return { ...x, status: 0 }\r\n                } else { return x }\r\n            }))\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }\r\n    const handleDelete = id => {\r\n        // blockEstateManager\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'Name',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'full_name'\r\n        },\r\n        {\r\n            name: 'Email',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'email'\r\n        },\r\n        {\r\n            name: 'Mobile',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'mobile'\r\n        },\r\n        {\r\n            name: 'Address',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: 'address'\r\n        },\r\n        {\r\n            name: 'Status',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                const statusBG = {\r\n                    0: { title: 'Blocked', color: 'light-danger' },\r\n                    1: { title: 'Active', color: 'light-success' }\r\n                }\r\n                return <Badge color={statusBG[row.status].color} pill className='px-1'>\r\n                    {statusBG[row.status].title}\r\n                </Badge>\r\n            }\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Edit\">\r\n                        <Edit size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                setManagerInfo(row)\r\n                                setModal(true)\r\n                            }}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    {row.status ? <span title=\"Block\">\r\n                        <Lock size={15}\r\n                            color='black'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handleBlock(row.user_id)}\r\n                        />\r\n                    </span> : <span title=\"Activate\">\r\n                        <CheckCircle size={15}\r\n                            color='dodgerblue'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handleActivate(row.user_id)}\r\n                        />\r\n                    </span>}\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>Estate Manager List</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={managerList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n                <EditModal\r\n                    toggleModal={toggleModal}\r\n                    modal={modal}\r\n                    resetData={resetData}\r\n                    setReset={setReset}\r\n                    setManagerInfo={setManagerInfo}\r\n                    ManagerInfo={ManagerInfo}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BranchManagerList","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 15 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={15}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable"],"sourceRoot":""}