{"version":3,"sources":["views/CustomComponents/SuperAdminPages/EstateAdminCRUD/EditModal.js","views/CustomComponents/SuperAdminPages/EstateAdminCRUD/EstateAdminList.js","views/CustomComponents/CommonDataTable.js"],"names":["EditModal","modal","toggleModal","ManagerInfo","setManagerInfo","resetData","setReset","addressRef","useRef","useState","ukaddress","setukaddress","postcode","setPostCode","searching","setSearching","TenantChargeList","setTenantChargeList","useEffect","useJwt","TenantChargesList","then","res","console","log","data","payload","catch","err","Error","isLoading","setLoading","email","mobile","error","seterror","handleChange","e","chkEmail","test","target","value","name","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Form","style","width","onSubmit","preventDefault","user_id","full_name","address","tenant_charge","commission_percentage","per_tenant_charge_id","id","editEstateManager","estate_manager_id","length","substring","Success","autoComplete","Col","md","FormGroup","Label","for","Input","type","placeholder","onChange","InputGroup","InputGroupAddon","addonType","InputGroupText","PHONE_PREFIX","autoFocus","minLength","String","maxLength","color","fontSize","Button","outline","onClick","ukAddressEndpoint","postCode","addresses","map","element","building_number","thoroughfare","locality","town_or_city","Spinner","size","ref","theme","selectThemeColors","classNamePrefix","selected","options","x","label","maxMenuHeight","isClearable","min","max","charge_name","filter","charge","Ripple","disabled","MySwal","withReactContent","Swal","EstateAdminList","TableDataLoading","setTableDataLoading","managerList","setmanagerList","setModal","EstateAdminsList","column","minWidth","sortable","selector","row","statusBG","title","Badge","status","pill","cursor","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","deleteEstateAdmin","buttonsStyling","result","isConfirmed","blockEstateManager","activateEstateManager","Card","CardHeader","CardTitle","tag","CardBody","Row","CommonDataTable","TableData","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","handlePagination","pageCount","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive"],"mappings":"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","file":"static/js/197.a67ee877.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\n\r\nconst EditModal = ({ modal, toggleModal, ManagerInfo, setManagerInfo, resetData, setReset }) => {\r\n    const addressRef = useRef()\r\n    const [ukaddress, setukaddress] = useState([])\r\n    const [postcode, setPostCode] = useState('')\r\n    const [searching, setSearching] = useState(false)\r\n    const [TenantChargeList, setTenantChargeList] = useState([])\r\n    useEffect(() => {\r\n        useJwt.TenantChargesList().then(res => {\r\n            console.log(res.data.payload)\r\n            setTenantChargeList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    const handlePostCodeSearch = e => {\r\n        e.preventDefault()\r\n        setSearching(true)\r\n        useJwt.ukAddressEndpoint({ postCode: postcode }).then(res => {\r\n            console.log(res.data.payload)\r\n            // const { latitude, longitude } = res.data.payload\r\n            // setUserInput({ ...ManagerInfo, latitude, longitude })\r\n            setukaddress(res.data.payload.addresses.map(element => `${element.building_number}, ${element.thoroughfare}, ${element.locality}, ${element.town_or_city}`))\r\n            setSearching(false)\r\n        }).catch(err => {\r\n            setukaddress([])\r\n            setSearching(false)\r\n            Error(err)\r\n        })\r\n    }\r\n\r\n    const [isLoading, setLoading] = useState(false)\r\n\r\n    const [error, seterror] = useState({\r\n        email: false,\r\n        mobile: false\r\n    })\r\n    const handleChange = e => {\r\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(e.target.value)\r\n        // Email Validator\r\n        if (e.target.name === 'email' && chkEmail) {\r\n            seterror({ ...error, email: false })\r\n        }\r\n        if (e.target.name === 'email' && !chkEmail) {\r\n            seterror({ ...error, email: true })\r\n        }\r\n        //mobile number validator\r\n        if (e.target.name === \"mobile\") {\r\n            // console.log(e.target.value)\r\n            // if (e.target.value[0] === '0') {\r\n            //     seterror({ ...error, mobile: true })\r\n            //     return 0\r\n            // } else {\r\n            //     seterror({ ...error, mobile: false })\r\n            // }\r\n            if (!/^[0-9]*$/.test(e.target.value)) {\r\n                return 0\r\n            }\r\n        }\r\n        setManagerInfo({ ...ManagerInfo, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        console.log(ManagerInfo)\r\n        const { user_id, mobile, email, full_name, address, tenant_charge, commission_percentage } = ManagerInfo\r\n        const per_tenant_charge_id = tenant_charge.id\r\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(email)\r\n        if (!chkEmail) {\r\n            seterror({ ...error, email: true })\r\n            return 0\r\n        }\r\n        setLoading(true)\r\n        // console.log({ estate_manager_id: user_id, mobile: mobile.length === 11 ? mobile.substring(1) : mobile, email, full_name, address, per_tenant_charge_id, commission_percentage })\r\n        useJwt.editEstateManager({ estate_manager_id: user_id, mobile: mobile.length === 11 ? mobile.substring(1) : mobile, email, full_name, address, per_tenant_charge_id, commission_percentage }).then(res => {\r\n            console.log(res)\r\n            Success(res)\r\n            setLoading(false)\r\n            toggleModal()\r\n            setReset(!resetData)\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Edit Estate Admin Info</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row\" style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                    <Col md='6'>\r\n                        <FormGroup>\r\n                            <Label for=\"full_name\">Full Name</Label>\r\n                            <Input\r\n                                // required\r\n                                type=\"text\"\r\n                                id='full_name'\r\n                                name=\"full_name\"\r\n                                placeholder=\"manager name\"\r\n                                value={ManagerInfo.full_name}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='6' >\r\n                        <FormGroup>\r\n                            <Label className='form-label' for='mobile'>\r\n                                Mobile Number\r\n                            </Label>\r\n                            <InputGroup className='input-group-merge w-100 mb-1'>\r\n                                <InputGroupAddon addonType='prepend'>\r\n                                    <InputGroupText>\r\n                                        {PHONE_PREFIX}\r\n                                    </InputGroupText>\r\n                                </InputGroupAddon>\r\n                                <Input\r\n                                    autoFocus\r\n                                    // required\r\n                                    type='text'\r\n                                    minLength={String(ManagerInfo.mobile)[0] === '0' ? 11 : 10}\r\n                                    maxLength={String(ManagerInfo.mobile)[0] === '0' ? 11 : 10}\r\n                                    id='mobile'\r\n                                    name='mobile'\r\n                                    value={ManagerInfo.mobile}\r\n                                    onChange={handleChange}\r\n                                    placeholder='123-456-7899'\r\n                                />\r\n                            </InputGroup>\r\n                            {/* {error.mobile && <span style={{ color: 'red', fontSize: '11px' }}>First digit 0 not allow</span>} */}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <FormGroup>\r\n                            <Label for=\"email\">Email</Label>\r\n                            <Input\r\n                                // required\r\n                                type=\"email\"\r\n                                id='email'\r\n                                name=\"email\"\r\n                                placeholder=\"example@gmail.com\"\r\n                                value={ManagerInfo.email}\r\n                                onChange={handleChange}\r\n                            />\r\n                            {error.email && ManagerInfo.email && <span style={{ color: 'red', fontSize: '11px' }}>Please Enter a valid Email</span>}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <Label for=\"postcode\">Search Address by Post Code</Label>\r\n                        <InputGroup>\r\n                            <Input\r\n                                // required\r\n                                type=\"text\"\r\n                                id='postcode'\r\n                                name=\"postcode\"\r\n                                placeholder=\"post code\"\r\n                                value={postcode}\r\n                                onChange={e => setPostCode(e.target.value)}\r\n                            />\r\n                            <InputGroupAddon addonType='append'>\r\n                                <Button color='primary' outline type='button' onClick={handlePostCodeSearch}>\r\n                                    {searching ? <Spinner size='sm' /> : 'Search'}\r\n                                </Button>\r\n                            </InputGroupAddon>\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col md='12' >\r\n                        <Label>Select Address</Label>\r\n                        <Select\r\n                            ref={addressRef}\r\n                            theme={selectThemeColors}\r\n                            className='react-select'\r\n                            classNamePrefix='select'\r\n                            name='address'\r\n                            onChange={selected => {\r\n                                setManagerInfo({ ...ManagerInfo, address: selected.value })\r\n                            }}\r\n                            options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                            value={{ value: ManagerInfo.address, label: ManagerInfo.address }}\r\n                            // isDisabled={!ukaddress.length}\r\n                            maxMenuHeight={150}\r\n                            isClearable={false}\r\n                        />\r\n                    </Col>\r\n                    {/* <Col md='12' >\r\n                        <Label>address</Label>\r\n                        <Input\r\n                            // required\r\n                            type=\"text\"\r\n                            id='address'\r\n                            name=\"address\"\r\n                            placeholder=\"address\"\r\n                            value={ManagerInfo.address}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </Col> */}\r\n                    <Col md='6' className='my-1'>\r\n                        <FormGroup>\r\n                            <Label for=\"commission_percentage\">commission_percentage (%)</Label>\r\n                            <Input\r\n                                // required\r\n                                type=\"number\"\r\n                                min={0}\r\n                                max={99}\r\n                                id='commission_percentage'\r\n                                name=\"commission_percentage\"\r\n                                placeholder=\"0\"\r\n                                value={ManagerInfo.commission_percentage}\r\n                                onChange={handleChange}\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md='6' className='my-1'>\r\n                        <FormGroup>\r\n                            <Label for=\"per_tenant_charge\">Charge Per Tenant </Label>\r\n                            {ManagerInfo.tenant_charge && <Select\r\n                                theme={selectThemeColors}\r\n                                className='react-select'\r\n                                classNamePrefix='select'\r\n                                name='address'\r\n                                onChange={selected => {\r\n                                    setManagerInfo({ ...ManagerInfo, tenant_charge: { ...ManagerInfo.tenant_charge, id: selected.value } })\r\n                                }}\r\n                                maxMenuHeight={100}\r\n                                options={TenantChargeList.map(x => { return { value: x.id, label: x.charge_name } })}\r\n                                value={TenantChargeList.filter(charge => charge.id === ManagerInfo.tenant_charge.id).map(x => { return { value: x.id, label: x.charge_name } })}\r\n                                // isDisabled={!ukaddress.length}\r\n                                isClearable={false}\r\n                            />}\r\n                            {/* <Input\r\n                                required\r\n                                type=\"number\"\r\n                                min={0}\r\n                                id='per_tenant_charge'\r\n                                name=\"per_tenant_charge\"\r\n                                placeholder=\"amount\"\r\n                                value={ManagerInfo.tenant_charge.charge_amount}\r\n                                onChange={handleChange}\r\n                            /> */}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"12 text-center\">\r\n                        <Button.Ripple className='mt-2' color='primary' type=\"submit\" disabled={isLoading}>\r\n                            {isLoading ? <Spinner size='sm' /> : 'Update'}\r\n                        </Button.Ripple>\r\n                    </Col>\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../../CommonDataTable'\r\nimport EditModal from './EditModal'\r\n\r\nconst EstateAdminList = () => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [managerList, setmanagerList] = useState([])\r\n    const [ManagerInfo, setManagerInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    useEffect(() => {\r\n        useJwt.EstateAdminsList().then(res => {\r\n            console.log(res.data.payload)\r\n            setmanagerList(res.data.payload)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n        })\r\n    }, [resetData])\r\n\r\n    const handleActivate = estate_manager_id => {\r\n        // activateEstateManager\r\n        return MySwal.fire({\r\n            title: 'Are you sure to activate?',\r\n            // text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // console.log({ land_lord_id })\r\n                return useJwt.activateEstateManager({ estate_manager_id }).then(res => {\r\n                    console.log(res)\r\n                    setmanagerList(managerList.map(x => {\r\n                        if (x.user_id === estate_manager_id) {\r\n                            return { ...x, status: 1 }\r\n                        } else { return x }\r\n                    }))\r\n                }).catch(err => {\r\n                    Error(err)\r\n                    console.log(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n            }\r\n        })\r\n    }\r\n    const handleBlock = estate_manager_id => {\r\n        // blockEstateManager\r\n        return MySwal.fire({\r\n            title: 'Are you sure to block?',\r\n            // text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // console.log({ land_lord_id })\r\n                return useJwt.blockEstateManager({ estate_manager_id }).then(res => {\r\n                    console.log(res)\r\n                    setmanagerList(managerList.map(x => {\r\n                        if (x.user_id === estate_manager_id) {\r\n                            return { ...x, status: 0 }\r\n                        } else { return x }\r\n                    }))\r\n                }).catch(err => {\r\n                    Error(err)\r\n                    console.log(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n            }\r\n        })\r\n    }\r\n    const handleDelete = estate_manager_id => {\r\n        // blockEstateManager\r\n        return MySwal.fire({\r\n            title: 'Are you sure to delete?',\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // console.log({ land_lord_id })\r\n                return useJwt.deleteEstateAdmin({ estate_manager_id }).then(res => {\r\n                    console.log(res)\r\n                    setmanagerList(managerList.filter(x => x.user_id !== estate_manager_id))\r\n                }).catch(err => {\r\n                    Error(err)\r\n                    console.log(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n            }\r\n        })\r\n    }\r\n    const column = [\r\n        // {\r\n        //     name: 'ID',\r\n        //     maxWidth: '50px',\r\n        //     sortable: true,\r\n        //     selector: 'user_id'\r\n        // },\r\n        {\r\n            name: 'Name',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'full_name'\r\n        },\r\n        {\r\n            name: 'Email',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'email'\r\n        },\r\n        {\r\n            name: 'Mobile',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'mobile'\r\n        },\r\n        {\r\n            name: 'Address',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: 'address'\r\n        },\r\n        {\r\n            name: 'Commission',\r\n            minWidth: '50px',\r\n            // sortable: true,\r\n            selector: 'commission_percentage'\r\n        },\r\n        {\r\n            name: 'Charge',\r\n            minWidth: '50px',\r\n            // sortable: true,\r\n            selector: row => row.tenant_charge.charge_name\r\n        },\r\n        {\r\n            name: 'Status',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                const statusBG = {\r\n                    0: { title: 'Blocked', color: 'light-danger' },\r\n                    1: { title: 'Active', color: 'light-success' }\r\n                }\r\n                return <Badge color={statusBG[row.status].color} pill className='px-1'>\r\n                    {statusBG[row.status].title}\r\n                </Badge>\r\n            }\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Edit\">\r\n                        <Edit size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                setManagerInfo(row)\r\n                                setModal(true)\r\n                            }}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    <span title=\"Delete\">\r\n                        <Trash size={15}\r\n                            color='crimson'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handleDelete(row.user_id)}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    {row.status ? <span title=\"Block\">\r\n                        <Lock size={15}\r\n                            color='black'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handleBlock(row.user_id)}\r\n                        />\r\n                    </span> : <span title=\"Activate\">\r\n                        <CheckCircle size={15}\r\n                            color='dodgerblue'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handleActivate(row.user_id)}\r\n                        />\r\n                    </span>}\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>Estate Admin List</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={managerList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n                <EditModal\r\n                    toggleModal={toggleModal}\r\n                    modal={modal}\r\n                    resetData={resetData}\r\n                    setReset={setReset}\r\n                    setManagerInfo={setManagerInfo}\r\n                    ManagerInfo={ManagerInfo}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default EstateAdminList","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 15 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={15}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable"],"sourceRoot":""}