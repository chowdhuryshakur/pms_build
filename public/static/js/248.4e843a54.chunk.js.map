{"version":3,"sources":["views/VendorComponents/PointRuleManagement/EditModal.js","views/VendorComponents/PointRuleManagement/PointRuleList.js","views/viewhelper.js","views/helper.js","views/VendorComponents/ClientSideDataTable.js"],"names":["EditModal","modal","toggleModal","pointRuleInfo","setPointRuleInfo","setReset","resetData","BusinessList","JSON","parse","localStorage","getItem","useState","editPointRuleloading","seteditPointRuleloading","email","handleChange","e","target","name","value","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Form","style","width","onSubmit","preventDefault","Id","SKUAmount","SKUPoints","SKUStartRange","SKUEndRange","IsRange","setItem","merchantId","pms_merchantid","tempSkuAmounts","useJwt","updateMyRule","rule_id","skuamount","skupoints","skustartrange","skuendrange","isrange","then","res","console","log","Success","catch","err","Error","autoComplete","Col","sm","FormGroup","Label","for","Input","type","id","onChange","required","placeholder","check","checked","Button","Ripple","color","disabled","marginTop","Spinner","size","MySwal","withReactContent","Swal","PointRuleList","TableDataLoading","setTableDataLoading","pointRuleList","setPointRuleList","setModal","useEffect","getMyRules","data","column","minWidth","sortable","cell","row","index","selector","item","CreatedAt","formatReadableDate","title","cursor","onClick","message","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","ruleId","parseInt","deleteMyRule","filter","x","response","buttonsStyling","isLoading","result","isConfirmed","Card","CardHeader","CardTitle","tag","Link","to","marginRight","CardBody","Row","md","TableData","status","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success","FormatePhoneNo","phone","String","replace","options","year","month","day","hour","minute","date","Date","toLocaleDateString","thousandSeparator","toString","CommonDataTable","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive"],"mappings":"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","file":"static/js/248.4e843a54.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\n\r\nconst EditModal = ({ modal, toggleModal, pointRuleInfo, setPointRuleInfo, setReset, resetData }) => {\r\n    const BusinessList = JSON.parse(localStorage.getItem('customerBusinesses'))\r\n    const [editPointRuleloading, seteditPointRuleloading] = useState(false)\r\n    const [error, seterror] = useState({\r\n        email: false\r\n    })\r\n\r\n    const handleChange = (e) => {\r\n        setPointRuleInfo({ ...pointRuleInfo, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { Id, SKUAmount, SKUPoints, SKUStartRange, SKUEndRange, IsRange } = pointRuleInfo\r\n        localStorage.setItem('usePMStoken', true)\r\n        seteditPointRuleloading(true)\r\n        const merchantId = BusinessList[0].pms_merchantid\r\n        let tempSkuAmounts = 0\r\n        if (!IsRange) { tempSkuAmounts = SKUAmount }\r\n        useJwt.updateMyRule(merchantId, { rule_id:Id, skuamount:tempSkuAmounts, skupoints:SKUPoints, skustartrange:SKUStartRange, skuendrange:SKUEndRange, isrange:IsRange }).then(res => {\r\n            setReset(!resetData)\r\n            seteditPointRuleloading(false)\r\n            console.log(res)\r\n            toggleModal()\r\n            Success(res)\r\n        }).catch(err => {\r\n            seteditPointRuleloading(false)\r\n            localStorage.setItem('usePMStoken', false)\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Edit Point Rule</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row\" style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\r\n                    <Col sm=\"6\" >\r\n                        <FormGroup>\r\n                            <Label for=\"SKUPoints\">SKU Points</Label>\r\n                            <Input type=\"number\"\r\n                                name=\"SKUPoints\"\r\n                                id='SKUPoints'\r\n                                value={pointRuleInfo.SKUPoints}\r\n                                onChange={handleChange}\r\n                                required\r\n                                placeholder=\"0\"\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"12\" className='mb-1' >\r\n                            <FormGroup check>\r\n                                <Input onChange={(e) => {\r\n                                        if (e.target.checked) { \r\n                                            setPointRuleInfo({ ...pointRuleInfo, IsRange: true })\r\n                                        } else {\r\n                                            setPointRuleInfo({ ...pointRuleInfo, IsRange: false })\r\n                                        }\r\n                                    }\r\n                                } type='checkbox' id='viaEmail' checked={pointRuleInfo.IsRange}/>\r\n                                <Label for='viaEmail' check>\r\n                                    Is Range\r\n                                </Label>\r\n                            </FormGroup>\r\n                        </Col>\r\n                    {pointRuleInfo.IsRange ?  <Col sm=\"6\" >\r\n                                <FormGroup>\r\n                                    <Label for=\"SKUStartRange\">SKU Start Range</Label>\r\n                                    <Input type=\"number\"\r\n                                        name=\"SKUStartRange\"\r\n                                        id='SKUStartRange'\r\n                                        value={pointRuleInfo.SKUStartRange}\r\n                                        onChange={handleChange}\r\n                                        required\r\n                                        placeholder=\"0\"\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col> : null}\r\n                    { pointRuleInfo.IsRange ? <Col sm=\"6\" >\r\n                                <FormGroup>\r\n                                    <Label for=\"SKUEndRange\">SKU End Range</Label>\r\n                                    <Input type=\"number\"\r\n                                        name=\"SKUEndRange\"\r\n                                        id='SKUEndRange'\r\n                                        value={pointRuleInfo.SKUEndRange}\r\n                                        onChange={handleChange}\r\n                                        required\r\n                                        placeholder=\"0\"\r\n                                    />\r\n                                </FormGroup>\r\n                            </Col> : null}\r\n                    {pointRuleInfo.IsRange ? null : <Col sm=\"6\" >\r\n                            <FormGroup>\r\n                                <Label for=\"SKUAmount\">SKU Amount</Label>\r\n                                <Input type=\"number\"\r\n                                    name=\"SKUAmount\"\r\n                                    id='SKUAmount'\r\n                                    value={pointRuleInfo.SKUAmount}\r\n                                    onChange={handleChange}\r\n                                    required\r\n                                    placeholder=\"0\"\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                    }\r\n\r\n                    <Col sm=\"12\" className='text-center'>\r\n                        {\r\n                            editPointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\r\n                                <Spinner color='white' size='sm' />\r\n                                <span className='ml-50'>Loading...</span>\r\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\r\n                                <span >Submit</span>\r\n                            </Button.Ripple>\r\n                        }\r\n                    </Col>\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../ClientSideDataTable'\r\nimport EditModal from './EditModal'\r\nimport {formatReadableDate} from '../../helper'\r\n\r\nconst PointRuleList = () => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [pointRuleList, setPointRuleList] = useState([])\r\n    const [pointRuleInfo, setPointRuleInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n    const BusinessList = JSON.parse(localStorage.getItem('customerBusinesses'))\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('usePMStoken', true)\r\n        const merchantId = BusinessList[0].pms_merchantid\r\n        useJwt.getMyRules(merchantId).then(res => {\r\n            console.log(res)\r\n            setPointRuleList(res.data.data)\r\n            localStorage.setItem('usePMStoken', false)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n            localStorage.setItem('usePMStoken', false)\r\n        })\r\n    }, [resetData])\r\n    const handlePoPupActions = (id, message) => {\r\n        localStorage.setItem('usePMStoken', true)\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // return true\r\n                const merchantId = BusinessList[0].pms_merchantid\r\n                const ruleId = parseInt(id)\r\n                return useJwt.deleteMyRule(merchantId, {rule_id: ruleId}).then(res => {\r\n                    Success(res)\r\n                    console.log(res)\r\n                    setPointRuleList(pointRuleList.filter(x => x.Id !== id))\r\n                    localStorage.setItem('usePMStoken', false)\r\n                }).catch(err => {\r\n                    localStorage.setItem('usePMStoken', false)\r\n                    console.log(err.response)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'SL.',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            cell: (row, index) => index + 1  //RDT provides index by default\r\n        },\r\n        {\r\n            name: 'SKU Points',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'SKUPoints'\r\n        },\r\n        {\r\n            name: 'Is Range',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: (item) => {\r\n                return item.IsRange ? 'True' : 'False'\r\n              } \r\n        },\r\n        {\r\n            name: 'SKU Amount',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'SKUAmount'\r\n        },\r\n        {\r\n            name: 'SKU Start Range',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'SKUStartRange'\r\n        },\r\n        {\r\n            name: 'SKU End Range',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'SKUEndRange'\r\n        },\r\n        {\r\n            name: 'Product ID',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'product_id'\r\n        },\r\n        {\r\n            name: 'Created At',\r\n            minWidth: '250px',\r\n            sortable: true,\r\n            selector: (item) => {\r\n                return item.CreatedAt ? formatReadableDate(item.CreatedAt) : null\r\n               }\r\n        },\r\n        // {\r\n        //     name: 'SKU End Range',\r\n        //     minWidth: '100px',\r\n        //     // sortable: true,\r\n        //     selector: row => {\r\n        //         const statusBG = {\r\n        //             0: { title: 'Inactive', color: 'light-danger' },\r\n        //             1: { title: 'Active', color: 'light-success' }\r\n        //         }\r\n        //         return <Badge color={statusBG[row.userstatus].color} pill className='px-1'>\r\n        //             {statusBG[row.userstatus].title}\r\n        //         </Badge>\r\n        //     }\r\n        // },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Edit\">\r\n                        <Edit size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                setPointRuleInfo(row)\r\n                                setModal(true)\r\n                            }}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    <span title=\"Delete\">\r\n                        <Trash size={15}\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.Id, 'Do you want to delete?')}\r\n                        />\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>SKU Rules</CardTitle>\r\n                <Button.Ripple className='ml-2' color='primary' tag={Link} to='/createPointRule' >\r\n                   <div className='d-flex align-items-center'>\r\n                        <Plus size={17} style={{marginRight:'5px'}}/>\r\n                        <span >Create SKU Rule</span>\r\n                   </div>\r\n                 </Button.Ripple>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={pointRuleList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n                <EditModal\r\n                    toggleModal={toggleModal}\r\n                    modal={modal}\r\n                    resetData={resetData}\r\n                    setReset={setReset}\r\n                    pointRuleInfo={pointRuleInfo}\r\n                    setPointRuleInfo={setPointRuleInfo}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PointRuleList","import { Fragment, useState } from 'react'\r\nimport { toast, Slide } from 'react-toastify'\r\n\r\n    export const Error = (err) => {\r\n        try {\r\n            const e = err.response\r\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500) {\r\n                toast.error(e.data.message, {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n            } else  {\r\n                toast.error('The server is under maintenance', {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined\r\n                    }) \r\n            }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        }\r\n \r\n    }\r\n\r\n    export const ErrorMessage = (err) => {\r\n        try {\r\n        const e = err.response\r\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\r\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n         }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        } \r\n    }\r\n    export const Success = (response) => {\r\n        const message = response.data.message || 'success'\r\n        toast.success(message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n    }\r\n\r\n","\r\n//Ex-> '1234567891' to '1234 567 891'\r\nexport const FormatePhoneNo = (phone) => {\r\n   const phonenoinstring = String(phone)\r\n  return phonenoinstring.replace(/^(.{4})(.*)(.{3})$/, '$1 $2 $3')\r\n}\r\n\r\nconst options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' }\r\n\r\nexport const formatReadableDate = (date) => { return (new Date(date)).toLocaleDateString(undefined, options) }\r\n\r\nexport const thousandSeparator = (x) => { return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") }","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 10 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={10}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable"],"sourceRoot":""}