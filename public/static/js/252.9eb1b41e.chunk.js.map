{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/OverallPointRuleManagement/EditModal.js","views/tables/data-tables/basic/AdminComponent/OverallPointRuleManagement/OverallPointRuleList.js","views/viewhelper.js","views/tables/data-tables/basic/AdminComponent/ClientSideDataTable.js","views/helper.js"],"names":["EditModal","modal","toggleModal","overallPointRuleInfo","setoverallPointRuleInfo","setReset","resetData","JSON","parse","localStorage","getItem","useState","editPointRuleloading","seteditPointRuleloading","handleChange","e","target","name","value","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Form","style","width","onSubmit","preventDefault","Id","PointRateSetupName","PurchaseAmount","Points","ExpiryDate","OfferRate","merchantid","OfferStartDate","OfferEndDate","setItem","merchantId","useJwt","updateOverallRule","rule_id","then","res","console","log","Success","catch","err","Error","autoComplete","Col","sm","FormGroup","Label","for","Input","type","id","onChange","placeholder","Date","toLocaleDateString","check","checked","Button","Ripple","color","disabled","marginTop","Spinner","size","MySwal","withReactContent","Swal","OverallPointRuleList","Array2D","map","x","submenu","y","subMenuIDs","concat","TableDataLoading","setTableDataLoading","overallPointRuleList","setoverallPointRuleList","setModal","useEffect","getAllOverallRules","data","column","minWidth","sortable","cell","row","index","selector","item","formatReadableDate","CreatedAt","title","cursor","onClick","message","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","deleteOverallRule","filter","response","buttonsStyling","isLoading","result","isConfirmed","Card","CardHeader","CardTitle","tag","includes","Link","to","marginRight","CardBody","Row","md","TableData","status","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success","CommonDataTable","currentPage","setCurrentPage","customStyles","cells","whiteSpace","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive","FormatePhoneNo","phone","String","replace","options","year","month","day","hour","minute","date","thousandSeparator","toString"],"mappings":"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","file":"static/js/252.9eb1b41e.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../viewhelper'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\n\r\nconst EditModal = ({ modal, toggleModal, overallPointRuleInfo, setoverallPointRuleInfo, setReset, resetData }) => {\r\n    const BusinessList = JSON.parse(localStorage.getItem('customerBusinesses'))\r\n    const [editPointRuleloading, seteditPointRuleloading] = useState(false)\r\n\r\n    const handleChange = (e) => {\r\n        setoverallPointRuleInfo({ ...overallPointRuleInfo, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { Id, PointRateSetupName, PurchaseAmount, Points, ExpiryDate, OfferRate, merchantid } = overallPointRuleInfo\r\n        let { OfferStartDate, OfferEndDate } = overallPointRuleInfo\r\n        localStorage.setItem('usePMStoken', true)\r\n        seteditPointRuleloading(true)\r\n        const merchantId = merchantid\r\n        if (!OfferRate) { \r\n            OfferStartDate = null \r\n            OfferEndDate = null\r\n         }\r\n        useJwt.updateOverallRule(merchantId, { rule_id:Id,  PointRateSetupName, PurchaseAmount, Points, ExpiryDate, OfferRate, OfferStartDate, OfferEndDate }).then(res => {\r\n            setReset(!resetData)\r\n            seteditPointRuleloading(false)\r\n            console.log(res)\r\n            toggleModal()\r\n            Success(res)\r\n        }).catch(err => {\r\n            seteditPointRuleloading(false)\r\n            localStorage.setItem('usePMStoken', false)\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Edit Point Rule</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row\" style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\r\n                <Col sm=\"6\" >\r\n                            <FormGroup>\r\n                                <Label for=\"PointRateSetupName\">Point Rate Setup Name</Label>\r\n                                <Input type=\"text\"\r\n                                    name=\"PointRateSetupName\"\r\n                                    id='PointRateSetupName'\r\n                                    value={overallPointRuleInfo.PointRateSetupName}\r\n                                    onChange={handleChange}\r\n                                    placeholder=\"write a name\"\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"6\" >\r\n                             <FormGroup>\r\n                                 <Label for=\"PurchaseAmount\">Purchase Amount</Label>\r\n                                 <Input type=\"number\"\r\n                                    name=\"PurchaseAmount\"\r\n                                    id='PurchaseAmount'\r\n                                    value={overallPointRuleInfo.PurchaseAmount}\r\n                                    onChange={handleChange}\r\n                                    \r\n                                    placeholder=\"0\"\r\n                                  />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"6\" >\r\n                             <FormGroup>\r\n                                 <Label for=\"Points\">Points</Label>\r\n                                 <Input type=\"number\"\r\n                                    name=\"Points\"\r\n                                    id='Points'\r\n                                    value={overallPointRuleInfo.Points}\r\n                                    onChange={handleChange}\r\n                                    \r\n                                    placeholder=\"0\"\r\n                                  />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"6\" >\r\n                             <FormGroup>\r\n                                 <Label for=\"ExpiryDate\">Expiry Date</Label>\r\n                                 <Input type=\"date\"\r\n                                    name=\"ExpiryDate\"\r\n                                    id='ExpiryDate'\r\n                                    value={new Date(overallPointRuleInfo.ExpiryDate).toLocaleDateString('fr-CA')}\r\n                                    onChange={handleChange}\r\n                                    \r\n                                    placeholder=\"0\"\r\n                                  />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col sm=\"12\" className='mb-1' >\r\n                            <FormGroup check>\r\n                                <Input onChange={(e) => {\r\n                                        if (e.target.checked) { \r\n                                            setoverallPointRuleInfo({ ...overallPointRuleInfo, OfferRate: true })\r\n                                        } else {\r\n                                            setoverallPointRuleInfo({ ...overallPointRuleInfo, OfferRate: false })\r\n                                        }\r\n                                    }\r\n                                } type='checkbox' id='viaEmail' checked={overallPointRuleInfo.OfferRate}/>\r\n                                <Label for='viaEmail' check>\r\n                                    Offer Rate\r\n                                </Label>\r\n                            </FormGroup>\r\n                        </Col>\r\n                        { overallPointRuleInfo.OfferRate ? <Col sm=\"6\" >\r\n                             <FormGroup>\r\n                                 <Label for=\"OfferStartDate\">Offer Start Date</Label>\r\n                                 <Input type=\"date\"\r\n                                    name=\"OfferStartDate\"\r\n                                    id='OfferStartDate'\r\n                                    value={new Date(overallPointRuleInfo.OfferStartDate).toLocaleDateString('fr-CA')}\r\n                                    onChange={handleChange}\r\n                                    \r\n                                    placeholder=\"0\"\r\n                                  />\r\n                            </FormGroup>\r\n                        </Col> : null }\r\n                        { overallPointRuleInfo.OfferRate ? <Col sm=\"6\" >\r\n                             <FormGroup>\r\n                                 <Label for=\"OfferEndDate\">Offer End Date</Label>\r\n                                 <Input type=\"date\"\r\n                                    name=\"OfferEndDate\"\r\n                                    id='OfferEndDate'\r\n                                    value={new Date(overallPointRuleInfo.OfferEndDate).toLocaleDateString('fr-CA')}\r\n                                    onChange={handleChange}\r\n                                    \r\n                                    placeholder=\"0\"\r\n                                  />\r\n                            </FormGroup>\r\n                        </Col> : null }\r\n\r\n                    <Col sm=\"12\" className='text-center'>\r\n                        {\r\n                            editPointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\r\n                                <Spinner color='white' size='sm' />\r\n                                <span className='ml-50'>Loading...</span>\r\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\r\n                                <span >Submit</span>\r\n                            </Button.Ripple>\r\n                        }\r\n                    </Col>\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../ClientSideDataTable'\r\nimport EditModal from './EditModal'\r\nimport {formatReadableDate} from '../../../../../helper'\r\n\r\nconst OverallPointRuleList = () => {\r\n    const AssignedMenus = JSON.parse(localStorage.getItem('AssignedMenus')) || []\r\n    const Array2D = AssignedMenus.map(x => x.submenu.map(y => y.id))\r\n    const subMenuIDs = [].concat(...Array2D)\r\n\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [overallPointRuleList, setoverallPointRuleList] = useState([])\r\n    const [overallPointRuleInfo, setoverallPointRuleInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('usePMStoken', true)\r\n        useJwt.getAllOverallRules().then(res => {\r\n            console.log(res)\r\n            setoverallPointRuleList(res.data.data)\r\n            localStorage.setItem('usePMStoken', false)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n            localStorage.setItem('usePMStoken', false)\r\n        })\r\n    }, [resetData])\r\n    const handlePoPupActions = (Id, merchantid, message) => {\r\n        localStorage.setItem('usePMStoken', true)\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                // return true\r\n                const merchantId = merchantid\r\n                return useJwt.deleteOverallRule(merchantId, {rule_id: Id}).then(res => {\r\n                    Success(res)\r\n                    console.log(res)\r\n                    setoverallPointRuleList(overallPointRuleList.filter(x => x.Id !== Id))\r\n                    localStorage.setItem('usePMStoken', false)\r\n                }).catch(err => {\r\n                    localStorage.setItem('usePMStoken', false)\r\n                    console.log(err.response)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'SL.',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            cell: (row, index) => index + 1  //RDT provides index by default\r\n        },\r\n        {\r\n            name: 'Merchant Name',\r\n            minWidth: '150px',\r\n            sortable: true,\r\n            selector: 'MerchantName'\r\n        },\r\n        {\r\n            name: 'Point Rate Setup Name',\r\n            minWidth: '150px',\r\n            sortable: true,\r\n            selector: 'PointRateSetupName'\r\n        },\r\n        {\r\n            name: 'Purchase Amount',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'PurchaseAmount'\r\n        },\r\n        {\r\n            name: 'Points',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'Points'\r\n        },\r\n        {\r\n            name: 'Expiry Date',\r\n            minWidth: '250px',\r\n            sortable: true,\r\n            selector: (item) => {\r\n                return item.ExpiryDate ? formatReadableDate(item.ExpiryDate) : null\r\n               }\r\n        },\r\n        {\r\n            name: 'Offer Rate',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: (item) => {\r\n                return item.OfferRate ? 'True' : 'False'\r\n              } \r\n        },\r\n        {\r\n            name: 'Offer Start Date',\r\n            minWidth: '250px',\r\n            sortable: true,\r\n            selector: (item) => {\r\n                return item.OfferStartDate ? formatReadableDate(item.OfferStartDate) : null\r\n               }\r\n        },\r\n        {\r\n            name: 'Offer End Date',\r\n            minWidth: '250px',\r\n            sortable: true,\r\n            selector: (item) => {\r\n                return item.OfferEndDate ? formatReadableDate(item.OfferEndDate) : null\r\n               }\r\n        },\r\n        {\r\n            name: 'Created At',\r\n            minWidth: '250px',\r\n            sortable: true,\r\n            selector: (item) => {\r\n                return item.CreatedAt ? formatReadableDate(item.CreatedAt) : null\r\n               }\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Edit\">\r\n                        <Edit size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                setoverallPointRuleInfo(row)\r\n                                setModal(true)\r\n                            }}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    <span title=\"Delete\">\r\n                        <Trash size={15}\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.Id, row.merchantid, 'Do you want to delete?')}\r\n                        />\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>Global Rules</CardTitle>\r\n                {subMenuIDs.includes(17) && <Button.Ripple className='ml-2' color='primary' tag={Link} to='/createOverallPointRuleForAdmin' >\r\n                   <div className='d-flex align-items-center'>\r\n                        <Plus size={17} style={{marginRight:'5px'}}/>\r\n                        <span >Create Global Rule</span>\r\n                   </div>\r\n                 </Button.Ripple>}\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={overallPointRuleList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n                <EditModal\r\n                    toggleModal={toggleModal}\r\n                    modal={modal}\r\n                    resetData={resetData}\r\n                    setReset={setReset}\r\n                    overallPointRuleInfo={overallPointRuleInfo}\r\n                    setoverallPointRuleInfo={setoverallPointRuleInfo}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default OverallPointRuleList","import { Fragment, useState } from 'react'\r\nimport { toast, Slide } from 'react-toastify'\r\n\r\n    export const Error = (err) => {\r\n        try {\r\n            const e = err.response\r\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500) {\r\n                toast.error(e.data.message, {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n            } else  {\r\n                toast.error('The server is under maintenance', {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined\r\n                    }) \r\n            }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        }\r\n \r\n    }\r\n\r\n    export const ErrorMessage = (err) => {\r\n        try {\r\n        const e = err.response\r\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\r\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n         }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        } \r\n    }\r\n    export const Success = (response) => {\r\n        const message = response.data.message || 'success'\r\n        toast.success(message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n    }\r\n\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n    const customStyles = {\r\n        cells: {\r\n            style: {\r\n                whiteSpace: 'break-spaces'\r\n            }\r\n        }\r\n    }\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 10 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                customStyles={customStyles}\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={10}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable","\r\n//Ex-> '1234567891' to '1234 567 891'\r\nexport const FormatePhoneNo = (phone) => {\r\n   const phonenoinstring = String(phone)\r\n  return phonenoinstring.replace(/^(.{4})(.*)(.{3})$/, '$1 $2 $3')\r\n}\r\n\r\nconst options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' }\r\n\r\nexport const formatReadableDate = (date) => { return (new Date(date)).toLocaleDateString(undefined, options) }\r\n\r\nexport const thousandSeparator = (x) => { return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") }"],"sourceRoot":""}