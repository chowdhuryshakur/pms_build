{"version":3,"sources":["views/CustomComponents/SuperAdminPages/DashboardUI/Barchart.js","views/CustomComponents/SuperAdminPages/DashboardUI/InvoiceModal.js","views/CustomComponents/SuperAdminPages/DashboardUI/InvoiceTable.js","assets/images/dashboardBadges/EAdmin.svg","views/CustomComponents/SuperAdminPages/Dashboard.js","views/helper.js","assets/images/illustration/badge.svg","assets/images/dashboardBadges/property.svg","assets/images/dashboardBadges/branch.svg","assets/images/dashboardBadges/contractor.svg","assets/images/dashboardBadges/landlord.svg","assets/images/dashboardBadges/tenant.svg"],"names":["Barchart","useState","name","data","revenueSeries","setrevenueSeries","chart","stacked","type","toolbar","show","grid","padding","top","bottom","yaxis","lines","xaxis","categories","labels","style","colors","baseRGBA","fontSize","axisTicks","axisBorder","legend","dataLabels","enabled","baseColor","plotOptions","bar","columnWidth","endingShape","distributed","min","max","tickAmount","revenueOptions","setrevenueOptions","useEffect","useJwt","GetAllInvoicesByRange","startDate","endDate","then","res","ModifiedDate","payload","map","x","date","Date","issue_date","getFullYear","getMonth","amount","total_amount","monthYrs","d","i","push","setMonth","uniquebyModifiedDate","Set","obj","emtyRevenueMonths","filter","e","some","additionalResponse","response","FinalFinalFinalRes","yearlyReport","filteredArray","ithMonthsAmount","reduce","a","b","finalObj","console","log","Math","error","catch","Card","className","Row","Col","md","xs","CardTitle","id","height","options","series","InvoiceModal","InvoiceDetails","InvModal","setInvModal","Modal","isOpen","toggle","ModalHeader","ModalBody","Badge","pill","color","statusType","status_name","Table","responsive","bordered","scope","invoice_id","formatReadableDate","CURRENCY_SYMBOL","pay_amount","invoice_info","clientinfo","phone","property","email","merchantinfo","address","iteminfo","number_of_renter","description","pay_for_date","unit_per","amountinfo","sub_total","tax","total","InvoiceTable","setInvoiceDetails","JSON","parse","localStorage","getItem","role","useHistory","tableDataLoading","setTDL","InvoicesData","setInvoicesData","PageCount","setPageCount","PageDataCount","getAllInvoicesData","page","limit","GetAllInvoices","column","maxWidth","selector","minWidth","row","title","size","cursor","onClick","handlePagination","CardHeader","tag","CardBody","sm","noHeader","highlightOnHover","columns","progressPending","sortIcon","progressComponent","Spinner","Button","Ripple","disabled","length","Object","keys","Dashboard","total_revenue","setTotal_revenue","active_estate_admin","active_estate_manager","block_estate_admin","block_estate_manager","contractor","land_lord","tenant","due_amount","received_amount","counter","setCounter","userCounter","err","Number","subtitle","icon","EAdmin","branchBadge","contractorBadge","tenantBadge","landlordBadge","href","preventDefault","src","medal","alt","item","index","body","year","month","day","time","getTime","minutes","floor","hours","finaldate","toLocaleDateString","undefined","finalTime"],"mappings":"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","file":"static/js/152.a7448511.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport {\r\n    Card,\r\n    CardTitle,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    UncontrolledButtonDropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    DropdownToggle\r\n} from 'reactstrap'\r\nimport Chart from 'react-apexcharts'\r\nimport { baseColor, baseRGBA } from '../../../Configuarables'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\n\r\nconst Barchart = () => {\r\n    const [revenueSeries, setrevenueSeries] = useState([\r\n        {\r\n            name: 'Earning',\r\n            data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n        }\r\n    ])\r\n    const [revenueOptions, setrevenueOptions] = useState({\r\n        chart: {\r\n            stacked: true,\r\n            type: 'bar',\r\n            toolbar: { show: false }\r\n        },\r\n        grid: {\r\n            padding: {\r\n                top: -20,\r\n                bottom: -10\r\n            },\r\n            yaxis: {\r\n                lines: { show: false }\r\n            }\r\n        },\r\n        xaxis: {\r\n            categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n            labels: {\r\n                style: {\r\n                    colors: baseRGBA,\r\n                    fontSize: '0.86rem'\r\n                }\r\n            },\r\n            axisTicks: {\r\n                show: false\r\n            },\r\n            axisBorder: {\r\n                show: false\r\n            }\r\n        },\r\n        legend: {\r\n            show: false\r\n        },\r\n        dataLabels: {\r\n            enabled: false\r\n        },\r\n        colors: [baseColor],\r\n        plotOptions: {\r\n            bar: {\r\n                columnWidth: '17%',\r\n                endingShape: 'rounded'\r\n            },\r\n            distributed: true\r\n        },\r\n        yaxis: {\r\n            min: 0,\r\n            max: 10000,\r\n            tickAmount: 4,\r\n            labels: {\r\n                style: {\r\n                    colors: baseRGBA,\r\n                    fontSize: '0.86rem'\r\n                }\r\n            }\r\n        }\r\n    })\r\n    const [data, setData] = useState('null')\r\n\r\n    useEffect(() => {\r\n        useJwt.GetAllInvoicesByRange({\r\n            startDate: \"02/02/2021\",\r\n            endDate: \"01/01/2022\"\r\n        }).then(res => {\r\n            try {\r\n                const ModifiedDate = res.data.payload.map(x => { return { date: `${new Date(x.issue_date).getFullYear()}/${new Date(x.issue_date).getMonth() + 1}`, amount: x.total_amount } })\r\n                const monthYrs = []\r\n                const d = new Date()\r\n                for (let i = 0; i < 12; i++) {\r\n                    monthYrs.push(`${d.getFullYear()}/${(d.getMonth() + 1)}`)\r\n                    d.setMonth(d.getMonth() - 1)\r\n                }\r\n                const uniquebyModifiedDate = [...new Set(ModifiedDate.map(obj => obj.date))]\r\n                const emtyRevenueMonths = monthYrs.filter(e => false === uniquebyModifiedDate.some(d => d === e))\r\n                const additionalResponse = emtyRevenueMonths.map(x => { return { date: x, amount: 0 } })\r\n                const response = res.data.payload.map(x => { return { date: x.issue_date, amount: x.total_amount } })\r\n                // console.log([...response, ...additionalResponse])\r\n                const FinalFinalFinalRes = [...response, ...additionalResponse]\r\n                const yearlyReport = []\r\n                for (let i = 0; i < 12; i++) {\r\n                    const filteredArray = FinalFinalFinalRes.filter(e => new Date(e.date).getMonth() === i)\r\n                    const ithMonthsAmount = filteredArray.map(x => x.amount).reduce((a, b) => a + b)\r\n                    const ithMonthsDate = `${new Date(filteredArray[0].date).getFullYear()}/${new Date(filteredArray[0].date).getMonth() + 1}`\r\n                    const finalObj = {\r\n                        date: ithMonthsDate,\r\n                        amount: ithMonthsAmount\r\n                    }\r\n                    yearlyReport.push(finalObj)\r\n                }\r\n                console.log(yearlyReport)\r\n                setrevenueSeries([\r\n                    {\r\n                        name: 'Earning',\r\n                        data: yearlyReport.map(x => x.amount)\r\n                    }\r\n                ])\r\n                setrevenueOptions({\r\n                    chart: {\r\n                        stacked: true,\r\n                        type: 'bar',\r\n                        toolbar: { show: false }\r\n                    },\r\n                    grid: {\r\n                        padding: {\r\n                            top: -20,\r\n                            bottom: -10\r\n                        },\r\n                        yaxis: {\r\n                            lines: { show: false }\r\n                        }\r\n                    },\r\n                    xaxis: {\r\n                        categories: yearlyReport.map(x => x.date),\r\n                        labels: {\r\n                            style: {\r\n                                colors: baseRGBA,\r\n                                fontSize: '0.86rem'\r\n                            }\r\n                        },\r\n                        axisTicks: {\r\n                            show: false\r\n                        },\r\n                        axisBorder: {\r\n                            show: false\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        show: false\r\n                    },\r\n                    dataLabels: {\r\n                        enabled: false\r\n                    },\r\n                    colors: [baseColor],\r\n                    plotOptions: {\r\n                        bar: {\r\n                            columnWidth: '17%',\r\n                            endingShape: 'rounded'\r\n                        },\r\n                        distributed: true\r\n                    },\r\n                    yaxis: {\r\n                        min: 0,\r\n                        max: Math.max(...yearlyReport.map(x => x.amount)),\r\n                        tickAmount: 4,\r\n                        labels: {\r\n                            style: {\r\n                                colors: baseRGBA,\r\n                                fontSize: '0.86rem'\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }).catch(error => {\r\n            console.log(\"GetAllInvoicesByRange\", error)\r\n        })\r\n    }, [])\r\n\r\n    return <Card className='card-revenue-budget'>\r\n        <Row className='mx-0'>\r\n            <Col className='revenue-report-wrapper' md='12' xs='12'>\r\n                <div className='d-sm-flex justify-content-between align-items-center mb-3'>\r\n                    <CardTitle className='mb-50 mb-sm-0'>Revenue Report</CardTitle>\r\n                </div>\r\n                <Chart id='revenue-report-chart' type='bar' height='230' options={revenueOptions} series={revenueSeries} />\r\n            </Col>\r\n        </Row>\r\n    </Card>\r\n}\r\n\r\nexport default Barchart","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, ChevronsRight\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, Table, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport { CURRENCY_SYMBOL } from '../../../Configuarables'\r\nimport { formatReadableDate } from '../../../helper'\r\n\r\nconst InvoiceModal = ({ InvoiceDetails, InvModal, setInvModal }) => {\r\n    useEffect(() => {\r\n        console.log('row', InvoiceDetails)\r\n    }, [])\r\n    return (\r\n        <Modal\r\n            isOpen={InvModal}\r\n            toggle={() => setInvModal(!InvModal)}\r\n            className={`modal-dialog-centered modal-xl`}\r\n        >\r\n            <ModalHeader toggle={() => setInvModal(!InvModal)}></ModalHeader>\r\n            <ModalBody>\r\n                <Card>\r\n                    <br />\r\n                    <h3 className=\"text-primary text-center\"> <b> Invoice Details</b></h3>\r\n                    <br />\r\n                    <div className=\"text-center\">\r\n                        <Badge pill color={'warning'} className='px-2 py-1'>\r\n                            Current Status : {InvoiceDetails.statusType.status_name}\r\n                        </Badge>\r\n                    </div>\r\n                    <br />\r\n                    <Table responsive bordered >\r\n                        <thead >\r\n                            <tr >\r\n                                <th className='bg-white'>Invoice ID</th>\r\n                                <th className='bg-white'>Issue Date</th>\r\n                                <th className='bg-white'>Total Amount</th>\r\n                                <th className='bg-white'>Paid Amount</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th scope=\"row\">{InvoiceDetails.invoice_id}</th>\r\n                                <td>{formatReadableDate(InvoiceDetails.issue_date)}</td>\r\n                                <td>{CURRENCY_SYMBOL} {InvoiceDetails.total_amount}</td>\r\n                                <td>{CURRENCY_SYMBOL} {InvoiceDetails.pay_amount}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </Table>\r\n                    <br />\r\n                    <br />\r\n                    <Row className='px-md-5 px-2'>\r\n                        <Col md='6' className='pl-2'>\r\n                            <p><b>Client Info</b></p>\r\n                            <p>Name :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{InvoiceDetails.invoice_info.clientinfo.name}</p>\r\n                            <p>Phone :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{InvoiceDetails.invoice_info.clientinfo.phone}</p>\r\n                            <p>Property :&nbsp;&nbsp;&nbsp;{InvoiceDetails.invoice_info.clientinfo.property}</p>\r\n                            <p>Email :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{InvoiceDetails.invoice_info.clientinfo.email}</p>\r\n                        </Col>\r\n                        <Col md='6' className='pl-2'>\r\n                            <p><b>Merchant Info</b></p>\r\n                            <p>Name :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{InvoiceDetails.invoice_info.merchantinfo.name}</p>\r\n                            <p>Phone :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{InvoiceDetails.invoice_info.merchantinfo.phone}</p>\r\n                            <p>Address :&nbsp;&nbsp;&nbsp;&nbsp;{InvoiceDetails.invoice_info.merchantinfo.address}</p>\r\n                            <p>Email :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{InvoiceDetails.invoice_info.merchantinfo.email}</p>\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <div className=\"text-center\">\r\n                        <Badge pill color={'primary'} className='px-3 py-1'>\r\n                            Payment Info\r\n                        </Badge>\r\n                    </div>\r\n                    <br />\r\n                    <Table responsive bordered >\r\n                        <thead >\r\n                            <tr >\r\n                                <th className='bg-white'>Tenants</th>\r\n                                <th className='bg-white'>Description</th>\r\n                                <th className='bg-white'>Payable for Month</th>\r\n                                <th className='bg-white'>Per Unit</th>\r\n                                {/* <th className='bg-white'>Quantity</th> */}\r\n                                <th className='bg-white'>Amount</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                InvoiceDetails.invoice_info.iteminfo.map(x => <tr>\r\n                                    <th scope=\"row\">{x.number_of_renter || \"0\"}</th>\r\n                                    <td>{x.description}</td>\r\n                                    <td>{x.pay_for_date}</td>\r\n                                    <td>{x.unit_per}</td>\r\n                                    {/* <td>{x.number_of_renter}</td> */}\r\n                                    <td>{x.amount}</td>\r\n                                </tr>)\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <div className='py-3 pr-2'>\r\n                            <p className='border-bottom p-1 m-0'><b>Sub-Total</b> :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CURRENCY_SYMBOL} {InvoiceDetails.invoice_info.amountinfo.sub_total}</p>\r\n                            <p className='border-bottom p-1 m-0'><b>Tax</b> :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CURRENCY_SYMBOL} {InvoiceDetails.invoice_info.amountinfo.tax} </p>\r\n                            <p className='bg-primary text-white p-1 m-0'><b>Total</b> :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{CURRENCY_SYMBOL} {InvoiceDetails.invoice_info.amountinfo.total}</p>\r\n                        </div>\r\n                    </div>\r\n                </Card>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default InvoiceModal","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, ChevronsRight\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\n\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { formatReadableDate } from '../../../helper'\r\nimport DataTable from 'react-data-table-component'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport { CURRENCY_SYMBOL } from '../../../Configuarables'\r\nimport { useHistory } from 'react-router-dom'\r\nimport InvoiceModal from './InvoiceModal'\r\n\r\nconst InvoiceTable = () => {\r\n    const [InvModal, setInvModal] = useState(false)\r\n    const [InvoiceDetails, setInvoiceDetails] = useState({})\r\n    const userRole = JSON.parse(localStorage.getItem('userData')).role\r\n    const history = useHistory()\r\n    const [tableDataLoading, setTDL] = useState(true)\r\n    const [InvoicesData, setInvoicesData] = useState([])\r\n    const [PageCount, setPageCount] = useState(1)\r\n    const [PageDataCount, setPageDataCount] = useState(5)\r\n    const [InvoicesStatus, setInvoicesStatus] = useState(null)\r\n\r\n    const getAllInvoicesData = (page, limit) => {\r\n        useJwt.GetAllInvoices({ page, limit }).then(res => {\r\n            console.log(\"getAllInvoicesData\", res.data.payload)\r\n            setInvoicesData(res.data.payload)\r\n            setTDL(false)\r\n        }).catch(error => {\r\n            console.log(\"getAllInvoicesData\", error)\r\n            setTDL(false)\r\n            // Error(error)\r\n        })\r\n    }\r\n\r\n    // const onchange = (e) => {\r\n    //     setUserInput({ ...userInput, [e.target.name]: e.target.value })\r\n    // }\r\n\r\n    useEffect(() => {\r\n        getAllInvoicesData(PageCount, PageDataCount)\r\n    }, [])\r\n\r\n    // Data table coulumn\r\n    const column = [\r\n        {\r\n            name: 'Invoice ID',\r\n            maxWidth: '120px',\r\n            // sortable: true,\r\n            selector: 'invoice_id'\r\n        },\r\n        {\r\n            name: 'Invoices Issue Date',\r\n            minWidth: '220px',\r\n            // sortable: true,\r\n            selector: row => formatReadableDate(row.issue_date)\r\n        },\r\n        {\r\n            name: 'Total Amount',\r\n            minWidth: '150px',\r\n            // sortable: true,\r\n            selector: row => `${CURRENCY_SYMBOL} ${row.total_amount}`\r\n        },\r\n        {\r\n            name: 'Paid Amount',\r\n            minWidth: '150px',\r\n            // sortable: true,\r\n            selector: row => `${CURRENCY_SYMBOL} ${row.pay_amount}`\r\n        },\r\n        {\r\n            name: 'Status',\r\n            minWidth: '150px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return row.statusType.id === 14 ? <Badge pill color={'warning'} className='px-1'>\r\n                    Due\r\n                </Badge> : <Badge pill color={'success'} className='px-1'>\r\n                    Paid\r\n                </Badge>\r\n            }\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '150px',\r\n            // sortable: true,\r\n            selector: row => <span title=\"View\">\r\n                <Eye size={18}\r\n                    color='seagreen'\r\n                    style={{ cursor: 'pointer' }}\r\n                    onClick={(e) => {\r\n                        setInvoiceDetails(row)\r\n                        setInvModal(true)\r\n                    }}\r\n                />\r\n            </span>\r\n        }\r\n    ]\r\n    const handlePagination = (type) => {\r\n        setTDL(true)\r\n        if (type === 'prev') {\r\n            setPageCount(PageCount - 1)\r\n            getAllInvoicesData(PageCount - 1, PageDataCount)\r\n        } else {\r\n            setPageCount(PageCount + 1)\r\n            getAllInvoicesData(PageCount + 1, PageDataCount)\r\n        }\r\n    }\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom titleSelect'>\r\n                <CardTitle tag='h4'>Invoices</CardTitle>\r\n                {/* <Form className='d-flex'>\r\n                    <Input required type='month' onChange={e => console.log(e.target.value)}></Input>&nbsp;\r\n                    <Input required type='month' onChange={e => console.log(e.target.value)}></Input>&nbsp;\r\n                    <Button.Ripple size='sm' color='primary' type='submit' className='pr-1' style={{ minWidth: '80px' }}>\r\n                        <span >Filter</span>\r\n                    </Button.Ripple>\r\n                </Form> */}\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <DataTable\r\n                            noHeader\r\n                            highlightOnHover\r\n                            data={InvoicesData}\r\n                            columns={column}\r\n                            className='react-dataTable'\r\n                            progressPending={tableDataLoading}\r\n                            sortIcon={<ChevronDown size={10} />}\r\n                            progressComponent={<Spinner color='primary' />}\r\n                            responsive={true}\r\n                        />\r\n                        <div className='text-right'>\r\n                            <Button.Ripple size='sm' disabled={PageCount === 1} className='mt-1' color='secondary' onClick={e => handlePagination('prev')}>\r\n                                <ChevronsLeft color='white' size={15} />\r\n                            </Button.Ripple>&nbsp;&nbsp;&nbsp;&nbsp;<Button.Ripple size='sm' disabled={!InvoicesData.length} className='mt-1' color='secondary' onClick={e => handlePagination('next')}>\r\n                                <ChevronsRight color='white' size={15} />\r\n                            </Button.Ripple>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </CardBody>\r\n            {Object.keys(InvoiceDetails).length ? <InvoiceModal InvoiceDetails={InvoiceDetails} InvModal={InvModal} setInvModal={setInvModal} /> : ''}\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InvoiceTable","export default __webpack_public_path__ + \"static/media/EAdmin.b5c93492.svg\";","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, User\r\n} from 'react-feather'\r\nimport Avatar from '@components/avatar'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport medal from '@src/assets/images/illustration/badge.svg'\r\nimport Media from 'reactstrap/lib/Media'\r\nimport CardText from 'reactstrap/lib/CardText'\r\nimport classnames from 'classnames'\r\nimport Barchart from './DashboardUI/Barchart'\r\nimport InvoiceTable from './DashboardUI/InvoiceTable'\r\nimport { CURRENCY_SYMBOL } from '../../Configuarables.js'\r\nimport PropertyBadge from '../../../assets/images/dashboardBadges/property.svg'\r\nimport branchBadge from '../../../assets/images/dashboardBadges/branch.svg'\r\nimport contractorBadge from '../../../assets/images/dashboardBadges/contractor.svg'\r\nimport landlordBadge from '../../../assets/images/dashboardBadges/landlord.svg'\r\nimport tenantBadge from '../../../assets/images/dashboardBadges/tenant.svg'\r\nimport EAdmin from '../../../assets/images/dashboardBadges/EAdmin.svg'\r\n\r\nconst Dashboard = () => {\r\n    const [InvoiceDetails, setInvoiceDetails] = useState({})\r\n    const [total_revenue, setTotal_revenue] = useState(0)\r\n    const [counter, setCounter] = useState({\r\n        active_estate_admin: 0,\r\n        active_estate_manager: 0,\r\n        block_estate_admin: 0,\r\n        block_estate_manager: 0,\r\n        contractor: 0,\r\n        land_lord: 0,\r\n        tenant: 0,\r\n        due_amount: 0,\r\n        received_amount: 0\r\n    })\r\n    useEffect(() => {\r\n        useJwt.userCounter().then(res => {\r\n            // console.log(\"userCounter\", res.data.payload)\r\n            const { active_estate_admin, active_estate_manager, block_estate_admin, block_estate_manager, contractor, land_lord, tenant, total_revenue, due_amount, received_amount } = res.data.payload\r\n            setTotal_revenue(total_revenue)\r\n            setCounter({ active_estate_admin, active_estate_manager, block_estate_admin, block_estate_manager, contractor, land_lord, tenant, due_amount, received_amount })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    const data = [\r\n        {\r\n            title: Number(counter.active_estate_admin) + Number(counter.block_estate_admin),\r\n            subtitle: 'Estate Admins',\r\n            color: 'light-primary',\r\n            icon: EAdmin\r\n        },\r\n        {\r\n            title: Number(counter.active_estate_manager) + Number(counter.block_estate_manager),\r\n            subtitle: 'Branch Managers',\r\n            color: 'light-warning',\r\n            icon: branchBadge\r\n        },\r\n        {\r\n            title: counter.contractor,\r\n            subtitle: 'Contractors',\r\n            color: 'light-info',\r\n            icon: contractorBadge\r\n        },\r\n        {\r\n            title: counter.tenant,\r\n            subtitle: 'Tenants',\r\n            color: 'light-danger',\r\n            icon: tenantBadge\r\n        },\r\n        {\r\n            title: counter.land_lord,\r\n            subtitle: 'Landlords',\r\n            color: 'light-success',\r\n            icon: landlordBadge\r\n        }\r\n    ]\r\n    return (\r\n        <>\r\n\r\n            <Row className='match-height'>\r\n                <Col md='4'>\r\n                    <Card className='card-congratulations-medal'>\r\n                        <CardBody>\r\n                            <h5>Total Revenue</h5>\r\n                            {/* <CardText className='font-small-3'>You have won gold medal</CardText> */}\r\n                            <h3 className='mb-75 mt-2 pt-50'>\r\n                                <a href='/' onClick={e => e.preventDefault()}>\r\n                                    {CURRENCY_SYMBOL} {total_revenue}\r\n                                </a>\r\n                            </h3>\r\n                            {/* <Button.Ripple color='primary'>View Sales</Button.Ripple> */}\r\n                            <img className='congratulation-medal' src={medal} alt='Medal Pic' height={80} />\r\n                            <Row className='mt-3'>\r\n                                <Col md='6'>\r\n                                    <p><b>Received</b></p>\r\n                                    <p className=\"text-success\">\r\n                                        <b>{CURRENCY_SYMBOL} {counter.received_amount}</b>\r\n                                    </p>\r\n                                </Col>\r\n                                <Col md='6'>\r\n                                    <p><b>Due Amount</b></p>\r\n                                    <p className=\"text-warning\">\r\n                                        <b> {CURRENCY_SYMBOL} {counter.due_amount}</b>\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col md='8'>\r\n                    <Card className='card-statistics'>\r\n                        <CardHeader>\r\n                            <CardTitle tag='h5'>Users</CardTitle>\r\n                            {/* <CardText className='card-text font-small-2 mr-25 mb-0'>Updated 1 month ago</CardText> */}\r\n                        </CardHeader>\r\n                        <CardBody className='px-1'>\r\n                            <div className='row'>{\r\n                                data.map((item, index) => {\r\n                                    return (\r\n                                        <Col sm='4'>\r\n                                            <Media>\r\n                                                {/* <Avatar color={item.color} icon={item.icon} className='mb-1 mr-1' /> */}\r\n                                                <img src={item.icon} className='img-fluid m-1' />\r\n                                                <Media className='my-auto' body>\r\n                                                    <h4 className='font-weight-bolder mb-0'>{item.title}</h4>\r\n                                                    <CardText className='font-small-2 mb-0'>{item.subtitle}</CardText>\r\n                                                </Media>\r\n                                            </Media>\r\n                                        </Col>\r\n                                    )\r\n                                })\r\n                            }</div>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <Barchart />\r\n            <InvoiceTable />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard","const options = { year: 'numeric', month: 'long', day: 'numeric'}\r\n\r\nexport const formatReadableDate = (date) => {\r\n    const time = new Date(date).getTime()\r\n    let minutes = Math.floor((time / (1000 * 60)) % 60)\r\n    let hours = Math.floor((time / (1000 * 60 * 60)) % 24)\r\n\r\n    hours = (hours < 10) ? `0${hours}` : hours\r\n    minutes = (minutes < 10) ? `0${minutes}` : minutes\r\n\r\n    //   console.log(msToTime(new Date(\"2021-08-27T15:05:49.870Z\").getTime()))\r\n    const finaldate = new Date(date).toLocaleDateString(undefined, options)\r\n    const finalTime = `${hours} : ${minutes}`\r\n    return `${finaldate} , ${finalTime}`\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/badge.7bf0a10d.svg\";","export default __webpack_public_path__ + \"static/media/property.81dcfe56.svg\";","export default __webpack_public_path__ + \"static/media/branch.26ca2046.svg\";","export default __webpack_public_path__ + \"static/media/contractor.83b2b8d9.svg\";","export default __webpack_public_path__ + \"static/media/landlord.4485578a.svg\";","export default __webpack_public_path__ + \"static/media/tenant.f5b65356.svg\";"],"sourceRoot":""}