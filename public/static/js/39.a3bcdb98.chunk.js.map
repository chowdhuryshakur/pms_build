{"version":3,"sources":["views/CustomComponents/EstateAdminPages/ContractorPages/CreateContractor.js","views/CustomComponents/ImgUpload.js"],"names":["withReactContent","Swal","CreateContractor","useHistory","branch_idRef","useRef","contractorTypeRef","addressRef","userRole","JSON","parse","localStorage","getItem","role","useState","imgUpLoading","setimgUpLoading","fileUrls","setFileUrls","previewVisible","previewImage","previewTitle","fileList","state","setState","isLoading","setLoading","postcode","setPostCode","searching","setSearching","ukaddress","setukaddress","sub_estate_manager_id","contractor_type_id","mobile","email","full_name","address","userInput","setUserInput","BranchList","setBranchList","contractorTypeList","setcontractorTypeList","useEffect","useJwt","then","res","data","payload","catch","err","Error","console","log","ContractorTypeList","error","seterror","handleChange","e","chkEmail","test","target","value","name","className","tag","style","width","onSubmit","preventDefault","toast","length","photo","url","submitData","estate_manager_info","user_id","createContractor","Success","autoComplete","md","for","required","type","id","placeholder","onChange","addonType","PHONE_PREFIX","autoFocus","minLength","maxLength","color","fontSize","ref","theme","selectThemeColors","classNamePrefix","maxMenuHeight","selected","options","map","x","label","branch_name","isClearable","opacity","height","onFocus","current","select","focus","type_name","outline","onClick","ukAddressEndpoint","postCode","addresses","element","building_number","thoroughfare","locality","town_or_city","size","Ripple","disabled","ImgUpload","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","handlePreview","a","preview","originFileObj","substring","lastIndexOf","uploadButton","props","beforeUpload","isLt2M","isJpgOrPng","formData","FormData","append","singleFileupload","fileurl","uid","status","action","IMG_BASE_URL","listType","onPreview","filter","some","b","includes","visible","title","footer","onCancel","alt","src"],"mappings":"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","file":"static/js/39.a3bcdb98.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport ImgUpload from '../../ImgUpload'\r\nconst MySwal = withReactContent(Swal)\r\n\r\nconst CreateContractor = () => {\r\n    const history = useHistory()\r\n    const branch_idRef = useRef()\r\n    const contractorTypeRef = useRef()\r\n    const addressRef = useRef()\r\n    const userRole = JSON.parse(localStorage.getItem('userData')).role\r\n    const [imgUpLoading, setimgUpLoading] = useState(false)\r\n    const [fileUrls, setFileUrls] = useState([])\r\n    const [state, setState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [postcode, setPostCode] = useState('')\r\n    const [searching, setSearching] = useState(false)\r\n    const [ukaddress, setukaddress] = useState([])\r\n    const [userInput, setUserInput] = useState({\r\n        sub_estate_manager_id: '',\r\n        contractor_type_id: '',\r\n        mobile: \"\",\r\n        email: \"\",\r\n        full_name: \"\",\r\n        address: \"\"\r\n    })\r\n    const [BranchList, setBranchList] = useState([])\r\n    const [contractorTypeList, setcontractorTypeList] = useState([])\r\n    useEffect(() => {\r\n        useJwt.BranchList().then(res => {\r\n            // console.log(res.data.payload)\r\n            setBranchList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n        useJwt.ContractorTypeList().then(res => {\r\n            console.log(res.data.payload)\r\n            setcontractorTypeList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    const handlePostCodeSearch = e => {\r\n        e.preventDefault()\r\n        setSearching(true)\r\n        useJwt.ukAddressEndpoint({ postCode: postcode }).then(res => {\r\n            console.log(res.data.payload)\r\n            // const { latitude, longitude } = res.data.payload\r\n            // setUserInput({ ...userInput, latitude, longitude })\r\n            setukaddress(res.data.payload.addresses.map(element => `${element.building_number}, ${element.thoroughfare}, ${element.locality}, ${element.town_or_city}`))\r\n            setSearching(false)\r\n        }).catch(err => {\r\n            setukaddress([])\r\n            setSearching(false)\r\n            Error(err)\r\n        })\r\n    }\r\n    const [error, seterror] = useState({\r\n        email: false,\r\n        mobile: false\r\n    })\r\n    const handleChange = e => {\r\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(e.target.value)\r\n        // Email Validator\r\n        if (e.target.name === 'email' && chkEmail) {\r\n            seterror({ ...error, email: false })\r\n        }\r\n        if (e.target.name === 'email' && !chkEmail) {\r\n            seterror({ ...error, email: true })\r\n        }\r\n        //mobile number validator\r\n        if (e.target.name === \"mobile\") {\r\n            // console.log(e.target.value)\r\n            if (e.target.value[0] === '0') {\r\n                seterror({ ...error, mobile: true })\r\n                return 0\r\n            } else {\r\n                seterror({ ...error, mobile: false })\r\n            }\r\n            if (!/^[0-9]*$/.test(e.target.value)) {\r\n                return 0\r\n            }\r\n        }\r\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n\r\n        if (imgUpLoading) {\r\n            toast.error('please wait, image is uploading to the server')\r\n            return 0\r\n        }\r\n        if (!fileUrls.length) {\r\n            toast.error('please upload Contractor image')\r\n            return 0\r\n        }\r\n        const { sub_estate_manager_id, mobile, email, full_name, address, contractor_type_id } = userInput\r\n\r\n        const chkEmail = /\\S+@\\S+\\.\\S+/.test(email)\r\n        if (!chkEmail) {\r\n            return 0\r\n        }\r\n        const photo = fileUrls.length ? fileUrls[0].url : null\r\n        const estate_manager_id = !sub_estate_manager_id ? BranchList[0].estate_manager_info.user_id : sub_estate_manager_id\r\n        const submitData = {\r\n            sub_estate_manager_id: estate_manager_id,\r\n            contractor_type_id,\r\n            mobile,\r\n            email,\r\n            full_name,\r\n            address,\r\n            photo\r\n        }\r\n        console.log(submitData)\r\n        setLoading(true)\r\n        useJwt.createContractor(submitData).then(res => {\r\n            console.log(res)\r\n            Success(res)\r\n            // history.push(`/${userRole}/MyProperty`)\r\n            setLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Card>\r\n                <CardHeader className='border-bottom'>\r\n                    <CardTitle tag='h4'>Create Contractor</CardTitle>\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <Form className=\"row pt-1\" style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <Col md='3' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label for=\"full_name\">Fullname</Label>\r\n                                <Input\r\n                                    required\r\n                                    type=\"text\"\r\n                                    id='full_name'\r\n                                    name=\"full_name\"\r\n                                    placeholder=\"Contractor name\"\r\n                                    value={userInput.full_name}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md='3' >\r\n                            <FormGroup>\r\n                                <Label className='form-label' for='mobile'>\r\n                                    Mobile Number\r\n                                </Label>\r\n                                <InputGroup className='input-group-merge w-100 mb-1'>\r\n                                    <InputGroupAddon addonType='prepend'>\r\n                                        <InputGroupText>\r\n                                            {PHONE_PREFIX}\r\n                                        </InputGroupText>\r\n                                    </InputGroupAddon>\r\n                                    <Input\r\n                                        autoFocus\r\n                                        required\r\n                                        type='text'\r\n                                        minLength={10}\r\n                                        maxLength={10}\r\n                                        id='mobile'\r\n                                        name='mobile'\r\n                                        value={userInput.mobile}\r\n                                        onChange={handleChange}\r\n                                        placeholder='123-456-7899'\r\n                                    />\r\n                                </InputGroup>\r\n                                {error.mobile && <span style={{ color: 'red', fontSize: '11px' }}>First digit 0 not allow</span>}\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md='3' >\r\n                            <FormGroup>\r\n                                <Label for=\"email\">Email</Label>\r\n                                <Input\r\n                                    required\r\n                                    type=\"email\"\r\n                                    id='email'\r\n                                    name=\"email\"\r\n                                    placeholder=\"example@gmail.com\"\r\n                                    value={userInput.email}\r\n                                    onChange={handleChange}\r\n                                />\r\n                                {error.email && userInput.email && <span style={{ color: 'red', fontSize: '11px' }}>Please Enter a valid Email</span>}\r\n                            </FormGroup>\r\n                        </Col>\r\n                        {userRole !== 'EstateManager' && <Col md='3' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Branch</Label>\r\n                                <><Select\r\n                                    ref={branch_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='sub_estate_manager_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, sub_estate_manager_id: selected.value })\r\n                                    }}\r\n                                    options={BranchList.map(x => { return { value: x.estate_manager_info.user_id, label: x.branch_name } })}\r\n                                    // value={{ value: userInput.sub_estate_manager_id, label: userInput.sub_estate_manager_id }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => branch_idRef.current.select.focus()}\r\n                                        value={userInput.sub_estate_manager_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>}\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Contractor Type</Label>\r\n                                <><Select\r\n                                    ref={contractorTypeRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='contractor_type_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, contractor_type_id: selected.value })\r\n                                    }}\r\n                                    options={contractorTypeList.map(x => { return { value: x.id, label: x.type_name } })}\r\n                                    // value={{ value: userInput.contractor_type_id, label: userInput.type_name }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => contractorTypeRef.current.select.focus()}\r\n                                        value={userInput.contractor_type_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col md='4' >\r\n                            <Label for=\"postcode\">Search Address by Post Code</Label>\r\n                            <InputGroup>\r\n                                <Input\r\n                                    // required\r\n                                    type=\"text\"\r\n                                    id='postcode'\r\n                                    name=\"postcode\"\r\n                                    placeholder=\"enter a valid postcode\"\r\n                                    value={postcode}\r\n                                    onChange={e => setPostCode(e.target.value)}\r\n                                />\r\n                                <InputGroupAddon addonType='append'>\r\n                                    <Button color='primary' outline type='button' onClick={handlePostCodeSearch}>\r\n                                        {searching ? <Spinner size='sm' /> : 'Search'}\r\n                                    </Button>\r\n                                </InputGroupAddon>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col md='4' >\r\n                            <Label>Address</Label>\r\n                            <><Select\r\n                                ref={addressRef}\r\n                                theme={selectThemeColors}\r\n                                className='react-select'\r\n                                classNamePrefix='select'\r\n                                name='address'\r\n                                onChange={selected => {\r\n                                    setUserInput({ ...userInput, address: selected.value })\r\n                                }}\r\n                                options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                                value={{ value: userInput.address, label: userInput.address }}\r\n                                // isDisabled={!ukaddress.length}\r\n                                isClearable={false}\r\n                            /><Input\r\n                                    required\r\n                                    style={{\r\n                                        opacity: 0,\r\n                                        width: \"100%\",\r\n                                        height: 0\r\n                                        // position: \"absolute\"\r\n                                    }}\r\n                                    onFocus={e => addressRef.current.select.focus()}\r\n                                    value={userInput.address || ''}\r\n                                    onChange={e => ''}\r\n                                /></>\r\n                        </Col>\r\n\r\n                        <Col md='12' className='my-0'>\r\n                            <Label>Contractor Image</Label>\r\n                            <ImgUpload\r\n                                setimgUpLoading={setimgUpLoading}\r\n                                state={state}\r\n                                setState={setState}\r\n                                fileUrls={fileUrls}\r\n                                setFileUrls={setFileUrls} />\r\n                        </Col>\r\n                        <Col md=\"12 text-center\">\r\n                            <Button.Ripple className='mt-2' color='primary' type=\"submit\" disabled={isLoading}>\r\n                                {isLoading ? <Spinner size='sm' /> : 'Submit'}\r\n                            </Button.Ripple>\r\n                        </Col>\r\n                    </Form>\r\n                </CardBody>\r\n            </Card>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CreateContractor","import React, { useState } from 'react'\r\nimport { Upload, Modal } from 'antd'\r\n// import { PlusOutlined } from '@ant-design/icons'\r\nimport 'antd/dist/antd.css'\r\nimport { Slide, toast } from 'react-toastify'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Camera } from 'react-feather'\r\nimport { Error } from '../viewhelper'\r\nimport { IMG_BASE_URL } from '../Configuarables'\r\n\r\nconst ImgUpload = ({ fileUrls, setFileUrls, state, setState, setimgUpLoading }) => {\r\n    // const [fileUrls, setFileUrls] = useState([])\r\n    function getBase64(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader()\r\n            reader.readAsDataURL(file)\r\n            reader.onload = () => resolve(reader.result)\r\n            reader.onerror = error => reject(error)\r\n        })\r\n    }\r\n    // const [state, setState] = useState({\r\n    //     previewVisible: false,\r\n    //     previewImage: '',\r\n    //     previewTitle: '',\r\n    //     fileList: []\r\n    // })\r\n    const { previewVisible, previewImage, fileList, previewTitle } = state\r\n    const handleCancel = () => setState({ ...state, previewVisible: false })\r\n\r\n    const handlePreview = async file => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj)\r\n        }\r\n        setState({\r\n            ...state,\r\n            previewImage: file.url || file.preview,\r\n            previewVisible: true,\r\n            previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\r\n        })\r\n    }\r\n    const handleChange = ({ fileList, file }) => {\r\n        // console.log(fileList, fileUrls)\r\n        if (file.size / 1024 / 1024 > 2) {\r\n            return 0\r\n        }\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\r\n        if (!isJpgOrPng) {\r\n            return 0\r\n        }\r\n        setFileUrls(fileUrls.filter(a => fileList.some(b => a.uid === b.uid)))\r\n        setState({ ...state, fileList: fileList.filter(x => x.type.includes('image')) })\r\n    }\r\n    const uploadButton = (\r\n        <div className='text-center p-1' style={{ height: '102px', width: '102px' }}>\r\n            <span ><Camera size={20} className='my-1' /></span> <br />\r\n            <span>Add Image</span>\r\n        </div>\r\n        // <div>\r\n        //     <PlusOutlined />\r\n        //     <div style={{ marginTop: 8 }}>Upload</div>\r\n        // </div>\r\n    )\r\n    const props = {\r\n        beforeUpload: file => {\r\n            const isLt2M = file.size / 1024 / 1024 < 2\r\n            const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\r\n            if (!isJpgOrPng) {\r\n                toast.error(`${file.name} is not a Image file`)\r\n            } else if (!isLt2M) {\r\n                toast.error('Image must smaller than 2MB!')\r\n            } else {\r\n                const formData = new FormData()\r\n                formData.append('complain_image', file)\r\n                setimgUpLoading(true)\r\n                useJwt.singleFileupload(formData).then(res => {\r\n                    console.log(res.data.payload.fileurl)\r\n                    setimgUpLoading(false)\r\n                    setFileUrls([\r\n                        ...fileUrls,\r\n                        {\r\n                            uid: file.uid,\r\n                            name: 'image.png',\r\n                            status: 'done',\r\n                            type: \"image/jpeg\",\r\n                            url: res.data.payload.fileurl\r\n                        }\r\n                    ])\r\n                }).catch(err => {\r\n                    setimgUpLoading(false)\r\n                    console.log(err)\r\n                    Error(err)\r\n                })\r\n                return isJpgOrPng && isLt2M\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Upload\r\n                {...props}\r\n                action={`${IMG_BASE_URL}/api/fackupload`}\r\n                listType=\"picture-card\"\r\n                fileList={fileList}\r\n                onPreview={handlePreview}\r\n                onChange={handleChange}\r\n            >\r\n                {fileList.length >= 1 ? null : uploadButton}\r\n            </Upload>\r\n            <Modal\r\n                visible={previewVisible}\r\n                title={previewTitle}\r\n                footer={null}\r\n                onCancel={handleCancel}\r\n            >\r\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImgUpload"],"sourceRoot":""}