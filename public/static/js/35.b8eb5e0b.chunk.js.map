{"version":3,"sources":["views/CustomComponents/EstateAdminPages/Propertypages/EditProperties.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/Row.js","views/CustomComponents/EstateAdminPages/Propertypages/ProperetyImgUpload.js"],"names":["withReactContent","Swal","EditProperties","history","useHistory","bath_roomRef","useRef","bed_roomRef","branch_idRef","land_lord_idRef","property_typeRef","addressRef","userRole","JSON","parse","localStorage","getItem","role","EditPropertyInfo","useState","imgUpLoading","setimgUpLoading","property_image","uid","name","status","type","url","fileUrls","setFileUrls","previewVisible","previewImage","previewTitle","fileList","state","setState","gas_certificate","gasfileUrls","setgasFileUrls","gasstate","setgasState","power_certificate","powerfileUrls","setpowerFileUrls","powerstate","setpowerState","property_insurence_certificate","insurencefileUrls","setinsurenceFileUrls","insurencestate","setinsurenceState","branchValue","setBranchvalue","landlordValue","setlandlordvalue","isLoading","setLoading","postcode","setPostCode","searching","setSearching","ukaddress","setukaddress","property_rent","land_lord_id","branch_id","house_details","latitude","longitude","property_type","bed_room","bath_room","is_gas_certificate","gas_certificate_expire_date","Date","toLocaleDateString","is_power_certificate","power_certificate_expire_date","is_property_insurence_certificate","property_insurence_certificate_expire_date","userInput","setUserInput","BranchList","setBranchList","landlordList","setlandlordList","useEffect","useJwt","then","res","data","payload","find","b","id","branch_name","catch","err","Error","console","log","user_id","full_name","handleChange","e","target","value","Ripple","className","color","onClick","push","size","style","width","onSubmit","preventDefault","toast","error","length","submitData","Number","editProperty","Success","autoComplete","tag","md","ref","theme","selectThemeColors","classNamePrefix","maxMenuHeight","onChange","selected","label","options","map","x","isDisabled","isClearable","required","opacity","height","onFocus","current","select","focus","for","placeholder","min","addonType","outline","ukAddressEndpoint","postCode","addresses","element","building_number","thoroughfare","locality","town_or_city","checked","disabled","propTypes","tagPropType","inverse","PropTypes","bool","string","body","cssModule","object","innerRef","oneOfType","func","Card","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","rowColsPropType","number","noGutters","form","xs","sm","lg","xl","widths","Row","colClasses","forEach","colWidth","i","colSize","isXs","ImgUpload","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","handlePreview","a","preview","originFileObj","substring","lastIndexOf","uploadButton","beforeUpload","isLt2M","isJpgOrPng","formData","FormData","append","singleFileupload","fileurl","action","IMG_BASE_URL","listType","onPreview","filter","some","includes","visible","title","footer","onCancel","alt","src"],"mappings":"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","file":"static/js/35.b8eb5e0b.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport ImgUpload from './ProperetyImgUpload'\r\nconst MySwal = withReactContent(Swal)\r\n\r\nconst EditProperties = () => {\r\n    const history = useHistory()\r\n    const bath_roomRef = useRef()\r\n    const bed_roomRef = useRef()\r\n    const branch_idRef = useRef()\r\n    const land_lord_idRef = useRef()\r\n    const property_typeRef = useRef()\r\n    const addressRef = useRef()\r\n    const userRole = JSON.parse(localStorage.getItem('userData')).role\r\n    const EditPropertyInfo = JSON.parse(localStorage.getItem('EditPropertyInfo'))\r\n    const [imgUpLoading, setimgUpLoading] = useState(false)\r\n    const [fileUrls, setFileUrls] = useState(EditPropertyInfo.property_image ? [\r\n        {\r\n            uid: 1,\r\n            name: 'image.png',\r\n            status: 'done',\r\n            type: \"image/jpeg\",\r\n            url: EditPropertyInfo.property_image\r\n        }\r\n    ] : [])\r\n    const [state, setState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: EditPropertyInfo.property_image ? [\r\n            {\r\n                uid: 1,\r\n                name: 'image.png',\r\n                status: 'done',\r\n                type: \"image/jpeg\",\r\n                url: EditPropertyInfo.property_image\r\n            }\r\n        ] : []\r\n    })\r\n    const [gasfileUrls, setgasFileUrls] = useState(EditPropertyInfo.gas_certificate ? [\r\n        {\r\n            uid: 11,\r\n            name: 'image.png',\r\n            status: 'done',\r\n            type: \"image/jpeg\",\r\n            url: EditPropertyInfo.gas_certificate\r\n        }\r\n    ] : [])\r\n    const [gasstate, setgasState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: EditPropertyInfo.gas_certificate ? [\r\n            {\r\n                uid: 11,\r\n                name: 'image.png',\r\n                status: 'done',\r\n                type: \"image/jpeg\",\r\n                url: EditPropertyInfo.gas_certificate\r\n            }\r\n        ] : []\r\n    })\r\n    // ********\r\n    const [powerfileUrls, setpowerFileUrls] = useState(EditPropertyInfo.power_certificate ? [\r\n        {\r\n            uid: 111,\r\n            name: 'image.png',\r\n            status: 'done',\r\n            type: \"image/jpeg\",\r\n            url: EditPropertyInfo.power_certificate\r\n        }\r\n    ] : [])\r\n    const [powerstate, setpowerState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: EditPropertyInfo.power_certificate ? [\r\n            {\r\n                uid: 111,\r\n                name: 'image.png',\r\n                status: 'done',\r\n                type: \"image/jpeg\",\r\n                url: EditPropertyInfo.power_certificate\r\n            }\r\n        ] : []\r\n    })\r\n    // ***********\r\n    const [insurencefileUrls, setinsurenceFileUrls] = useState(EditPropertyInfo.property_insurence_certificate ? [\r\n        {\r\n            uid: 1111,\r\n            name: 'image.png',\r\n            status: 'done',\r\n            type: \"image/jpeg\",\r\n            url: EditPropertyInfo.property_insurence_certificate\r\n        }\r\n    ] : [])\r\n    const [insurencestate, setinsurenceState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: EditPropertyInfo.property_insurence_certificate ? [\r\n            {\r\n                uid: 1111,\r\n                name: 'image.png',\r\n                status: 'done',\r\n                type: \"image/jpeg\",\r\n                url: EditPropertyInfo.property_insurence_certificate\r\n            }\r\n        ] : []\r\n    })\r\n    const [branchValue, setBranchvalue] = useState('Select...')\r\n    const [landlordValue, setlandlordvalue] = useState('Select...')\r\n\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [postcode, setPostCode] = useState('')\r\n    const [searching, setSearching] = useState(false)\r\n    const [ukaddress, setukaddress] = useState([])\r\n    const [userInput, setUserInput] = useState({\r\n        property_rent: EditPropertyInfo.property_rent,\r\n        land_lord_id: EditPropertyInfo.land_lord_id,\r\n        branch_id: EditPropertyInfo.branch_id,\r\n        house_details: EditPropertyInfo.house_details,\r\n        latitude: EditPropertyInfo.latitude,\r\n        longitude: EditPropertyInfo.longitude,\r\n        property_type: EditPropertyInfo.property_type,\r\n        bed_room: EditPropertyInfo.bed_room,\r\n        bath_room: EditPropertyInfo.bath_room,\r\n        is_gas_certificate: EditPropertyInfo.is_gas_certificate,\r\n        gas_certificate_expire_date: new Date(EditPropertyInfo.gas_certificate_expire_date).toLocaleDateString('fr-CA'),\r\n        gas_certificate: '',\r\n        property_image: '',\r\n        is_power_certificate: EditPropertyInfo.is_power_certificate,\r\n        power_certificate_expire_date: new Date(EditPropertyInfo.power_certificate_expire_date).toLocaleDateString('fr-CA'),\r\n        is_property_insurence_certificate: EditPropertyInfo.is_property_insurence_certificate,\r\n        property_insurence_certificate_expire_date: new Date(EditPropertyInfo.property_insurence_certificate_expire_date).toLocaleDateString('fr-CA')\r\n    })\r\n    const propertyTypes = ['Flat', 'Semi-detach', 'Detach', 'Terraced', 'Bungalow', 'Park home']\r\n    const bedroomTypes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    const bathroomTypes = [1, 2, 3, 4, 5]\r\n    const [BranchList, setBranchList] = useState([])\r\n    const [landlordList, setlandlordList] = useState([])\r\n    useEffect(() => {\r\n        useJwt.BranchList().then(res => {\r\n            setBranchvalue(res.data.payload.find(b => b.id === EditPropertyInfo.branch_id).branch_name)\r\n            setBranchList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n        useJwt.landlordList().then(res => {\r\n            setlandlordvalue(res.data.payload.find(b => b.user_id === EditPropertyInfo.land_lord_id).full_name)\r\n            setlandlordList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    const handlePostCodeSearch = e => {\r\n        e.preventDefault()\r\n        setSearching(true)\r\n        useJwt.ukAddressEndpoint({ postCode: postcode }).then(res => {\r\n            console.log(res.data.payload)\r\n            const { latitude, longitude } = res.data.payload\r\n            setUserInput({ ...userInput, latitude, longitude })\r\n            setukaddress(res.data.payload.addresses.map(element => `${element.building_number}, ${element.thoroughfare}, ${element.locality}, ${element.town_or_city}`))\r\n            setSearching(false)\r\n        }).catch(err => {\r\n            setukaddress([])\r\n            setSearching(false)\r\n            Error(err)\r\n        })\r\n    }\r\n    const handleChange = e => {\r\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (imgUpLoading) {\r\n            toast.error('please wait, image is uploading to the server')\r\n            return 0\r\n        }\r\n        if (!fileUrls.length) {\r\n            toast.error('please upload property image')\r\n            return 0\r\n        }\r\n        if (userInput.is_gas_certificate && !gasfileUrls.length) {\r\n            toast.error('please upload your gas certificate')\r\n            return 0\r\n        }\r\n        if (userInput.is_power_certificate && !powerfileUrls.length) {\r\n            toast.error('please upload your power certificate')\r\n            return 0\r\n        }\r\n        if (userInput.is_property_insurence_certificate && !insurencefileUrls.length) {\r\n            toast.error('please upload your insurance certificate')\r\n            return 0\r\n        }\r\n        const { property_rent, land_lord_id, branch_id, house_details, latitude, longitude, property_type, bed_room, bath_room, is_gas_certificate, gas_certificate_expire_date, is_power_certificate, power_certificate_expire_date, is_property_insurence_certificate, property_insurence_certificate_expire_date } = userInput\r\n        const property_image = fileUrls.length ? fileUrls[0].url : null\r\n        const gas_certificate = is_gas_certificate ? gasfileUrls[0].url : null\r\n        const power_certificate = is_power_certificate ? powerfileUrls[0].url : null\r\n        const property_insurence_certificate = is_property_insurence_certificate ? insurencefileUrls[0].url : null\r\n\r\n        const submitData = {\r\n            id: EditPropertyInfo.id,\r\n            property_rent: Number(property_rent),\r\n            land_lord_id,\r\n            branch_id,\r\n            house_details,\r\n            // latitude,\r\n            // longitude,\r\n            property_type,\r\n            bed_room,\r\n            bath_room,\r\n            property_image,\r\n            gas_certificate,\r\n            power_certificate,\r\n            property_insurence_certificate,\r\n            is_gas_certificate,\r\n            gas_certificate_expire_date,\r\n            is_power_certificate,\r\n            power_certificate_expire_date,\r\n            is_property_insurence_certificate,\r\n            property_insurence_certificate_expire_date\r\n        }\r\n        console.log(submitData)\r\n        setLoading(true)\r\n        useJwt.editProperty(submitData).then(res => {\r\n            console.log(res)\r\n            Success(res)\r\n            history.push(`/${userRole}/MyProperty`)\r\n            setLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Button.Ripple className='m-1' color='primary' onClick={e => history.push(`/${userRole}/MyProperty`)}>\r\n                <ChevronLeft size={12} /> Back\r\n            </Button.Ripple>\r\n            <Form style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <Card>\r\n                    <CardHeader className='border-bottom'>\r\n                        <CardTitle tag='h4'>Update Property</CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody className=\"row pt-1\">\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Branch</Label>\r\n                                <><Select\r\n                                    ref={branch_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='branch_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setBranchvalue(selected.label)\r\n                                        setUserInput({ ...userInput, branch_id: selected.value })\r\n                                    }}\r\n                                    options={BranchList.map(x => { return { value: x.id, label: x.branch_name } })}\r\n                                    value={{ value: userInput.branch_id, label: branchValue }}\r\n                                    isDisabled={userRole === 'EstateManager'}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => branch_idRef.current.select.focus()}\r\n                                        value={userInput.branch_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Landlord</Label>\r\n                                <><Select\r\n                                    ref={land_lord_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='land_lord_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setlandlordvalue(selected.label)\r\n                                        setUserInput({ ...userInput, land_lord_id: selected.value })\r\n                                    }}\r\n                                    options={landlordList.map(x => { return { value: x.user_id, label: x.full_name } })}\r\n                                    value={{ value: userInput.land_lord_id, label: landlordValue }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => land_lord_idRef.current.select.focus()}\r\n                                        value={userInput.land_lord_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select Property Type</Label>\r\n                                <><Select\r\n                                    ref={property_typeRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='property_type'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, property_type: selected.value })\r\n                                    }}\r\n                                    options={propertyTypes.map(x => { return { value: x, label: x } })}\r\n                                    value={{ value: userInput.property_type, label: userInput.property_type }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => property_typeRef.current.select.focus()}\r\n                                        value={userInput.property_type || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select How Many Bedroom</Label>\r\n                                <><Select\r\n                                    ref={bed_roomRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='bed_room'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, bed_room: selected.value })\r\n                                    }}\r\n                                    options={bedroomTypes.map(x => { return { value: x, label: x } })}\r\n                                    value={{ value: userInput.bed_room, label: userInput.bed_room }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => bed_roomRef.current.select.focus()}\r\n                                        value={userInput.bed_room || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select How Many Bathroom</Label>\r\n                                <><Select\r\n                                    ref={bath_roomRef}\r\n                                    maxMenuHeight={150}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='bath_room'\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, bath_room: selected.value })\r\n                                    }}\r\n                                    options={bathroomTypes.map(x => { return { value: x, label: x } })}\r\n                                    value={{ value: userInput.bath_room, label: userInput.bath_room }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => bath_roomRef.current.select.focus()}\r\n                                        value={userInput.bath_room || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label for=\"property_rent\">Property Rent</Label>\r\n                                <Input\r\n                                    required\r\n                                    type=\"number\"\r\n                                    id='property_rent'\r\n                                    name=\"property_rent\"\r\n                                    placeholder=\"100\"\r\n                                    min={1}\r\n                                    value={userInput.property_rent}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col md='6' >\r\n                            <Label for=\"postcode\">Search address by Post Code</Label>\r\n                            <InputGroup>\r\n                                <Input\r\n                                    // required\r\n                                    type=\"text\"\r\n                                    id='postcode'\r\n                                    name=\"postcode\"\r\n                                    placeholder=\"post code\"\r\n                                    value={postcode}\r\n                                    onChange={e => setPostCode(e.target.value)}\r\n                                />\r\n                                <InputGroupAddon addonType='append'>\r\n                                    <Button color='primary' outline type='button' onClick={handlePostCodeSearch}>\r\n                                        {searching ? <Spinner size='sm' /> : 'Search'}\r\n                                    </Button>\r\n                                </InputGroupAddon>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col md='6' >\r\n                            <Label>Address</Label>\r\n                            <Select\r\n                                ref={addressRef}\r\n                                theme={selectThemeColors}\r\n                                className='react-select'\r\n                                classNamePrefix='select'\r\n                                name='house_details'\r\n                                maxMenuHeight={150}\r\n                                onChange={selected => {\r\n                                    setUserInput({ ...userInput, house_details: selected.value })\r\n                                }}\r\n                                options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                                value={{ value: userInput.house_details, label: userInput.house_details }}\r\n                                // isDisabled={!ukaddress.length}\r\n                                isClearable={false}\r\n                            />\r\n                            {/* {ukaddress.length ? <><Select\r\n                                ref={addressRef}\r\n                                theme={selectThemeColors}\r\n                                className='react-select'\r\n                                classNamePrefix='select'\r\n                                name='house_details'\r\n                                onChange={selected => {\r\n                                    setUserInput({ ...userInput, house_details: selected.value })\r\n                                }}\r\n                                options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                                value={{ value: userInput.house_details, label: userInput.house_details }}\r\n                                // isDisabled={!ukaddress.length}\r\n                                isClearable={false}\r\n                            /><Input\r\n                                    required\r\n                                    style={{\r\n                                        opacity: 0,\r\n                                        width: \"100%\",\r\n                                        height: 0\r\n                                        // position: \"absolute\"\r\n                                    }}\r\n                                    onFocus={e => addressRef.current.select.focus()}\r\n                                    value={userInput.house_details || ''}\r\n                                    onChange={e => ''}\r\n                                /></> : <Input\r\n                                required\r\n                                type=\"text\"\r\n                                id='house_details'\r\n                                name=\"house_details\"\r\n                                placeholder=\"house_details\"\r\n                                value={userInput.house_details}\r\n                                onChange={handleChange}\r\n                            />} */}\r\n                        </Col>\r\n\r\n                        <Col md='4' className='my-1'>\r\n                            <Label>Property Image</Label>\r\n                            <ImgUpload\r\n                                setimgUpLoading={setimgUpLoading}\r\n                                state={state}\r\n                                setState={setState}\r\n                                fileUrls={fileUrls}\r\n                                setFileUrls={setFileUrls} />\r\n                        </Col>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row className=\"match-height\">\r\n                    <Col md='4'>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_gas_certificate\"></Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_gas_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_gas_certificate: e.target.checked })}\r\n                                        checked={userInput.is_gas_certificate}\r\n                                        label='Gas Certified?' />\r\n                                </Col>\r\n                                {userInput.is_gas_certificate && <><Col md='12' className=\"mt-1\" >\r\n                                    <FormGroup>\r\n                                        <Label for=\"gas_certificate_expire_date\">Gas Certificate Expire Date</Label>\r\n                                        <Input\r\n                                            required\r\n                                            type=\"date\"\r\n                                            min={new Date().toLocaleDateString('fr-CA')}\r\n                                            id='gas_certificate_expire_date'\r\n                                            name=\"gas_certificate_expire_date\"\r\n                                            placeholder=\"100\"\r\n                                            value={userInput.gas_certificate_expire_date}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Gas Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={gasstate}\r\n                                            setState={setgasState}\r\n                                            fileUrls={gasfileUrls}\r\n                                            setFileUrls={setgasFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    {/* power */}\r\n                    <Col md='4'>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_power_certificate\">Power Certified?</Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_power_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_power_certificate: e.target.checked })}\r\n                                        checked={userInput.is_power_certificate}\r\n                                        label='Power Certified?' />\r\n                                </Col>\r\n\r\n                                {userInput.is_power_certificate && <>\r\n                                    <Col md='12' className=\"mt-1\" >\r\n                                        <FormGroup>\r\n                                            <Label for=\"power_certificate_expire_date\">Power Certificate Expire Date</Label>\r\n                                            <Input\r\n                                                required\r\n                                                type=\"date\"\r\n                                                min={new Date().toLocaleDateString('fr-CA')}\r\n                                                id='power_certificate_expire_date'\r\n                                                name=\"power_certificate_expire_date\"\r\n                                                placeholder=\"100\"\r\n                                                value={userInput.power_certificate_expire_date}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Power Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={powerstate}\r\n                                            setState={setpowerState}\r\n                                            fileUrls={powerfileUrls}\r\n                                            setFileUrls={setpowerFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md='4'>\r\n                        {/* insurance */}\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_property_insurence_certificate\">Insurence Certified?</Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_property_insurence_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_property_insurence_certificate: e.target.checked })}\r\n                                        checked={userInput.is_property_insurence_certificate}\r\n                                        label='Insurance Certified?' />\r\n                                </Col>\r\n\r\n                                {userInput.is_property_insurence_certificate && <>\r\n                                    <Col md='12' className=\"mt-1\" >\r\n                                        <FormGroup>\r\n                                            <Label for=\"property_insurence_certificate_expire_date\">Insurance Certificate Expire Date</Label>\r\n                                            <Input\r\n                                                required\r\n                                                type=\"date\"\r\n                                                min={new Date().toLocaleDateString('fr-CA')}\r\n                                                id='property_insurence_certificate_expire_date'\r\n                                                name=\"property_insurence_certificate_expire_date\"\r\n                                                placeholder=\"100\"\r\n                                                value={userInput.property_insurence_certificate_expire_date}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Insurance Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={insurencestate}\r\n                                            setState={setinsurenceState}\r\n                                            fileUrls={insurencefileUrls}\r\n                                            setFileUrls={setinsurenceFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Card>\r\n                    <Row>\r\n                        <Col md=\"12 text-center\">\r\n                            <Button.Ripple className='my-1' color='primary' type=\"submit\" disabled={isLoading}>\r\n                                {isLoading ? <Spinner size='sm' /> : 'Submit'}\r\n                            </Button.Ripple>\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            </Form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default EditProperties","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar rowColWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar rowColsPropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar propTypes = {\n  tag: tagPropType,\n  noGutters: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  form: PropTypes.bool,\n  xs: rowColsPropType,\n  sm: rowColsPropType,\n  md: rowColsPropType,\n  lg: rowColsPropType,\n  xl: rowColsPropType\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: rowColWidths\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      noGutters = props.noGutters,\n      Tag = props.tag,\n      form = props.form,\n      widths = props.widths,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"noGutters\", \"tag\", \"form\", \"widths\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var colSize = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!colSize) {\n      return;\n    }\n\n    var isXs = !i;\n    colClasses.push(isXs ? \"row-cols-\" + colSize : \"row-cols-\" + colWidth + \"-\" + colSize);\n  });\n  var classes = mapToCssModules(classNames(className, noGutters ? 'no-gutters' : null, form ? 'form-row' : 'row', colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = propTypes;\nRow.defaultProps = defaultProps;\nexport default Row;","import React, { useState } from 'react'\r\nimport { Upload, Modal } from 'antd'\r\n// import { PlusOutlined } from '@ant-design/icons'\r\nimport 'antd/dist/antd.css'\r\nimport { Slide, toast } from 'react-toastify'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Camera } from 'react-feather'\r\nimport { Error } from '../../../viewhelper'\r\nimport { IMG_BASE_URL } from '../../../Configuarables'\r\n\r\nconst ImgUpload = ({ fileUrls, setFileUrls, state, setState, setimgUpLoading }) => {\r\n    // const [fileUrls, setFileUrls] = useState([])\r\n    function getBase64(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader()\r\n            reader.readAsDataURL(file)\r\n            reader.onload = () => resolve(reader.result)\r\n            reader.onerror = error => reject(error)\r\n        })\r\n    }\r\n    // const [state, setState] = useState({\r\n    //     previewVisible: false,\r\n    //     previewImage: '',\r\n    //     previewTitle: '',\r\n    //     fileList: []\r\n    // })\r\n    const { previewVisible, previewImage, fileList, previewTitle } = state\r\n    const handleCancel = () => setState({ ...state, previewVisible: false })\r\n\r\n    const handlePreview = async file => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj)\r\n        }\r\n        setState({\r\n            ...state,\r\n            previewImage: file.url || file.preview,\r\n            previewVisible: true,\r\n            previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\r\n        })\r\n    }\r\n    const handleChange = ({ fileList, file }) => {\r\n        // console.log(fileList, fileUrls)\r\n        if (file.size / 1024 / 1024 > 2) {\r\n            return 0\r\n        }\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\r\n        if (!isJpgOrPng) {\r\n            return 0\r\n        }\r\n        setFileUrls(fileUrls.filter(a => fileList.some(b => a.uid === b.uid)))\r\n        setState({ ...state, fileList: fileList.filter(x => x.type.includes('image')) })\r\n    }\r\n    const uploadButton = (\r\n        <div className='text-center p-1' style={{ height: '102px', width: '102px' }}>\r\n            <span ><Camera size={20} className='my-1' /></span> <br />\r\n            <span>Add Image</span>\r\n        </div>\r\n        // <div>\r\n        //     <PlusOutlined />\r\n        //     <div style={{ marginTop: 8 }}>Upload</div>\r\n        // </div>\r\n    )\r\n    const props = {\r\n        beforeUpload: file => {\r\n            const isLt2M = file.size / 1024 / 1024 < 2\r\n            const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\r\n            if (!isJpgOrPng) {\r\n                toast.error(`${file.name} is not a Image file`)\r\n            } else if (!isLt2M) {\r\n                toast.error('Image must smaller than 2MB!')\r\n            } else {\r\n                const formData = new FormData()\r\n                formData.append('complain_image', file)\r\n                setimgUpLoading(true)\r\n                useJwt.singleFileupload(formData).then(res => {\r\n                    // alert(\"upload done\")\r\n                    setimgUpLoading(false)\r\n                    setFileUrls([\r\n                        ...fileUrls,\r\n                        {\r\n                            uid: file.uid,\r\n                            name: 'image.png',\r\n                            status: 'done',\r\n                            type: \"image/jpeg\",\r\n                            url: res.data.payload.fileurl\r\n                        }\r\n                    ])\r\n                }).catch(err => {\r\n                    setimgUpLoading(false)\r\n                    console.log(err)\r\n                    Error(err)\r\n                })\r\n                return isJpgOrPng && isLt2M\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Upload\r\n                {...props}\r\n                action={`${IMG_BASE_URL}/api/fackupload`}\r\n                listType=\"picture-card\"\r\n                fileList={fileList}\r\n                onPreview={handlePreview}\r\n                onChange={handleChange}\r\n            >\r\n                {fileList.length >= 1 ? null : uploadButton}\r\n            </Upload>\r\n            <Modal\r\n                visible={previewVisible}\r\n                title={previewTitle}\r\n                footer={null}\r\n                onCancel={handleCancel}\r\n            >\r\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImgUpload"],"sourceRoot":""}