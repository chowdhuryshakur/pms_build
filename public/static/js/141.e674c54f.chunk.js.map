{"version":3,"sources":["views/CustomComponents/SuperAdminPages/DashboardUI/InvoiceModal.js","assets/images/dashboardBadges/property.svg","assets/images/dashboardBadges/branch.svg","assets/images/dashboardBadges/contractor.svg","assets/images/dashboardBadges/landlord.svg","assets/images/dashboardBadges/tenant.svg","views/CustomComponents/SuperAdminPages/DashboardUI/Barchart.js","views/CustomComponents/SuperAdminPages/DashboardUI/InvoiceTable.js","assets/images/dashboardBadges/EAdmin.svg","views/CustomComponents/SuperAdminPages/Dashboard.js","views/CustomComponents/CommonDataTable.js","views/helper.js","assets/images/illustration/badge.svg"],"names":["ref","React","createRef","InvoiceModal","InvoiceDetails","InvModal","setInvModal","useEffect","console","log","isOpen","toggle","className","style","width","targetRef","filename","toPdf","Ripple","color","type","onClick","background","pill","statusType","status_name","responsive","bordered","scope","invoice_id","formatReadableDate","issue_date","CURRENCY_SYMBOL","total_amount","pay_amount","href","payment_attachment","download","src","alt","height","md","invoice_info","clientinfo","name","phone","String","property","replace","email","merchantinfo","address","iteminfo","map","x","number_of_renter","description","pay_for_date","unit_per","amount","amountinfo","sub_total","tax","total","Barchart","useState","data","revenueSeries","setrevenueSeries","chart","stacked","toolbar","show","grid","padding","top","bottom","yaxis","lines","xaxis","categories","labels","colors","baseRGBA","fontSize","axisTicks","axisBorder","legend","dataLabels","enabled","baseColor","plotOptions","bar","columnWidth","endingShape","distributed","min","max","tickAmount","revenueOptions","setrevenueOptions","useJwt","GetAllInvoicesByRange","startDate","endDate","then","res","ModifiedDate","payload","date","Date","getFullYear","getMonth","monthYrs","d","i","push","setMonth","uniquebyModifiedDate","Set","obj","emtyRevenueMonths","filter","e","some","additionalResponse","response","FinalFinalFinalRes","yearlyReport","filteredArray","ithMonthsAmount","reduce","a","b","finalObj","find","Math","error","catch","Card","Row","Col","xs","CardTitle","id","options","series","InvoiceTable","useHistory","JSON","parse","localStorage","getItem","role","setpay_amount","ispay_amountLoading","setispay_amountLoading","FilteredInvoices","setFilteredInvoices","payApprvModal","setpayApprvModal","setInvoiceDetails","tableDataLoading","setTDL","InvoicesData","setInvoicesData","PageCount","setPageCount","PageDataCount","showFilteredData","setshowFilteredData","setinvoice_id","reset","setReset","setstartDate","setendDate","getAllInvoicesData","page","limit","GetAllInvoices","column","maxWidth","selector","minWidth","row","statusBG","title","Badge","Button","size","cursor","handlePagination","CardHeader","tag","Form","onSubmit","preventDefault","Error","Input","required","onChange","target","value","toJSON","slice","split","reverse","join","CardBody","CommonDataTable","TableData","TableDataLoading","sm","noHeader","highlightOnHover","columns","progressPending","sortIcon","progressComponent","Spinner","disabled","length","Object","keys","Modal","ModalHeader","ModalBody","ApprovePaymentByAdmin","autoComplete","FormGroup","placeholder","Dashboard","total_revenue","setTotal_revenue","active_estate_admin","active_estate_manager","block_estate_admin","block_estate_manager","contractor","land_lord","tenant","due_amount","received_amount","counter","setCounter","userCounter","err","Number","subtitle","icon","EAdmin","branchBadge","contractorBadge","tenantBadge","landlordBadge","medal","item","index","body","currentPage","setCurrentPage","pagination","paginationPerPage","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","selected","pageCount","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","year","month","day","time","getTime","minutes","floor","hours","finaldate","toLocaleDateString","undefined","finalTime"],"mappings":"qJAAA,kJAUMA,EAAMC,IAAMC,YA6HHC,IA3HM,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,eAAgBC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAI9C,OAHAC,qBAAU,WACNC,QAAQC,IAAI,MAAOL,KACpB,IAEC,eAAC,IAAD,CAEIM,OAAQL,EACRM,OAAQ,kBAAML,GAAaD,IAC3BO,UAAS,iCAJb,UAMI,cAAC,IAAD,CAAaC,MAAO,CAAEC,MAAO,SAAWH,OAAQ,kBAAML,GAAaD,IAAnE,SACI,8BACI,cAAC,IAAD,CAAKU,UAAWf,EAAKgB,SAAS,mBAA9B,SACK,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAAC,IAAOC,OAAR,CAAeC,MAAM,UAAUC,KAAK,SAASC,QAASJ,EAAtD,oCAS5B,cAAC,IAAD,CAAWJ,MAAO,CAAEC,MAAO,QAASQ,WAAY,SAAhD,SACI,qBAAKtB,IAAKA,EAAV,SACI,eAAC,IAAD,CAAMa,MAAO,CAAEC,MAAO,SAAtB,UACI,qBAAIF,UAAU,eAAd,cAA8B,0CAC9B,uBACA,qBAAIA,UAAU,2BAAd,cAA0C,oDAC1C,uBACA,qBAAKA,UAAU,cAAf,SACI,eAAC,IAAD,CAAOW,MAAI,EAACJ,MAAO,UAAWP,UAAU,YAAxC,+BACuBR,EAAeoB,WAAWC,iBAGrD,uBACA,eAAC,IAAD,CAAOC,YAAU,EAACC,UAAQ,EAA1B,UACI,gCACI,+BACI,oBAAIf,UAAU,WAAd,wBACA,oBAAIA,UAAU,WAAd,wBACA,oBAAIA,UAAU,WAAd,0BACA,oBAAIA,UAAU,WAAd,yBACA,oBAAIA,UAAU,WAAd,6BAGR,gCACI,+BACI,oBAAIgB,MAAM,MAAV,SAAiBxB,EAAeyB,aAChC,6BAAKC,YAAmB1B,EAAe2B,cACvC,+BAAKC,IAAL,IAAuB5B,EAAe6B,gBACtC,+BAAKD,IAAL,IAAuB5B,EAAe8B,cACtC,6BACI,mBAAGC,KAAM/B,EAAegC,mBAAoBC,UAAQ,EAApD,SACI,qBAAKC,IAAKlC,EAAegC,mBAAoBG,IAAI,aAAazB,MAAM,KAAK0B,OAAO,mBAMpG,uBACA,uBACA,eAAC,IAAD,CAAK5B,UAAU,eAAf,UACI,eAAC,IAAD,CAAK6B,GAAG,IAAI7B,UAAU,OAAtB,UACI,4BAAG,8CACH,wCAAWR,EAAesC,aAAaC,WAAWC,QAClD,0CAAaxC,EAAesC,aAAaC,WAAWE,SACpD,4CAAeC,OAAO1C,EAAesC,aAAaC,WAAWI,UAAUC,QAAQ,WAAY,KAAKA,QAAQ,MAAO,QAC/G,yCAAY5C,EAAesC,aAAaC,WAAWM,YAEvD,eAAC,IAAD,CAAKR,GAAG,IAAI7B,UAAU,OAAtB,UACI,4BAAG,gDACH,wCAAWR,EAAesC,aAAaQ,aAAaN,QACpD,0CAAaxC,EAAesC,aAAaQ,aAAaL,SACtD,2CAAcC,OAAO1C,EAAesC,aAAaQ,aAAaC,QAAQH,QAAQ,WAAY,MAAMA,QAAQ,MAAO,QAC/G,yCAAY5C,EAAesC,aAAaQ,aAAaD,eAG7D,uBACA,qBAAKrC,UAAU,cAAf,SACI,cAAC,IAAD,CAAOW,MAAI,EAACJ,MAAO,UAAWP,UAAU,YAAxC,4BAIJ,uBACA,eAAC,IAAD,CAAOc,YAAU,EAACC,UAAQ,EAA1B,UACI,gCACI,+BACI,oBAAIf,UAAU,WAAd,qBACA,oBAAIA,UAAU,WAAd,yBACA,oBAAIA,UAAU,WAAd,+BACA,oBAAIA,UAAU,WAAd,sBAEA,oBAAIA,UAAU,WAAd,yBAGR,gCAEQR,EAAesC,aAAaU,SAASC,KAAI,SAAAC,GAAC,OAAI,+BAC1C,oBAAI1B,MAAM,MAAV,SAAiB0B,EAAEC,kBAAoB,MACvC,6BAAKD,EAAEE,cACP,6BAAKF,EAAEG,eACP,6BAAKH,EAAEI,WAEP,6BAAKJ,EAAEK,oBAKvB,qBAAK/C,UAAU,6BAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAGA,UAAU,wBAAb,UAAqC,0CAArC,MAAyDoB,IAAzD,IAA2E5B,EAAesC,aAAakB,WAAWC,aAClH,oBAAGjD,UAAU,wBAAb,UAAqC,oCAArC,MAAmDoB,IAAnD,IAAqE5B,EAAesC,aAAakB,WAAWE,IAA5G,OACA,oBAAGlD,UAAU,gCAAb,UAA6C,sCAA7C,MAA6DoB,IAA7D,IAA+E5B,EAAesC,aAAakB,WAAWG,0B,kCC7HvI,QAA0B,sC,kCCA1B,QAA0B,oC,kCCA1B,QAA0B,wC,kCCA1B,QAA0B,sC,kCCA1B,QAA0B,oC,8OCyM1BC,EAxLE,WACb,MAA0CC,mBAAS,CAC/C,CACIrB,KAAM,UACNsB,KAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,MAHhD,mBAAOC,EAAP,KAAsBC,EAAtB,KAMA,EAA4CH,mBAAS,CACjDI,MAAO,CACHC,SAAS,EACTlD,KAAM,MACNmD,QAAS,CAAEC,MAAM,IAErBC,KAAM,CACFC,QAAS,CACLC,KAAM,GACNC,QAAS,IAEbC,MAAO,CACHC,MAAO,CAAEN,MAAM,KAGvBO,MAAO,CACHC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC1FC,OAAQ,CACJpE,MAAO,CACHqE,OAAQC,IACRC,SAAU,YAGlBC,UAAW,CACPb,MAAM,GAEVc,WAAY,CACRd,MAAM,IAGde,OAAQ,CACJf,MAAM,GAEVgB,WAAY,CACRC,SAAS,GAEbP,OAAQ,CAACQ,KACTC,YAAa,CACTC,IAAK,CACDC,YAAa,MACbC,YAAa,WAEjBC,aAAa,GAEjBlB,MAAO,CACHmB,IAAK,EACLC,IAAK,IACLC,WAAY,EACZjB,OAAQ,CACJpE,MAAO,CACHqE,OAAQC,IACRC,SAAU,eAnD1B,mBAAOe,EAAP,KAAuBC,EAAvB,KAwDA,EAAwBnC,mBAAS,QAAjC,6BA6GA,OA3GA1D,qBAAU,WACN8F,IAAOC,sBAAsB,CACzBC,UAAW,aACXC,QAAS,eACVC,MAAK,SAAAC,GACJ,IAII,IAHA,IAAMC,EAAeD,EAAIxC,KAAK0C,QAAQvD,KAAI,SAAAC,GAAO,MAAO,CAAEuD,KAAK,GAAD,OAAK,IAAIC,KAAKxD,EAAEvB,YAAYgF,cAA5B,YAA6C,IAAID,KAAKxD,EAAEvB,YAAYiF,WAAa,GAAKrD,OAAQL,EAAErB,iBACxJgF,EAAW,GACXC,EAAI,IAAIJ,KACLK,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAASG,KAAT,UAAiBF,EAAEH,cAAnB,YAAqCG,EAAEF,WAAa,IACpDE,EAAEG,SAASH,EAAEF,WAAa,GAU9B,IAPA,IAAMM,EAAoB,YAAO,IAAIC,IAAIZ,EAAatD,KAAI,SAAAmE,GAAG,OAAIA,EAAIX,UAC/DY,EAAoBR,EAASS,QAAO,SAAAC,GAAC,OAAI,IAAUL,EAAqBM,MAAK,SAAAV,GAAC,OAAIA,IAAMS,QACxFE,EAAqBJ,EAAkBpE,KAAI,SAAAC,GAAO,MAAO,CAAEuD,KAAMvD,EAAGK,OAAQ,MAC5EmE,EAAWpB,EAAIxC,KAAK0C,QAAQvD,KAAI,SAAAC,GAAO,MAAO,CAAEuD,KAAMvD,EAAEvB,WAAY4B,OAAQL,EAAErB,iBAE9E8F,EAAkB,sBAAOD,GAAP,YAAoBD,IACxCG,EAAe,GAfnB,WAgBSb,GACL,IAAMc,EAAgBF,EAAmBL,QAAO,SAAAC,GAAC,OAAI,IAAIb,KAAKa,EAAEd,MAAMG,aAAeG,KAC/Ee,EAAkBD,EAAc5E,KAAI,SAAAC,GAAC,OAAIA,EAAEK,UAAQwE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAExEC,EAAW,CACbzB,KAFe,UAAM,IAAIC,KAAKmB,EAAc,GAAGpB,MAAME,cAAtC,YAAuD,IAAID,KAAKmB,EAAc,GAAGpB,MAAMG,WAAa,GAGnHrD,OAAQuE,GAEZF,EAAaZ,KAAKkB,IARbnB,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAUTa,EAAef,EAAS5D,KAAI,SAAAC,GACxB,MAAO,CACHuD,KAAMvD,EACNK,OAAQqE,EAAaO,MAAK,SAAAH,GAAC,OAAIA,EAAEvB,OAASvD,KAAGK,WAGrDS,EAAiB,CACb,CACIxB,KAAM,UACNsB,KAAM8D,EAAa3E,KAAI,SAAAC,GAAC,OAAIA,EAAEK,aAGtCyC,EAAkB,CACd/B,MAAO,CACHC,SAAS,EACTlD,KAAM,MACNmD,QAAS,CAAEC,MAAM,IAErBC,KAAM,CACFC,QAAS,CACLC,KAAM,GACNC,QAAS,IAEbC,MAAO,CACHC,MAAO,CAAEN,MAAM,KAGvBO,MAAO,CACHC,WAAYgD,EAAa3E,KAAI,SAAAC,GAAC,OAAIA,EAAEuD,QACpC5B,OAAQ,CACJpE,MAAO,CACHqE,OAAQC,IACRC,SAAU,YAGlBC,UAAW,CACPb,MAAM,GAEVc,WAAY,CACRd,MAAM,IAGde,OAAQ,CACJf,MAAM,GAEVgB,WAAY,CACRC,SAAS,GAEbP,OAAQ,CAACQ,KACTC,YAAa,CACTC,IAAK,CACDC,YAAa,MACbC,YAAa,WAEjBC,aAAa,GAEjBlB,MAAO,CACHmB,IAAK,EACLC,IAAKuC,KAAKvC,IAAL,MAAAuC,KAAI,YAAQR,EAAa3E,KAAI,SAAAC,GAAC,OAAIA,EAAEK,YACzCuC,WAAY,EACZjB,OAAQ,CACJpE,MAAO,CACHqE,OAAQC,IACRC,SAAU,eAK5B,MAAOuC,GACLnH,QAAQiI,MAAMd,OAEnBe,OAAM,SAAAD,GACLjI,QAAQC,IAAI,wBAAyBgI,QAE1C,IAEI,cAACE,EAAA,EAAD,CAAM/H,UAAU,sBAAhB,SACH,cAACgI,EAAA,EAAD,CAAKhI,UAAU,OAAf,SACI,eAACiI,EAAA,EAAD,CAAKjI,UAAU,yBAAyB6B,GAAG,KAAKqG,GAAG,KAAnD,UACI,qBAAKlI,UAAU,4DAAf,SACI,cAACmI,EAAA,EAAD,CAAWnI,UAAU,gBAArB,8BAEJ,cAAC,IAAD,CAAOoI,GAAG,uBAAuB5H,KAAK,MAAMoB,OAAO,MAAMyG,QAAS9C,EAAgB+C,OAAQ/E,Y,qMCmD3FgF,EAnOM,WACDC,cACCC,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,KAD9D,IAEA,EAAoCxF,mBAAS,GAA7C,mBAAO/B,EAAP,KAAmBwH,EAAnB,KACA,EAAsDzF,oBAAS,GAA/D,mBAAO0F,EAAP,KAA4BC,EAA5B,KACA,EAAgD3F,mBAAS,IAAzD,mBAAO4F,EAAP,KAAyBC,EAAzB,KACA,EAAgC7F,oBAAS,GAAzC,mBAAO5D,EAAP,KAAiBC,EAAjB,KACA,EAA0C2D,oBAAS,GAAnD,mBAAO8F,EAAP,KAAsBC,EAAtB,KACA,EAA4C/F,mBAAS,IAArD,mBAAO7D,EAAP,KAAuB6J,EAAvB,KACA,GAAmChG,oBAAS,GAA5C,qBAAOiG,GAAP,MAAyBC,GAAzB,MACA,GAAwClG,mBAAS,IAAjD,qBAAOmG,GAAP,MAAqBC,GAArB,MACA,GAAkCpG,mBAAS,GAA3C,qBAAOqG,GAAP,MAAkBC,GAAlB,MACA,GAA0CtG,mBAAS,GAAnD,qBAAOuG,GAAP,MACA,IADA,MACgDvG,oBAAS,IAAzD,qBAAOwG,GAAP,MAAyBC,GAAzB,MACA,GAAoCzG,mBAAS,MAA7C,qBAAOpC,GAAP,MAAmB8I,GAAnB,MACA,GAA0B1G,oBAAS,GAAnC,qBAAO2G,GAAP,MAAcC,GAAd,MACA,GAAkC5G,mBAAS,IAA3C,qBAAOsC,GAAP,MAAkBuE,GAAlB,MACA,GAA8B7G,mBAAS,IAAvC,qBAAOuC,GAAP,MAAgBuE,GAAhB,MAEMC,GAAqB,SAACC,EAAMC,GAC9B7E,IAAO8E,eAAe,CAAEF,OAAMC,UAASzE,MAAK,SAAAC,GACxClG,QAAQC,IAAI,qBAAsBiG,EAAIxC,KAAK0C,SAC3CyD,GAAgB3D,EAAIxC,KAAK0C,SACzBuD,IAAO,MACRzB,OAAM,SAAAD,GACLjI,QAAQC,IAAI,qBAAsBgI,GAClC0B,IAAO,OASf5J,qBAAU,WACNyK,GAAmBV,GAAWE,MAC/B,CAACI,KAGJ,IAAMQ,GAAS,CACX,CACIxI,KAAM,aACNyI,SAAU,QAEVC,SAAU,cAEd,CACI1I,KAAM,cACN2I,SAAU,QAEVD,SAAU,SAAAE,GAAG,OAAIA,EAAI9I,aAAaC,WAAWC,OAEjD,CACIA,KAAM,sBACN2I,SAAU,QAEVD,SAAU,SAAAE,GAAG,OAAI1J,YAAmB0J,EAAIzJ,cAE5C,CACIa,KAAM,eACN2I,SAAU,QAEVD,SAAU,SAAAE,GAAG,gBAAOxJ,IAAP,YAA0BwJ,EAAIvJ,gBAE/C,CACIW,KAAM,cACN2I,SAAU,QAEVD,SAAU,SAAAE,GAAG,gBAAOxJ,IAAP,YAA0BwJ,EAAItJ,cAE/C,CACIU,KAAM,SACN2I,SAAU,QAEVD,SAAU,SAAAE,GACN,IAAMC,EAAW,CACb,EAAG,CAAEC,MAAO,OAAQvK,MAAO,WAC3B,GAAI,CAAEuK,MAAO,MAAOvK,MAAO,WAC3B,GAAI,CAAEuK,MAAO,cAAevK,MAAO,iBACnC,GAAI,CAAEuK,MAAO,mBAAoBvK,MAAO,kBAE5C,OAAO,cAACwK,EAAA,EAAD,CAAOxK,MAAOsK,EAASD,EAAIhK,WAAWwH,IAAI7H,MAAOI,MAAI,EAACX,UAAU,OAAhE,SACF6K,EAASD,EAAIhK,WAAWwH,IAAI0C,UAIzC,CACI9I,KAAM,UACN2I,SAAU,QAEVD,SAAU,SAAAE,GAAG,OAAI,cAACI,EAAA,EAAO1K,OAAR,CAAe2K,KAAK,KAAK1K,MAAM,UAAUE,QAAS,SAACsG,GAChEgD,GAAca,EAAI3J,YAClBoI,EAAkBuB,GAClBxB,GAAiB,IAHJ,SAKb,+CAGR,CACIpH,KAAM,OACNyI,SAAU,OAEVC,SAAU,SAAAE,GAAG,OAAI,sBAAME,MAAM,OAAZ,SACb,cAAC,IAAD,CAAKG,KAAM,GACP1K,MAAM,WACNN,MAAO,CAAEiL,OAAQ,WACjBzK,QAAS,SAACsG,GACNsC,EAAkBuB,GAClBlL,GAAY,WAM1ByL,GAAmB,SAAC3K,GACtB+I,IAAO,GACM,SAAT/I,GACAmJ,GAAaD,GAAY,GACzBU,GAAmBV,GAAY,EAAGE,MAElCD,GAAaD,GAAY,GACzBU,GAAmBV,GAAY,EAAGE,MAgC1C,OACI,eAAC7B,EAAA,EAAD,WACI,eAACqD,EAAA,EAAD,CAAYpL,UAAU,4BAAtB,UACI,cAACmI,EAAA,EAAD,CAAWkD,IAAI,KAAf,sBACA,eAACC,EAAA,EAAD,CAAMtL,UAAU,SAASuL,SAjChB,SAAAxE,GACjBA,EAAEyE,iBACFjC,IAAO,GACP9D,IAAOC,sBAAsB,CACzBC,aACAC,aACDC,MAAK,SAAAC,GACJlG,QAAQC,IAAI,wBAAyBiG,EAAIxC,KAAK0C,SAC9CkD,EAAoBpD,EAAIxC,KAAK0C,SAC7BuD,IAAO,GACPO,IAAoB,MACrBhC,OAAM,SAAAD,GACL4D,YAAM5D,GACN0B,IAAO,OAoBH,UACI,cAACmC,EAAA,EAAD,CAAOC,UAAQ,EAACnL,KAAK,QAAQoL,SAAU,SAAA7E,GAAC,OAAImD,GAAa,IAAIhE,KAAKa,EAAE8E,OAAOC,OAAOC,SAASC,MAAM,EAAG,IAAIC,MAAM,KAAKC,UAAUC,KAAK,SADtI,OAEI,cAACT,EAAA,EAAD,CAAOC,UAAQ,EAACnL,KAAK,QAAQoL,SAAU,SAAA7E,GAAC,OAAIoD,GAAW,IAAIjE,KAAKa,EAAE8E,OAAOC,OAAOC,SAASC,MAAM,EAAG,IAAIC,MAAM,KAAKC,UAAUC,KAAK,SAFpI,OAGI,cAACnB,EAAA,EAAO1K,OAAR,CAAe2K,KAAK,KAAK1K,MAAM,UAAUC,KAAK,SAASR,UAAU,OAAOC,MAAO,CAAE0K,SAAU,QAA3F,SACI,kDAIZ,cAACyB,EAAA,EAAD,UACI,cAACpE,EAAA,EAAD,UACK6B,GAAmB,cAAC5B,EAAA,EAAD,CAAKpG,GAAG,KAAR,SAChB,cAACwK,EAAA,EAAD,CAAiB7B,OAAQA,GAAQ8B,UAAWrD,EAAkBsD,iBAAkBjD,OAC3E,eAACrB,EAAA,EAAD,CAAKuE,GAAG,KAAR,UACL,cAAC,IAAD,CACIC,UAAQ,EACRC,kBAAgB,EAChBpJ,KAAMkG,GACNmD,QAASnC,GACTxK,UAAU,kBACV4M,gBAAiBtD,GACjBuD,SAAU,cAAC,IAAD,CAAa5B,KAAM,KAC7B6B,kBAAmB,cAACC,EAAA,EAAD,CAASxM,MAAM,YAClCO,YAAY,IAEhB,sBAAKd,UAAU,aAAf,UACI,cAACgL,EAAA,EAAO1K,OAAR,CAAe2K,KAAK,KAAK+B,SAAwB,IAAdtD,GAAiB1J,UAAU,OAAOO,MAAM,YAAYE,QAAS,SAAAsG,GAAC,OAAIoE,GAAiB,SAAtH,SACI,cAAC,IAAD,CAAc5K,MAAM,QAAQ0K,KAAM,OAF1C,mBAG4C,cAACD,EAAA,EAAO1K,OAAR,CAAe2K,KAAK,KAAK+B,UAAWxD,GAAayD,OAAQjN,UAAU,OAAOO,MAAM,YAAYE,QAAS,SAAAsG,GAAC,OAAIoE,GAAiB,SAA3H,SACpC,cAAC,IAAD,CAAe5K,MAAM,QAAQ0K,KAAM,iBAMtDiC,OAAOC,KAAK3N,GAAgByN,OAAS,cAAC1N,EAAA,EAAD,CAAcC,eAAgBA,EAAgBC,SAAUA,EAAUC,YAAaA,IAAkB,GACvI,eAAC0N,EAAA,EAAD,CACItN,OAAQqJ,EACRpJ,OAAQ,kBAAMqJ,GAAkBD,IAChCnJ,UAAS,wBAHb,UAKI,cAACqN,EAAA,EAAD,CAAatN,OAAQ,kBAAMqJ,GAAkBD,IAA7C,2CACA,cAACmE,EAAA,EAAD,UACI,eAAChC,EAAA,EAAD,CAAMtL,UAAU,WAAWC,MAAO,CAAEC,MAAO,QAAUqL,SA3DhD,SAAAxE,GACjBA,EAAEyE,iBACFxC,GAAuB,GACvBpJ,QAAQC,IAAI,CAAEoB,cAAYK,eAC1BmE,IAAO8H,sBAAsB,CAAEtM,cAAYK,eAAcuE,MAAK,SAAAC,GAC1DkD,GAAuB,GACvBI,GAAiB,GACjBa,IAAUD,OACXlC,OAAM,SAAAD,GACL4D,YAAM5D,GACNmB,GAAuB,OAiD8DwE,aAAa,MAA1F,UACI,cAACvF,EAAA,EAAD,CAAKpG,GAAG,KAAR,SACI,cAAC4L,EAAA,EAAD,UACI,cAAC/B,EAAA,EAAD,CACIC,UAAQ,EACRnL,KAAK,SACL4E,IAAK,EACLgD,GAAG,aACHpG,KAAK,aACL0L,YAAY,SACZ5B,MAAOxK,EACPsK,SAAU,SAAA7E,GAAC,OAAI+B,EAAc/B,EAAE8E,OAAOC,cAIlD,cAAC7D,EAAA,EAAD,CAAKpG,GAAG,KAAK7B,UAAU,cAAvB,SACI,cAACgL,EAAA,EAAO1K,OAAR,CAAeN,UAAU,OAAOO,MAAM,UAAUC,KAAK,SAASwM,SAAUjE,EAAxE,SACKA,EAAsB,cAACgE,EAAA,EAAD,CAAS9B,KAAK,OAAU,yB,kDC5OhE,MAA0B,mCCkJ1B0C,UA3HG,WACd,MAA4CtK,mBAAS,IAArD,mBACA,GADA,UAC0CA,mBAAS,IAAnD,mBAAOuK,EAAP,KAAsBC,EAAtB,KACA,EAA8BxK,mBAAS,CACnCyK,oBAAqB,EACrBC,sBAAuB,EACvBC,mBAAoB,EACpBC,qBAAsB,EACtBC,WAAY,EACZC,UAAW,EACXC,OAAQ,EACRC,WAAY,EACZC,gBAAiB,IATrB,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA7O,qBAAU,WACN8F,IAAOgJ,cAAc5I,MAAK,SAAAC,GAEtB,MAA4KA,EAAIxC,KAAK0C,QAA7K8H,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,sBAAuBC,EAApD,EAAoDA,mBAAoBC,EAAxE,EAAwEA,qBAAsBC,EAA9F,EAA8FA,WAAYC,EAA1G,EAA0GA,UAAWC,EAArH,EAAqHA,OAAQR,EAA7H,EAA6HA,cAAeS,EAA5I,EAA4IA,WAAYC,EAAxJ,EAAwJA,gBACxJT,EAAiBD,GACjBY,EAAW,CAAEV,sBAAqBC,wBAAuBC,qBAAoBC,uBAAsBC,aAAYC,YAAWC,SAAQC,aAAYC,uBAC/IxG,OAAM,SAAA4G,GACL9O,QAAQC,IAAI6O,QAEjB,IACH,IAAMpL,EAAO,CACT,CACIwH,MAAO6D,OAAOJ,EAAQT,qBAAuBa,OAAOJ,EAAQP,oBAC5DY,SAAU,gBACVrO,MAAO,gBACPsO,KAAMC,GAEV,CACIhE,MAAO6D,OAAOJ,EAAQR,uBAAyBY,OAAOJ,EAAQN,sBAC9DW,SAAU,kBACVrO,MAAO,gBACPsO,KAAME,KAEV,CACIjE,MAAOyD,EAAQL,WACfU,SAAU,cACVrO,MAAO,aACPsO,KAAMG,KAEV,CACIlE,MAAOyD,EAAQH,OACfQ,SAAU,UACVrO,MAAO,eACPsO,KAAMI,KAEV,CACInE,MAAOyD,EAAQJ,UACfS,SAAU,YACVrO,MAAO,gBACPsO,KAAMK,MAGd,OACI,qCAEI,eAAClH,EAAA,EAAD,CAAKhI,UAAU,eAAf,UACI,cAACiI,EAAA,EAAD,CAAKpG,GAAG,IAAR,SACI,cAACkG,EAAA,EAAD,CAAM/H,UAAU,6BAAhB,SACI,eAACoM,EAAA,EAAD,WACI,+CAEA,oBAAIpM,UAAU,mBAAd,SACI,oBAAGuB,KAAK,IAAId,QAAS,SAAAsG,GAAC,OAAIA,EAAEyE,kBAA5B,UACKpK,IADL,IACuBwM,OAI3B,qBAAK5N,UAAU,uBAAuB0B,IAAKyN,IAAOxN,IAAI,YAAYC,OAAQ,KAC1E,eAACoG,EAAA,EAAD,CAAKhI,UAAU,OAAf,UACI,eAACiI,EAAA,EAAD,CAAKpG,GAAG,IAAR,UACI,4BAAG,2CACH,mBAAG7B,UAAU,eAAb,SACI,8BAAIoB,IAAJ,IAAsBmN,EAAQD,wBAGtC,eAACrG,EAAA,EAAD,CAAKpG,GAAG,IAAR,UACI,4BAAG,6CACH,mBAAG7B,UAAU,eAAb,SACI,kCAAKoB,IAAL,IAAuBmN,EAAQF,6BAQvD,cAACpG,EAAA,EAAD,CAAKpG,GAAG,IAAR,SACI,eAACkG,EAAA,EAAD,CAAM/H,UAAU,kBAAhB,UACI,cAACoL,EAAA,EAAD,UACI,cAACjD,EAAA,EAAD,CAAWkD,IAAI,KAAf,qBAGJ,cAACe,EAAA,EAAD,CAAUpM,UAAU,OAApB,SACI,qBAAKA,UAAU,MAAf,SACIsD,EAAKb,KAAI,SAAC2M,EAAMC,GACZ,OACI,cAACpH,EAAA,EAAD,CAAKuE,GAAG,IAAR,SACI,eAAC,IAAD,WAEI,qBAAK9K,IAAK0N,EAAKP,KAAM7O,UAAU,kBAC/B,eAAC,IAAD,CAAOA,UAAU,UAAUsP,MAAI,EAA/B,UACI,oBAAItP,UAAU,0BAAd,SAAyCoP,EAAKtE,QAC9C,cAAC,IAAD,CAAU9K,UAAU,oBAApB,SAAyCoP,EAAKR,kBANzCS,kBAiB7C,cAAC,EAAD,IACA,cAAC,EAAD,S,0HC5EGhD,IAtDS,SAAC,GAA6C,IAA3C7B,EAA0C,EAA1CA,OAAQ8B,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,iBAC1C,EAAsClJ,mBAAS,GAA/C,mBAAOkM,EAAP,KAAoBC,EAApB,KA+BA,OACI,cAAC,WAAD,UACI,cAAC,IAAD,CACI/C,UAAQ,EACRgD,YAAU,EAEV9C,QAASnC,EACTkF,kBAAmB,GACnB1P,UAAU,kBACV6M,SAAU,cAAC,IAAD,CAAa5B,KAAM,KAC7B0E,sBAAuBJ,EAAc,EACrCK,oBAnCa,wBACrB,cAAC,KAAD,GACIC,cAAc,GACdC,UAAU,GACVC,UAAWR,EACXS,aAAc,SAAA3F,GAAI,OATD,SAAAA,GACrBmF,EAAenF,EAAK4F,UAQM9E,CAAiBd,IACvC6F,UAAW5D,EAAUW,OAASX,EAAUW,OAAS,GAAK,EACtDkD,WAAW,MACXC,mBAAoB,EACpBC,qBAAsB,EACtBC,gBAAgB,SAChBC,cAAc,YACdC,eAAe,YACfC,mBAAmB,YACnBC,kBAAkB,YAClBC,cAAc,iBACdC,kBAAkB,iBAClBC,sBAAsB,YACtBC,kBAAkB,aAjBtB,+BAkBmB,aAlBnB,mCAmBuB,aAnBvB,mCAoBuB,8FApBvB,KAmCQxN,KAAMgJ,EACNM,gBAAiBL,EACjBO,kBAAmB,cAAC,IAAD,CAASvM,MAAM,YAClCO,YAAY,Q,iCC1D5B,sCAAMuH,EAAU,CAAE0I,KAAM,UAAWC,MAAO,OAAQC,IAAK,WAE1C/P,EAAqB,SAAC+E,GAC/B,IAAMiL,EAAO,IAAIhL,KAAKD,GAAMkL,UACxBC,EAAUxJ,KAAKyJ,MAAOH,EAAI,IAAkB,IAC5CI,EAAQ1J,KAAKyJ,MAAOH,EAAI,KAAuB,IAEnDI,EAASA,EAAQ,GAAT,WAAmBA,GAAUA,EACrCF,EAAWA,EAAU,GAAX,WAAqBA,GAAYA,EAG3C,IAAMG,EAAY,IAAIrL,KAAKD,GAAMuL,wBAAmBC,EAAWpJ,GACzDqJ,EAAS,UAAMJ,EAAN,cAAiBF,GAChC,MAAM,GAAN,OAAUG,EAAV,cAAyBG,K,iCCbd,QAA0B","file":"static/js/141.e674c54f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, ChevronsRight\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, Table, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport { CURRENCY_SYMBOL } from '../../../Configuarables'\r\nimport { formatReadableDate } from '../../../helper'\r\nimport Pdf from \"react-to-pdf\"\r\nconst ref = React.createRef()\r\n\r\nconst InvoiceModal = ({ InvoiceDetails, InvModal, setInvModal }) => {\r\n    useEffect(() => {\r\n        console.log('row', InvoiceDetails)\r\n    }, [])\r\n    return (\r\n        <Modal\r\n\r\n            isOpen={InvModal}\r\n            toggle={() => setInvModal(!InvModal)}\r\n            className={`modal-dialog-centered modal-lg`}\r\n        >\r\n            <ModalHeader style={{ width: '835px' }} toggle={() => setInvModal(!InvModal)}>\r\n                <div >\r\n                    <Pdf targetRef={ref} filename=\"code-example.pdf\">\r\n                        {({ toPdf }) => <Button.Ripple color='primary' type=\"button\" onClick={toPdf}>\r\n                            Download as Pdf\r\n                            {/* <button onClick={toPdf}>Generate Pdf</button> */}\r\n                        </Button.Ripple>}\r\n                    </Pdf>\r\n\r\n                </div>\r\n\r\n            </ModalHeader>\r\n            <ModalBody style={{ width: '835px', background: 'white' }}>\r\n                <div ref={ref} >\r\n                    <Card style={{ width: '800px' }}>\r\n                        <h1 className=\"text-primary\"> <b>i-Prop</b></h1>\r\n                        <br />\r\n                        <h3 className=\"text-primary text-center\"> <b> Invoice Details</b></h3>\r\n                        <br />\r\n                        <div className=\"text-center\">\r\n                            <Badge pill color={'warning'} className='px-2 py-1'>\r\n                                Current Status :  {InvoiceDetails.statusType.status_name}\r\n                            </Badge>\r\n                        </div>\r\n                        <br />\r\n                        <Table responsive bordered >\r\n                            <thead >\r\n                                <tr >\r\n                                    <th className='bg-white'>Invoice ID</th>\r\n                                    <th className='bg-white'>Issue Date</th>\r\n                                    <th className='bg-white'>Total Amount</th>\r\n                                    <th className='bg-white'>Paid Amount</th>\r\n                                    <th className='bg-white'>Attachment</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th scope=\"row\">{InvoiceDetails.invoice_id}</th>\r\n                                    <td>{formatReadableDate(InvoiceDetails.issue_date)}</td>\r\n                                    <td>{CURRENCY_SYMBOL} {InvoiceDetails.total_amount}</td>\r\n                                    <td>{CURRENCY_SYMBOL} {InvoiceDetails.pay_amount}</td>\r\n                                    <td>\r\n                                        <a href={InvoiceDetails.payment_attachment} download>\r\n                                            <img src={InvoiceDetails.payment_attachment} alt=\"Not found!\" width=\"50\" height=\"50\" />\r\n                                        </a>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </Table>\r\n                        <br />\r\n                        <br />\r\n                        <Row className='px-md-5 px-2'>\r\n                            <Col md='6' className='pl-2'>\r\n                                <p><b>Client Info</b></p>\r\n                                <p>Name : {InvoiceDetails.invoice_info.clientinfo.name}</p>\r\n                                <p>Phone : 0{InvoiceDetails.invoice_info.clientinfo.phone}</p>\r\n                                <p>Property : {String(InvoiceDetails.invoice_info.clientinfo.property).replace(/\\s*,\\s*/g, \",\").replace(/,+/g, ',')}</p>\r\n                                <p>Email : {InvoiceDetails.invoice_info.clientinfo.email}</p>\r\n                            </Col>\r\n                            <Col md='6' className='pl-2'>\r\n                                <p><b>Merchant Info</b></p>\r\n                                <p>Name : {InvoiceDetails.invoice_info.merchantinfo.name}</p>\r\n                                <p>Phone : 0{InvoiceDetails.invoice_info.merchantinfo.phone}</p>\r\n                                <p>Address : {String(InvoiceDetails.invoice_info.merchantinfo.address.replace(/\\s*,\\s*/g, \",\")).replace(/,+/g, ',')}</p>\r\n                                <p>Email : {InvoiceDetails.invoice_info.merchantinfo.email}</p>\r\n                            </Col>\r\n                        </Row>\r\n                        <br />\r\n                        <div className=\"text-center\">\r\n                            <Badge pill color={'primary'} className='px-3 py-1'>\r\n                                Payment Info\r\n                            </Badge>\r\n                        </div>\r\n                        <br />\r\n                        <Table responsive bordered >\r\n                            <thead >\r\n                                <tr >\r\n                                    <th className='bg-white'>Tenants</th>\r\n                                    <th className='bg-white'>Description</th>\r\n                                    <th className='bg-white'>Payable for Month</th>\r\n                                    <th className='bg-white'>Per Unit</th>\r\n                                    {/* <th className='bg-white'>Quantity</th> */}\r\n                                    <th className='bg-white'>Amount</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    InvoiceDetails.invoice_info.iteminfo.map(x => <tr>\r\n                                        <th scope=\"row\">{x.number_of_renter || \"0\"}</th>\r\n                                        <td>{x.description}</td>\r\n                                        <td>{x.pay_for_date}</td>\r\n                                        <td>{x.unit_per}</td>\r\n                                        {/* <td>{x.number_of_renter}</td> */}\r\n                                        <td>{x.amount}</td>\r\n                                    </tr>)\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                        <div className=\"d-flex justify-content-end\">\r\n                            <div className='py-3 pr-2'>\r\n                                <p className='border-bottom p-1 m-0'><b>Sub-Total</b> : {CURRENCY_SYMBOL} {InvoiceDetails.invoice_info.amountinfo.sub_total}</p>\r\n                                <p className='border-bottom p-1 m-0'><b>Tax</b> : {CURRENCY_SYMBOL} {InvoiceDetails.invoice_info.amountinfo.tax} </p>\r\n                                <p className='bg-primary text-white p-1 m-0'><b>Total</b> : {CURRENCY_SYMBOL} {InvoiceDetails.invoice_info.amountinfo.total}</p>\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default InvoiceModal","export default __webpack_public_path__ + \"static/media/property.341a7835.svg\";","export default __webpack_public_path__ + \"static/media/branch.26ca2046.svg\";","export default __webpack_public_path__ + \"static/media/contractor.b9648f1b.svg\";","export default __webpack_public_path__ + \"static/media/landlord.829d50e1.svg\";","export default __webpack_public_path__ + \"static/media/tenant.0a640657.svg\";","import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport {\r\n    Card,\r\n    CardTitle,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    UncontrolledButtonDropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    DropdownToggle\r\n} from 'reactstrap'\r\nimport Chart from 'react-apexcharts'\r\nimport { baseColor, baseRGBA } from '../../../Configuarables'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\n\r\nconst Barchart = () => {\r\n    const [revenueSeries, setrevenueSeries] = useState([\r\n        {\r\n            name: 'Earning',\r\n            data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n        }\r\n    ])\r\n    const [revenueOptions, setrevenueOptions] = useState({\r\n        chart: {\r\n            stacked: true,\r\n            type: 'bar',\r\n            toolbar: { show: false }\r\n        },\r\n        grid: {\r\n            padding: {\r\n                top: -20,\r\n                bottom: -10\r\n            },\r\n            yaxis: {\r\n                lines: { show: false }\r\n            }\r\n        },\r\n        xaxis: {\r\n            categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n            labels: {\r\n                style: {\r\n                    colors: baseRGBA,\r\n                    fontSize: '0.86rem'\r\n                }\r\n            },\r\n            axisTicks: {\r\n                show: false\r\n            },\r\n            axisBorder: {\r\n                show: false\r\n            }\r\n        },\r\n        legend: {\r\n            show: false\r\n        },\r\n        dataLabels: {\r\n            enabled: false\r\n        },\r\n        colors: [baseColor],\r\n        plotOptions: {\r\n            bar: {\r\n                columnWidth: '17%',\r\n                endingShape: 'rounded'\r\n            },\r\n            distributed: true\r\n        },\r\n        yaxis: {\r\n            min: 0,\r\n            max: 10000,\r\n            tickAmount: 4,\r\n            labels: {\r\n                style: {\r\n                    colors: baseRGBA,\r\n                    fontSize: '0.86rem'\r\n                }\r\n            }\r\n        }\r\n    })\r\n    const [data, setData] = useState('null')\r\n\r\n    useEffect(() => {\r\n        useJwt.GetAllInvoicesByRange({\r\n            startDate: \"02/02/2021\",\r\n            endDate: \"01/01/2022\"\r\n        }).then(res => {\r\n            try {\r\n                const ModifiedDate = res.data.payload.map(x => { return { date: `${new Date(x.issue_date).getFullYear()}/${new Date(x.issue_date).getMonth() + 1}`, amount: x.total_amount } })\r\n                const monthYrs = []\r\n                const d = new Date()\r\n                for (let i = 0; i < 12; i++) {\r\n                    monthYrs.push(`${d.getFullYear()}/${(d.getMonth() + 1)}`)\r\n                    d.setMonth(d.getMonth() - 1)\r\n                }\r\n                // console.log(monthYrs)\r\n                const uniquebyModifiedDate = [...new Set(ModifiedDate.map(obj => obj.date))]\r\n                const emtyRevenueMonths = monthYrs.filter(e => false === uniquebyModifiedDate.some(d => d === e))\r\n                const additionalResponse = emtyRevenueMonths.map(x => { return { date: x, amount: 0 } })\r\n                const response = res.data.payload.map(x => { return { date: x.issue_date, amount: x.total_amount } })\r\n                // console.log([...response, ...additionalResponse])\r\n                const FinalFinalFinalRes = [...response, ...additionalResponse]\r\n                let yearlyReport = []\r\n                for (let i = 0; i < 12; i++) {\r\n                    const filteredArray = FinalFinalFinalRes.filter(e => new Date(e.date).getMonth() === i)\r\n                    const ithMonthsAmount = filteredArray.map(x => x.amount).reduce((a, b) => a + b)\r\n                    const ithMonthsDate = `${new Date(filteredArray[0].date).getFullYear()}/${new Date(filteredArray[0].date).getMonth() + 1}`\r\n                    const finalObj = {\r\n                        date: ithMonthsDate,\r\n                        amount: ithMonthsAmount\r\n                    }\r\n                    yearlyReport.push(finalObj)\r\n                }\r\n                yearlyReport = monthYrs.map(x => {\r\n                    return {\r\n                        date: x,\r\n                        amount: yearlyReport.find(a => a.date === x).amount\r\n                    }\r\n                })\r\n                setrevenueSeries([\r\n                    {\r\n                        name: 'Earning',\r\n                        data: yearlyReport.map(x => x.amount)\r\n                    }\r\n                ])\r\n                setrevenueOptions({\r\n                    chart: {\r\n                        stacked: true,\r\n                        type: 'bar',\r\n                        toolbar: { show: false }\r\n                    },\r\n                    grid: {\r\n                        padding: {\r\n                            top: -20,\r\n                            bottom: -10\r\n                        },\r\n                        yaxis: {\r\n                            lines: { show: false }\r\n                        }\r\n                    },\r\n                    xaxis: {\r\n                        categories: yearlyReport.map(x => x.date),\r\n                        labels: {\r\n                            style: {\r\n                                colors: baseRGBA,\r\n                                fontSize: '0.86rem'\r\n                            }\r\n                        },\r\n                        axisTicks: {\r\n                            show: false\r\n                        },\r\n                        axisBorder: {\r\n                            show: false\r\n                        }\r\n                    },\r\n                    legend: {\r\n                        show: false\r\n                    },\r\n                    dataLabels: {\r\n                        enabled: false\r\n                    },\r\n                    colors: [baseColor],\r\n                    plotOptions: {\r\n                        bar: {\r\n                            columnWidth: '17%',\r\n                            endingShape: 'rounded'\r\n                        },\r\n                        distributed: true\r\n                    },\r\n                    yaxis: {\r\n                        min: 0,\r\n                        max: Math.max(...yearlyReport.map(x => x.amount)),\r\n                        tickAmount: 4,\r\n                        labels: {\r\n                            style: {\r\n                                colors: baseRGBA,\r\n                                fontSize: '0.86rem'\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            } catch (e) {\r\n                console.error(e)\r\n            }\r\n        }).catch(error => {\r\n            console.log(\"GetAllInvoicesByRange\", error)\r\n        })\r\n    }, [])\r\n\r\n    return <Card className='card-revenue-budget'>\r\n        <Row className='mx-0'>\r\n            <Col className='revenue-report-wrapper' md='12' xs='12'>\r\n                <div className='d-sm-flex justify-content-between align-items-center mb-3'>\r\n                    <CardTitle className='mb-50 mb-sm-0'>Revenue Report</CardTitle>\r\n                </div>\r\n                <Chart id='revenue-report-chart' type='bar' height='230' options={revenueOptions} series={revenueSeries} />\r\n            </Col>\r\n        </Row>\r\n    </Card>\r\n}\r\n\r\nexport default Barchart","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, ChevronsRight\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\n\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { formatReadableDate } from '../../../helper'\r\nimport DataTable from 'react-data-table-component'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport { CURRENCY_SYMBOL } from '../../../Configuarables'\r\nimport { useHistory } from 'react-router-dom'\r\nimport InvoiceModal from './InvoiceModal'\r\nimport CommonDataTable from '../../CommonDataTable'\r\n\r\nconst InvoiceTable = () => {\r\n    const history = useHistory()\r\n    const userRole = JSON.parse(localStorage.getItem('userData')).role\r\n    const [pay_amount, setpay_amount] = useState(0)\r\n    const [ispay_amountLoading, setispay_amountLoading] = useState(false)\r\n    const [FilteredInvoices, setFilteredInvoices] = useState([])\r\n    const [InvModal, setInvModal] = useState(false)\r\n    const [payApprvModal, setpayApprvModal] = useState(false)\r\n    const [InvoiceDetails, setInvoiceDetails] = useState({})\r\n    const [tableDataLoading, setTDL] = useState(true)\r\n    const [InvoicesData, setInvoicesData] = useState([])\r\n    const [PageCount, setPageCount] = useState(1)\r\n    const [PageDataCount, setPageDataCount] = useState(5)\r\n    const [showFilteredData, setshowFilteredData] = useState(false)\r\n    const [invoice_id, setinvoice_id] = useState(null)\r\n    const [reset, setReset] = useState(false)\r\n    const [startDate, setstartDate] = useState('')\r\n    const [endDate, setendDate] = useState('')\r\n\r\n    const getAllInvoicesData = (page, limit) => {\r\n        useJwt.GetAllInvoices({ page, limit }).then(res => {\r\n            console.log(\"getAllInvoicesData\", res.data.payload)\r\n            setInvoicesData(res.data.payload)\r\n            setTDL(false)\r\n        }).catch(error => {\r\n            console.log(\"getAllInvoicesData\", error)\r\n            setTDL(false)\r\n            // Error(error)\r\n        })\r\n    }\r\n\r\n    // const onchange = (e) => {\r\n    //     setUserInput({ ...userInput, [e.target.name]: e.target.value })\r\n    // }\r\n\r\n    useEffect(() => {\r\n        getAllInvoicesData(PageCount, PageDataCount)\r\n    }, [reset])\r\n\r\n    // Data table coulumn\r\n    const column = [\r\n        {\r\n            name: 'Invoice ID',\r\n            maxWidth: '120px',\r\n            // sortable: true,\r\n            selector: 'invoice_id'\r\n        },\r\n        {\r\n            name: 'Client Name',\r\n            minWidth: '150px',\r\n            // sortable: true,\r\n            selector: row => row.invoice_info.clientinfo.name\r\n        },\r\n        {\r\n            name: 'Invoices Issue Date',\r\n            minWidth: '220px',\r\n            // sortable: true,\r\n            selector: row => formatReadableDate(row.issue_date)\r\n        },\r\n        {\r\n            name: 'Total Amount',\r\n            minWidth: '150px',\r\n            // sortable: true,\r\n            selector: row => `${CURRENCY_SYMBOL} ${row.total_amount}`\r\n        },\r\n        {\r\n            name: 'Paid Amount',\r\n            minWidth: '150px',\r\n            // sortable: true,\r\n            selector: row => `${CURRENCY_SYMBOL} ${row.pay_amount}`\r\n        },\r\n        {\r\n            name: 'Status',\r\n            minWidth: '180px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                const statusBG = {\r\n                    2: { title: 'Paid', color: 'success' },\r\n                    14: { title: 'Due', color: 'warning' },\r\n                    15: { title: 'Partial pay', color: 'light-warning' },\r\n                    16: { title: 'Pending approval', color: 'light-success' }\r\n                }\r\n                return <Badge color={statusBG[row.statusType.id].color} pill className='px-1'>\r\n                    {statusBG[row.statusType.id].title}\r\n                </Badge>\r\n            }\r\n        },\r\n        {\r\n            name: 'Payment',\r\n            minWidth: '150px',\r\n            // sortable: true,\r\n            selector: row => <Button.Ripple size='sm' color='primary' onClick={(e) => {\r\n                setinvoice_id(row.invoice_id)\r\n                setInvoiceDetails(row)\r\n                setpayApprvModal(true)\r\n            }}>\r\n                <span >Approve</span>\r\n            </Button.Ripple>\r\n        },\r\n        {\r\n            name: 'View',\r\n            maxWidth: '50px',\r\n            // sortable: true,\r\n            selector: row => <span title=\"View\">\r\n                <Eye size={18}\r\n                    color='seagreen'\r\n                    style={{ cursor: 'pointer' }}\r\n                    onClick={(e) => {\r\n                        setInvoiceDetails(row)\r\n                        setInvModal(true)\r\n                    }}\r\n                />\r\n            </span>\r\n        }\r\n    ]\r\n    const handlePagination = (type) => {\r\n        setTDL(true)\r\n        if (type === 'prev') {\r\n            setPageCount(PageCount - 1)\r\n            getAllInvoicesData(PageCount - 1, PageDataCount)\r\n        } else {\r\n            setPageCount(PageCount + 1)\r\n            getAllInvoicesData(PageCount + 1, PageDataCount)\r\n        }\r\n    }\r\n    const handleFilter = e => {\r\n        e.preventDefault()\r\n        setTDL(true)\r\n        useJwt.GetAllInvoicesByRange({\r\n            startDate,\r\n            endDate\r\n        }).then(res => {\r\n            console.log(\"GetAllInvoicesByRange\", res.data.payload)\r\n            setFilteredInvoices(res.data.payload)\r\n            setTDL(false)\r\n            setshowFilteredData(true)\r\n        }).catch(error => {\r\n            Error(error)\r\n            setTDL(false)\r\n        })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        setispay_amountLoading(true)\r\n        console.log({ invoice_id, pay_amount })\r\n        useJwt.ApprovePaymentByAdmin({ invoice_id, pay_amount }).then(res => {\r\n            setispay_amountLoading(false)\r\n            setpayApprvModal(false)\r\n            setReset(!reset)\r\n        }).catch(error => {\r\n            Error(error)\r\n            setispay_amountLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom titleSelect'>\r\n                <CardTitle tag='h4'>Invoices</CardTitle>\r\n                <Form className='d-flex' onSubmit={handleFilter}>\r\n                    <Input required type='month' onChange={e => setstartDate(new Date(e.target.value).toJSON().slice(0, 10).split('-').reverse().join('/'))}></Input>&nbsp;\r\n                    <Input required type='month' onChange={e => setendDate(new Date(e.target.value).toJSON().slice(0, 10).split('-').reverse().join('/'))}></Input>&nbsp;\r\n                    <Button.Ripple size='sm' color='primary' type='submit' className='pr-1' style={{ minWidth: '80px' }}>\r\n                        <span >Filter</span>\r\n                    </Button.Ripple>\r\n                </Form>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    {showFilteredData ? <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={FilteredInvoices} TableDataLoading={tableDataLoading} />\r\n                    </Col> : <Col sm=\"12\">\r\n                        <DataTable\r\n                            noHeader\r\n                            highlightOnHover\r\n                            data={InvoicesData}\r\n                            columns={column}\r\n                            className='react-dataTable'\r\n                            progressPending={tableDataLoading}\r\n                            sortIcon={<ChevronDown size={10} />}\r\n                            progressComponent={<Spinner color='primary' />}\r\n                            responsive={true}\r\n                        />\r\n                        <div className='text-right'>\r\n                            <Button.Ripple size='sm' disabled={PageCount === 1} className='mt-1' color='secondary' onClick={e => handlePagination('prev')}>\r\n                                <ChevronsLeft color='white' size={15} />\r\n                            </Button.Ripple>&nbsp;&nbsp;&nbsp;&nbsp;<Button.Ripple size='sm' disabled={!InvoicesData.length} className='mt-1' color='secondary' onClick={e => handlePagination('next')}>\r\n                                <ChevronsRight color='white' size={15} />\r\n                            </Button.Ripple>\r\n                        </div>\r\n                    </Col>}\r\n                </Row>\r\n            </CardBody>\r\n            {Object.keys(InvoiceDetails).length ? <InvoiceModal InvoiceDetails={InvoiceDetails} InvModal={InvModal} setInvModal={setInvModal} /> : ''}\r\n            <Modal\r\n                isOpen={payApprvModal}\r\n                toggle={() => setpayApprvModal(!payApprvModal)}\r\n                className={`modal-dialog-centered`}\r\n            >\r\n                <ModalHeader toggle={() => setpayApprvModal(!payApprvModal)}>Enter The Amount You Received</ModalHeader>\r\n                <ModalBody>\r\n                    <Form className=\"row pt-1\" style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                        <Col md='12' >\r\n                            <FormGroup>\r\n                                <Input\r\n                                    required\r\n                                    type=\"number\"\r\n                                    min={1}\r\n                                    id='pay_amount'\r\n                                    name=\"pay_amount\"\r\n                                    placeholder=\"amount\"\r\n                                    value={pay_amount}\r\n                                    onChange={e => setpay_amount(e.target.value)}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md=\"12\" className='text-center'>\r\n                            <Button.Ripple className='mt-2' color='primary' type=\"submit\" disabled={ispay_amountLoading}>\r\n                                {ispay_amountLoading ? <Spinner size='sm' /> : 'Submit'}\r\n                            </Button.Ripple>\r\n                        </Col>\r\n                    </Form>\r\n                </ModalBody>\r\n            </Modal >\r\n        </Card >\r\n    )\r\n}\r\n\r\nexport default InvoiceTable","export default __webpack_public_path__ + \"static/media/EAdmin.e7420970.svg\";","import React, { useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, ChevronsLeft, User\r\n} from 'react-feather'\r\nimport Avatar from '@components/avatar'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport medal from '@src/assets/images/illustration/badge.svg'\r\nimport Media from 'reactstrap/lib/Media'\r\nimport CardText from 'reactstrap/lib/CardText'\r\nimport classnames from 'classnames'\r\nimport Barchart from './DashboardUI/Barchart'\r\nimport InvoiceTable from './DashboardUI/InvoiceTable'\r\nimport { CURRENCY_SYMBOL } from '../../Configuarables.js'\r\nimport PropertyBadge from '../../../assets/images/dashboardBadges/property.svg'\r\nimport branchBadge from '../../../assets/images/dashboardBadges/branch.svg'\r\nimport contractorBadge from '../../../assets/images/dashboardBadges/contractor.svg'\r\nimport landlordBadge from '../../../assets/images/dashboardBadges/landlord.svg'\r\nimport tenantBadge from '../../../assets/images/dashboardBadges/tenant.svg'\r\nimport EAdmin from '../../../assets/images/dashboardBadges/EAdmin.svg'\r\n\r\nconst Dashboard = () => {\r\n    const [InvoiceDetails, setInvoiceDetails] = useState({})\r\n    const [total_revenue, setTotal_revenue] = useState(0)\r\n    const [counter, setCounter] = useState({\r\n        active_estate_admin: 0,\r\n        active_estate_manager: 0,\r\n        block_estate_admin: 0,\r\n        block_estate_manager: 0,\r\n        contractor: 0,\r\n        land_lord: 0,\r\n        tenant: 0,\r\n        due_amount: 0,\r\n        received_amount: 0\r\n    })\r\n    useEffect(() => {\r\n        useJwt.userCounter().then(res => {\r\n            // console.log(\"userCounter\", res.data.payload)\r\n            const { active_estate_admin, active_estate_manager, block_estate_admin, block_estate_manager, contractor, land_lord, tenant, total_revenue, due_amount, received_amount } = res.data.payload\r\n            setTotal_revenue(total_revenue)\r\n            setCounter({ active_estate_admin, active_estate_manager, block_estate_admin, block_estate_manager, contractor, land_lord, tenant, due_amount, received_amount })\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    const data = [\r\n        {\r\n            title: Number(counter.active_estate_admin) + Number(counter.block_estate_admin),\r\n            subtitle: 'Estate Admins',\r\n            color: 'light-primary',\r\n            icon: EAdmin\r\n        },\r\n        {\r\n            title: Number(counter.active_estate_manager) + Number(counter.block_estate_manager),\r\n            subtitle: 'Branch Managers',\r\n            color: 'light-warning',\r\n            icon: branchBadge\r\n        },\r\n        {\r\n            title: counter.contractor,\r\n            subtitle: 'Contractors',\r\n            color: 'light-info',\r\n            icon: contractorBadge\r\n        },\r\n        {\r\n            title: counter.tenant,\r\n            subtitle: 'Tenants',\r\n            color: 'light-danger',\r\n            icon: tenantBadge\r\n        },\r\n        {\r\n            title: counter.land_lord,\r\n            subtitle: 'Landlords',\r\n            color: 'light-success',\r\n            icon: landlordBadge\r\n        }\r\n    ]\r\n    return (\r\n        <>\r\n\r\n            <Row className='match-height'>\r\n                <Col md='4'>\r\n                    <Card className='card-congratulations-medal'>\r\n                        <CardBody>\r\n                            <h5>Total Revenue</h5>\r\n                            {/* <CardText className='font-small-3'>You have won gold medal</CardText> */}\r\n                            <h3 className='mb-75 mt-2 pt-50'>\r\n                                <a href='/' onClick={e => e.preventDefault()}>\r\n                                    {CURRENCY_SYMBOL} {total_revenue}\r\n                                </a>\r\n                            </h3>\r\n                            {/* <Button.Ripple color='primary'>View Sales</Button.Ripple> */}\r\n                            <img className='congratulation-medal' src={medal} alt='Medal Pic' height={80} />\r\n                            <Row className='mt-3'>\r\n                                <Col md='6'>\r\n                                    <p><b>Received</b></p>\r\n                                    <p className=\"text-success\">\r\n                                        <b>{CURRENCY_SYMBOL} {counter.received_amount}</b>\r\n                                    </p>\r\n                                </Col>\r\n                                <Col md='6'>\r\n                                    <p><b>Due Amount</b></p>\r\n                                    <p className=\"text-warning\">\r\n                                        <b> {CURRENCY_SYMBOL} {counter.due_amount}</b>\r\n                                    </p>\r\n                                </Col>\r\n                            </Row>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n\r\n                <Col md='8'>\r\n                    <Card className='card-statistics'>\r\n                        <CardHeader>\r\n                            <CardTitle tag='h5'>Users</CardTitle>\r\n                            {/* <CardText className='card-text font-small-2 mr-25 mb-0'>Updated 1 month ago</CardText> */}\r\n                        </CardHeader>\r\n                        <CardBody className='px-1'>\r\n                            <div className='row'>{\r\n                                data.map((item, index) => {\r\n                                    return (\r\n                                        <Col sm='4' key={index}>\r\n                                            <Media>\r\n                                                {/* <Avatar color={item.color} icon={item.icon} className='mb-1 mr-1' /> */}\r\n                                                <img src={item.icon} className='img-fluid m-1' />\r\n                                                <Media className='my-auto' body>\r\n                                                    <h4 className='font-weight-bolder mb-0'>{item.title}</h4>\r\n                                                    <CardText className='font-small-2 mb-0'>{item.subtitle}</CardText>\r\n                                                </Media>\r\n                                            </Media>\r\n                                        </Col>\r\n                                    )\r\n                                })\r\n                            }</div>\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            <Barchart />\r\n            <InvoiceTable />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 15 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={15}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable","const options = { year: 'numeric', month: 'long', day: 'numeric'}\r\n\r\nexport const formatReadableDate = (date) => {\r\n    const time = new Date(date).getTime()\r\n    let minutes = Math.floor((time / (1000 * 60)) % 60)\r\n    let hours = Math.floor((time / (1000 * 60 * 60)) % 24)\r\n\r\n    hours = (hours < 10) ? `0${hours}` : hours\r\n    minutes = (minutes < 10) ? `0${minutes}` : minutes\r\n\r\n    //   console.log(msToTime(new Date(\"2021-08-27T15:05:49.870Z\").getTime()))\r\n    const finaldate = new Date(date).toLocaleDateString(undefined, options)\r\n    const finalTime = `${hours} : ${minutes}`\r\n    return `${finaldate} , ${finalTime}`\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/badge.7bf0a10d.svg\";"],"sourceRoot":""}