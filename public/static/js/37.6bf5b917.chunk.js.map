{"version":3,"sources":["views/tables/data-tables/basic/AdminComponent/BulkNotification/NotificationGroup/EditModal.js","views/tables/data-tables/basic/AdminComponent/BulkNotification/NotificationGroup/PendingNotificationGroupList.js","views/tables/data-tables/basic/AdminComponent/BulkNotification/NotificationGroup/MyPendingNotificationGroupList.js","views/tables/data-tables/basic/AdminComponent/BulkNotification/NotificationGroup/NotificationGroupList.js","views/viewhelper.js","views/tables/data-tables/basic/AdminComponent/ClientSideDataTable.js"],"names":["EditModal","modal","toggleModal","groupInfo","setGroupInfo","setReset","resetData","useState","editPointRuleloading","seteditPointRuleloading","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Form","style","width","onSubmit","e","preventDefault","id","group_name","data","group_id","action_id","useJwt","notificationEditDelete","then","res","console","log","Success","catch","err","Error","autoComplete","Col","sm","FormGroup","Label","for","Input","type","name","value","onChange","target","required","placeholder","Button","Ripple","color","disabled","marginTop","Spinner","size","MySwal","withReactContent","Swal","PendingNotificationGroupList","pendingGroupList","setPendingGroupList","Array2D","JSON","parse","localStorage","getItem","map","x","submenu","y","subMenuIDs","concat","TableDataLoading","history","useHistory","user","handlePoPupActions","status","message","fire","title","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","reject_msg","NotificationApproveRejectDelete","filter","response","buttonsStyling","isLoading","result","isConfirmed","column","minWidth","sortable","cell","row","index","selector","includes","cursor","onClick","role","push","Card","CardHeader","CardTitle","tag","CardBody","Row","md","TableData","MyPendingNotificationGroupList","myPendingGroupList","NotificationGroupList","setTableDataLoading","groupList","setGroupList","setMyPendingGroupList","setModal","useEffect","getNotificationGroupList","payload","GroupList","approveGroupList","activeTab","setActiveTab","tab","Nav","pills","NavItem","NavLink","active","TabContent","TabPane","tabId","Link","to","marginRight","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success","CommonDataTable","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive"],"mappings":"8fA4EeA,EA9DG,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,MAAOC,EAAgE,EAAhEA,YAAaC,EAAmD,EAAnDA,UAAWC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACxE,EAAwDC,oBAAS,GAAjE,mBAAOC,EAAP,KAA6BC,EAA7B,KA2BA,OACI,eAACC,EAAA,EAAD,CAAOC,OAAQV,EAAOW,OAAQV,EAAaW,UAAU,wBAArD,UACI,cAACC,EAAA,EAAD,CAAaF,OAAQV,EAArB,oCACA,cAACa,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAMH,UAAU,MAAMI,MAAO,CAAEC,MAAO,QAAUC,SAzB3C,SAACC,GACdA,EAAEC,iBACF,IAAQC,EAAmBnB,EAAnBmB,GAAIC,EAAepB,EAAfoB,WACZd,GAAwB,GACxB,IAAMe,EAAO,CACTC,SAAUH,EACVI,UAAW,EACXH,cAEJI,IAAOC,uBAAuBJ,GAAMK,MAAK,SAAAC,GACrCzB,GAAUC,GACVG,GAAwB,GACxBsB,QAAQC,IAAIF,GACZ5B,IACA+B,YAAQH,MACTI,OAAM,SAAAC,GACL1B,GAAwB,GACxB2B,YAAMD,GACNJ,QAAQC,IAAIG,OAO4DE,aAAa,MAAjF,UACI,cAACC,EAAA,EAAD,CAAKC,GAAG,IAAR,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAOC,IAAI,aAAX,wBACA,cAACC,EAAA,EAAD,CAAOC,KAAK,OACRC,KAAK,aACLvB,GAAG,aACHwB,MAAO3C,EAAUoB,WACjBwB,SArCP,SAAC3B,GAClBhB,EAAa,2BAAKD,GAAN,kBAAkBiB,EAAE4B,OAAOH,KAAOzB,EAAE4B,OAAOF,UAqC/BG,UAAQ,EACRC,YAAY,WAKxB,cAACZ,EAAA,EAAD,CAAKC,GAAG,KAAK1B,UAAU,cAAvB,SAEQL,EAAuB,eAAC2C,EAAA,EAAOC,OAAR,CAAeC,MAAM,UAAUxC,UAAU,OAAOyC,UAAQ,EAACrC,MAAO,CAAEsC,UAAW,QAA7E,UACnB,cAACC,EAAA,EAAD,CAASH,MAAM,QAAQI,KAAK,OAC5B,sBAAM5C,UAAU,QAAhB,2BACe,cAACsC,EAAA,EAAOC,OAAR,CAAevC,UAAU,OAAOwC,MAAM,UAAUT,KAAK,SAAS3B,MAAO,CAAEsC,UAAW,QAAlF,SACf,uD,6BCvD1BG,EAASC,IAAiBC,KAqIjBC,EAlIsB,SAAC,GAA+C,IAAD,EAA5CC,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,oBAEhDC,GADgBC,KAAKC,MAAMC,aAAaC,QAAQ,mBAAqB,IAC7CC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAAQF,KAAI,SAAAG,GAAC,OAAIA,EAAElD,SACtDmD,GAAa,MAAGC,OAAH,oBAAaV,IAEhC,EAAgDzD,oBAAS,GAAzD,mBAAOoE,EAAP,KACA,GADA,KAC8BpE,oBAAS,IAAvC,mBACMqE,GADN,UACgBC,eACVC,EAAOb,KAAKC,MAAMC,aAAaC,QAAQ,aAEvCW,EAAqB,SAACzD,EAAI0D,EAAQC,GACpC,OAAOvB,EAAOwB,KAAP,aACHC,MAAOF,EACPG,KAAK,mCACLC,KAAM,UACNC,mBAAmB,EACnBC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAmB,MACnBC,YAAa,CACTC,cAAe,kBACfC,aAAc,uBAElBC,qBAAqB,EACrBC,WAAY,WACR,IAAMtE,EAAO,CACTC,SAAUH,EACVI,UAAWsD,EACXe,WAAY,IAEhB,OAAOpE,IAAOqE,gCAAgCxE,GAAMK,MAAK,SAAAC,GACrDG,YAAQH,GACRC,QAAQC,IAAIF,GACZiC,EAAoBD,EAAiBmC,QAAO,SAAA3B,GAAC,OAAIA,EAAEhD,KAAOA,SAC3DY,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,EAAI+D,UAChB9D,YAAMD,OAGdgE,gBAAgB,GA5Bb,qBA6BgB,kBAAOvC,IAAKwC,gBAChCvE,MAAK,SAAUwE,GACVA,EAAOC,gBAMbC,EAAS,CACX,CACI1D,KAAM,KACN2D,SAAU,OACVC,UAAU,EACVC,KAAM,SAACC,EAAKC,GAAN,OAAgBA,EAAQ,IAElC,CACI/D,KAAM,aACN2D,SAAU,QACVC,UAAU,EACVI,SAAU,mBAEd,CACIhE,KAAM,aACN2D,SAAU,QACVC,UAAU,EACVI,SAAU,cAEd,CACIhE,KAAM,SACN2D,SAAU,QAEVK,SAAU,SAAAF,GACN,OAAO,mCACFlC,EAAWqC,SAAS,KAAO,qCACxB,sBAAM3B,MAAM,OAAZ,SACI,cAAC,IAAD,CAAK1B,KAAM,GACPJ,MAAM,OACNpC,MAAO,CAAE8F,OAAQ,WACjBC,QAAS,SAAC5F,GACN,MAAkB,WAAd0D,EAAKmC,KACErC,EAAQsC,KAAR,0CAAgDP,EAAIrF,GAApD,sBAEAsD,EAAQsC,KAAR,oCAA0CP,EAAIrF,GAA9C,2BATC,WAcxB,sBAAM6D,MAAM,UAAZ,SACI,cAAC,IAAD,CAAa1B,KAAM,GACfJ,MAAM,OACNpC,MAAO,CAAE8F,OAAQ,WACjBC,QAAS,SAAC5F,GAAD,OAAO2D,EAAmB4B,EAAIrF,GAAI,EAAG,gCAlB9B,WAqBxB,sBAAM6D,MAAM,SAAZ,SACI,cAAC,IAAD,CAAS1B,KAAM,GACXJ,MAAM,SACNpC,MAAO,CAAE8F,OAAQ,WACjBC,QAAS,SAAC5F,GAAD,OAAO2D,EAAmB4B,EAAIrF,GAAI,EAAG,+BAzB9B,WA4BxB,sBAAM6D,MAAM,SAAZ,SACI,cAAC,IAAD,CAAO1B,KAAM,GACTJ,MAAM,MACNpC,MAAO,CAAE8F,OAAQ,WACjBC,QAAS,SAAC5F,GAAD,OAAO2D,EAAmB4B,EAAIrF,GAAI,EAAG,uCAS1E,OACI,eAAC6F,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYvG,UAAU,gBAAtB,SACI,cAACwG,EAAA,EAAD,CAAWC,IAAI,KAAf,2CAEJ,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAAClF,EAAA,EAAD,CAAKmF,GAAG,KAAR,SACI,cAAC,IAAD,CAAiBlB,OAAQA,EAAQmB,UAAW5D,EAAkBa,iBAAkBA,cC5DzFgD,GAnEAhE,IAAiBC,KAGO,SAAC,GAA0B,IAAzBgE,EAAwB,EAAxBA,mBACrC,EAAgDrH,oBAAS,GAAzD,mBAAOoE,EAAP,KACA,GADA,KAC8BpE,oBAAS,IAAvC,mBACMqE,GADN,UACgBC,eACVC,EAAOb,KAAKC,MAAMC,aAAaC,QAAQ,aACvCmC,EAAS,CACX,CACI1D,KAAM,KACN2D,SAAU,OACVC,UAAU,EACVC,KAAM,SAACC,EAAKC,GAAN,OAAgBA,EAAQ,IAElC,CACI/D,KAAM,WACN2D,SAAU,QACVC,UAAU,EACVI,SAAU,MAEd,CACIhE,KAAM,aACN2D,SAAU,QACVC,UAAU,EACVI,SAAU,cAEd,CACIhE,KAAM,SACN2D,SAAU,QAEVK,SAAU,SAAAF,GACN,OAAO,mCACH,sBAAMxB,MAAM,OAAZ,SACI,cAAC,IAAD,CAAK1B,KAAM,GACPJ,MAAM,OACNpC,MAAO,CAAE8F,OAAQ,WACjBC,QAAS,SAAC5F,GACN,MAAkB,WAAd0D,EAAKmC,KACErC,EAAQsC,KAAR,0CAAgDP,EAAIrF,GAApD,sBAEAsD,EAAQsC,KAAR,oCAA0CP,EAAIrF,GAA9C,gCAUvC,OACI,eAAC6F,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYvG,UAAU,gBAAtB,SACI,cAACwG,EAAA,EAAD,CAAWC,IAAI,KAAf,8CAEJ,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAAClF,EAAA,EAAD,CAAKmF,GAAG,KAAR,SACI,cAAC,IAAD,CAAiBlB,OAAQA,EAAQmB,UAAWE,EAAoBjD,iBAAkBA,eCzDpGjB,EAASC,IAAiBC,KAyNjBiE,UAnNe,WAAO,IAAD,EAE1B7D,GADgBC,KAAKC,MAAMC,aAAaC,QAAQ,mBAAqB,IAC7CC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAAQF,KAAI,SAAAG,GAAC,OAAIA,EAAElD,SACtDmD,GAAa,MAAGC,OAAH,oBAAaV,IAG1BY,EAAUC,cAChB,EAAgDtE,oBAAS,GAAzD,mBAAOoE,EAAP,KAAyBmD,EAAzB,KACA,EAA8BvH,oBAAS,GAAvC,mBAAOD,EAAP,KAAkBD,EAAlB,KACA,EAAkCE,mBAAS,IAA3C,mBAAOwH,EAAP,KAAkBC,EAAlB,KACA,EAAoDzH,mBAAS,IAA7D,mBAAOqH,EAAP,KAA2BK,EAA3B,KACA,EAAgD1H,mBAAS,IAAzD,mBAAOuD,EAAP,KAAyBC,GAAzB,KACA,GAAkCxD,mBAAS,IAA3C,qBAAOJ,GAAP,MAAkBC,GAAlB,MAEA,GAA0BG,oBAAS,GAAnC,qBAAON,GAAP,MAAciI,GAAd,MAEMpD,GAAOb,KAAKC,MAAMC,aAAaC,QAAQ,aAE7C+D,qBAAU,WACNxG,IAAOyG,2BAA2BvG,MAAK,SAAAC,GACnCC,QAAQC,IAAIF,GACZkG,EAAalG,EAAIN,KAAK6G,QAAQC,WAC9BL,EAAsBnG,EAAIN,KAAK6G,QAAQT,oBACvC7D,GAAoBjC,EAAIN,KAAK6G,QAAQE,kBACrCT,GAAoB,MACrB5F,OAAM,SAAAC,GACLC,YAAMD,GACNJ,QAAQC,IAAIG,GACZ2F,GAAoB,QAEzB,CAACxH,IACJ,IAuCMiG,GAAS,CACX,CACI1D,KAAM,KACN2D,SAAU,OACVC,UAAU,EACVC,KAAM,SAACC,EAAKC,GAAN,OAAgBA,EAAQ,IAElC,CACI/D,KAAM,aACN2D,SAAU,QACVC,UAAU,EACVI,SAAU,cAEd,CACIhE,KAAM,aACN2D,SAAU,QACVC,UAAU,EACVI,SAAU,mBAEd,CACIhE,KAAM,cACN2D,SAAU,QACVC,UAAU,EACVI,SAAU,eAEd,CACIhE,KAAM,SACN2D,SAAU,QAEVK,SAAU,SAAAF,GACN,OAAO,qCACH,sBAAMxB,MAAM,OAAZ,SACKV,EAAWqC,SAAS,KAAqB,WAAdhC,GAAKmC,KAAoB,mCAAE,cAAC,IAAD,CAAKxD,KAAM,GAC9DJ,MAAM,OACNpC,MAAO,CAAE8F,OAAQ,WACjBC,QAAS,SAAC5F,GACN,MAAkB,WAAd0D,GAAKmC,KACErC,EAAQsC,KAAR,0CAAgDP,EAAIrF,GAApD,sBAEAsD,EAAQsC,KAAR,oCAA0CP,EAAIrF,GAA9C,2BAGX,KAZT,WAcH,sBAAO6D,MAAM,OAAb,SAEQV,EAAWqC,SAAS,KAAqB,WAAdhC,GAAKmC,KAAoB,cAAC,IAAD,CAAMxD,KAAM,GAC5DJ,MAAM,QACNpC,MAAO,CAAE8F,OAAQ,WACjBC,QAAS,SAAC5F,GACNhB,GAAauG,GACbuB,IAAS,MAEZ,KAvBV,WA0BH,sBAAM/C,MAAM,SAAZ,SACKV,EAAWqC,SAAS,KAAqB,WAAdhC,GAAKmC,KAAoB,cAAC,IAAD,CAAOxD,KAAM,GAC9DJ,MAAM,MACNpC,MAAO,CAAE8F,OAAQ,WACjBC,QAAS,SAAC5F,GAAD,OAnGLE,EAmG+BqF,EAAIrF,GAnG/B0D,EAmGmC,EAAG2B,EAAIpF,WAnGvB0D,EAmGmC,yBAjG3EvB,EAAOwB,KAAP,aACHC,MAAOF,EACPG,KAAK,mCACLC,KAAM,UACNC,mBAAmB,EACnBC,gBAAgB,EAChBC,kBAAkB,EAClBC,kBAAmB,MACnBC,YAAa,CACTC,cAAe,kBACfC,aAAc,uBAElBC,qBAAqB,EACrBC,WAAY,WACR,IAAMtE,EAAO,CACTC,SAAUH,EACVI,UAAWsD,GAGf,OAAOrD,IAAOC,uBAAuBJ,GAAMK,MAAK,SAAAC,GAC5CG,YAAQH,GAERC,QAAQC,IAAIF,MACbI,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,EAAI+D,UAChB9D,YAAMD,OAGdgE,gBAAgB,GA5Bb,qBA6BgB,kBAAOvC,IAAKwC,gBAChCvE,MAAK,SAAUwE,GACVA,EAAOC,eAjCQ,IAAChF,EAAI0D,EAAmBC,KAoG1B,WAMzB,GAAkC1E,mBAAS,KAA3C,qBAAOiI,GAAP,MAAkBC,GAAlB,MAGM7H,GAAS,SAAA8H,GAAG,OAAID,GAAaC,IAEnC,OACI,cAACvB,EAAA,EAAD,UACI,eAACI,EAAA,EAAD,CAAU1G,UAAU,OAApB,UACI,eAAC8H,EAAA,EAAD,CAAKC,OAAK,EAAV,UACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASC,OAAsB,MAAdP,GAAmBxB,QAAS,kBAAMpG,GAAO,MAA1D,SACI,sBAAMC,UAAU,iCAAhB,wBAGR,cAACgI,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAASC,OAAsB,MAAdP,GAAmBxB,QAAS,kBAAMpG,GAAO,MAA1D,SACI,sBAAMC,UAAU,iCAAhB,mCAGP4D,EAAWqC,SAAS,KAAqB,WAAdhC,GAAKmC,KAAoB,cAAC4B,EAAA,EAAD,UACjD,cAACC,EAAA,EAAD,CAASC,OAAsB,MAAdP,GAAmBxB,QAAS,kBAAMpG,GAAO,MAA1D,SACI,sBAAMC,UAAU,iCAAhB,gCAEK,MAEjB,eAACmI,EAAA,EAAD,CAAYR,UAAWA,GAAvB,UACI,cAACS,EAAA,EAAD,CAASC,MAAM,IAAf,SACI,eAAC/B,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAYvG,UAAU,gBAAtB,UACI,cAACwG,EAAA,EAAD,CAAWC,IAAI,KAAf,iCAEkB,WAAdxC,GAAKmC,KAAoB,cAAC9D,EAAA,EAAOC,OAAR,CAAevC,UAAU,OAAOwC,MAAM,UAAUiE,IAAK6B,IAAMC,GAAG,kCAA9D,SACrB,sBAAKvI,UAAU,4BAAf,UACI,cAAC,IAAD,CAAM4C,KAAM,GAAIxC,MAAO,CAAEoI,YAAa,SACtC,qDAEW,mCAAG5E,EAAWqC,SAAS,KAAO,cAAC3D,EAAA,EAAOC,OAAR,CAAevC,UAAU,OAAOwC,MAAM,UAAUiE,IAAK6B,IAAMC,GAAG,4BAA9D,SAC7C,sBAAKvI,UAAU,4BAAf,UACI,cAAC,IAAD,CAAM4C,KAAM,GAAIxC,MAAO,CAAEoI,YAAa,SACtC,0DAMhB,eAAC9B,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAAClF,EAAA,EAAD,CAAKmF,GAAG,KAAR,SACI,cAAC,IAAD,CAAiBlB,OAAQA,GAAQmB,UAAWK,EAAWpD,iBAAkBA,QAGjF,cAAC,EAAD,CACIzE,YA9KZ,kBAAMgI,IAAUjI,KA+KJA,MAAOA,GACPK,UAAWA,EACXD,SAAUA,EACVF,UAAWA,GACXC,aAAcA,aAK9B,cAAC6I,EAAA,EAAD,CAASC,MAAM,IAAf,SACI,cAAC,EAAD,CAAoBtB,mBAAoBA,MAE5C,cAACqB,EAAA,EAAD,CAASC,MAAM,IAAf,SACI,cAAC,EAAD,CAAkBpF,iBAAkBA,EAAkBC,oBAAqBA,iB,iCC7NnG,wHAGiB3B,EAAQ,SAACD,GAClB,IACI,IAAMf,EAAIe,EAAI+D,SACG,MAAb9E,EAAE4D,QAA+B,MAAb5D,EAAE4D,QAA+B,MAAb5D,EAAE4D,QAA+B,MAAb5D,EAAE4D,OAC9DsE,IAAMC,MAAMnI,EAAEI,KAAKyD,QAAS,CAC5BuE,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGVT,IAAMC,MAAM,kCAAmC,CAC3CC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGpB,MAAO3I,GACLkI,IAAMC,MAAM,+BAAgC,CACxCC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,MAMTC,EAAe,SAAC7H,GACzB,IACA,IAAMf,EAAIe,EAAI+D,SACG,MAAb9E,EAAE4D,QAA+B,MAAb5D,EAAE4D,QAA+B,MAAb5D,EAAE4D,QAC1CsE,IAAMC,MAAMnI,EAAEI,KAAKyI,OAAS7I,EAAEI,KAAKyI,OAAOC,OAAOC,KAAK/I,EAAEI,KAAKyI,QAAQ,IAAM7I,EAAEI,KAAKyD,QAAS,CAC3FuE,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,IAGZ,MAAO3I,GACLkI,IAAMC,MAAM,+BAAgC,CACxCC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,MAIT9H,EAAU,SAACiE,GACpB,IAAMjB,EAAUiB,EAAS1E,KAAKyD,SAAW,UACzCqE,IAAMc,QAAQnF,EAAS,CACnBuE,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,M,0HCXPM,IAtDS,SAAC,GAA6C,IAA3C9D,EAA0C,EAA1CA,OAAQmB,EAAkC,EAAlCA,UAAW/C,EAAuB,EAAvBA,iBAC1C,EAAsCpE,mBAAS,GAA/C,mBAAO+J,EAAP,KAAoBC,EAApB,KA+BA,OACI,cAAC,WAAD,UACI,cAAC,IAAD,CACIC,UAAQ,EACRC,YAAU,EAEVC,QAASnE,EACToE,kBAAmB,GACnB9J,UAAU,kBACV+J,SAAU,cAAC,IAAD,CAAanH,KAAM,KAC7BoH,sBAAuBP,EAAc,EACrCQ,oBAnCa,wBACrB,cAAC,KAAD,GACIC,cAAc,GACdC,UAAU,GACVC,UAAWX,EACXY,aAAc,SAAAC,GAAI,OATD,SAAAA,GACrBZ,EAAeY,EAAKC,UAQMC,CAAiBF,IACvCG,UAAW5D,EAAU6D,OAAS7D,EAAU6D,OAAS,GAAK,EACtDC,WAAW,MACXC,mBAAoB,EACpBC,qBAAsB,EACtBC,gBAAgB,SAChBC,cAAc,YACdC,eAAe,YACfC,mBAAmB,YACnBC,kBAAkB,YAClBC,cAAc,iBACdC,kBAAkB,iBAClBC,sBAAsB,YACtBC,kBAAkB,aAjBtB,+BAkBmB,aAlBnB,mCAmBuB,aAnBvB,mCAoBuB,8FApBvB,KAmCQ3K,KAAMkG,EACN0E,gBAAiBzH,EACjB0H,kBAAmB,cAAC,IAAD,CAAShJ,MAAM,YAClCiJ,YAAY","file":"static/js/37.6bf5b917.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../../viewhelper'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\n\r\nconst EditModal = ({ modal, toggleModal, groupInfo, setGroupInfo, setReset, resetData }) => {\r\n    const [editPointRuleloading, seteditPointRuleloading] = useState(false)\r\n\r\n    const handleChange = (e) => {\r\n        setGroupInfo({ ...groupInfo, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { id, group_name } = groupInfo\r\n        seteditPointRuleloading(true)\r\n        const data = {\r\n            group_id: id,\r\n            action_id: 2,\r\n            group_name\r\n        }\r\n        useJwt.notificationEditDelete(data).then(res => {\r\n            setReset(!resetData)\r\n            seteditPointRuleloading(false)\r\n            console.log(res)\r\n            toggleModal()\r\n            Success(res)\r\n        }).catch(err => {\r\n            seteditPointRuleloading(false)\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Edit Notificaion Group</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row\" style={{ width: '100%' }} onSubmit={onSubmit} autoComplete=\"off\">\r\n                    <Col sm=\"6\" >\r\n                        <FormGroup>\r\n                            <Label for=\"group_name\">Group Name</Label>\r\n                            <Input type=\"text\"\r\n                                name=\"group_name\"\r\n                                id='group_name'\r\n                                value={groupInfo.group_name}\r\n                                onChange={handleChange}\r\n                                required\r\n                                placeholder=\"0\"\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                    <Col sm=\"12\" className='text-center'>\r\n                        {\r\n                            editPointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\r\n                                <Spinner color='white' size='sm' />\r\n                                <span className='ml-50'>Loading...</span>\r\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\r\n                                <span >Update</span>\r\n                            </Button.Ripple>\r\n                        }\r\n                    </Col>\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    CheckSquare, XSquare, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../../ClientSideDataTable'\r\n\r\nconst PendingNotificationGroupList = ({ pendingGroupList, setPendingGroupList }) => {\r\n    const AssignedMenus = JSON.parse(localStorage.getItem('AssignedMenus')) || []\r\n    const Array2D = AssignedMenus.map(x => x.submenu.map(y => y.id))\r\n    const subMenuIDs = [].concat(...Array2D)\r\n\r\n    const [TableDataLoading, setTableDataLoading] = useState(false)\r\n    const [resetData, setReset] = useState(true)\r\n    const history = useHistory()\r\n    const user = JSON.parse(localStorage.getItem('userData'))\r\n\r\n    const handlePoPupActions = (id, status, message) => {\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                const data = {\r\n                    group_id: id,\r\n                    action_id: status,\r\n                    reject_msg: \"\"\r\n                }\r\n                return useJwt.NotificationApproveRejectDelete(data).then(res => {\r\n                    Success(res)\r\n                    console.log(res)\r\n                    setPendingGroupList(pendingGroupList.filter(x => x.id !== id))\r\n                }).catch(err => {\r\n                    console.log(err.response)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'SL',\r\n            minWidth: '20px',\r\n            sortable: true,\r\n            cell: (row, index) => index + 1  //RDT provides index by default\r\n        },\r\n        {\r\n            name: 'Created By',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'created_by_name'\r\n        },\r\n        {\r\n            name: 'Group Name',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'group_name'\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    {subMenuIDs.includes(37) && <>\r\n                        <span title=\"View\">\r\n                            <Eye size={15}\r\n                                color='blue'\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={(e) => {\r\n                                    if (user.role === 'vendor') {\r\n                                        return history.push(`/detailsNotificationGroupVendor/${row.id}?is_pending=false`)\r\n                                    } else {\r\n                                        return history.push(`/detailsNotificationGroup/${row.id}?is_pending=false`)\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </span>&nbsp;&nbsp;\r\n                        <span title=\"Approve\">\r\n                            <CheckSquare size={15}\r\n                                color='teal'\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={(e) => handlePoPupActions(row.id, 1, 'Do you want to approve?')}\r\n                            />\r\n                        </span>&nbsp;&nbsp;\r\n                        <span title=\"Reject\">\r\n                            <XSquare size={15}\r\n                                color='orange'\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={(e) => handlePoPupActions(row.id, 2, 'Do you want to reject?')}\r\n                            />\r\n                        </span>&nbsp;&nbsp;\r\n                        <span title=\"Delete\">\r\n                            <Trash size={15}\r\n                                color='red'\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={(e) => handlePoPupActions(row.id, 3, 'Do you want to reject?')}\r\n                            />\r\n                        </span>\r\n                    </>}\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>Pending Notification Groups</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={pendingGroupList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default PendingNotificationGroupList","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Swal from 'sweetalert2'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../../ClientSideDataTable'\r\n\r\nconst MyPendingNotificationGroupList = ({myPendingGroupList}) => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(false)\r\n    const [resetData, setReset] = useState(true)\r\n    const history = useHistory()\r\n    const user = JSON.parse(localStorage.getItem('userData'))\r\n    const column = [\r\n        {\r\n            name: 'SL',\r\n            minWidth: '20px',\r\n            sortable: true,\r\n            cell: (row, index) => index + 1  //RDT provides index by default\r\n        },\r\n        {\r\n            name: 'Group ID',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'id'\r\n        },\r\n        {\r\n            name: 'Group Name',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'group_name'\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"View\">\r\n                        <Eye size={15}\r\n                            color='blue'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                if (user.role === 'vendor') {\r\n                                    return history.push(`/detailsNotificationGroupVendor/${row.id}?is_pending=false`)\r\n                                } else {\r\n                                    return history.push(`/detailsNotificationGroup/${row.id}?is_pending=false`)\r\n                                }\r\n                            }}\r\n                        />\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>My Pending Notification Groups</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={myPendingGroupList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default MyPendingNotificationGroupList","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../../../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport EditModal from './EditModal'\r\nimport CommonDataTable from '../../ClientSideDataTable'\r\nimport PendingGroupList from './PendingNotificationGroupList'\r\nimport MyPendingGroupList from './MyPendingNotificationGroupList'\r\n\r\nconst NotificationGroupList = () => {\r\n    const AssignedMenus = JSON.parse(localStorage.getItem('AssignedMenus')) || []\r\n    const Array2D = AssignedMenus.map(x => x.submenu.map(y => y.id))\r\n    const subMenuIDs = [].concat(...Array2D)\r\n    // const userRole = JSON.parse(localStorage.getItem('userData'))['role']\r\n\r\n    const history = useHistory()\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [groupList, setGroupList] = useState([])\r\n    const [myPendingGroupList, setMyPendingGroupList] = useState([])\r\n    const [pendingGroupList, setPendingGroupList] = useState([])\r\n    const [groupInfo, setGroupInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n    const user = JSON.parse(localStorage.getItem('userData'))\r\n\r\n    useEffect(() => {\r\n        useJwt.getNotificationGroupList().then(res => {\r\n            console.log(res)\r\n            setGroupList(res.data.payload.GroupList)\r\n            setMyPendingGroupList(res.data.payload.myPendingGroupList)\r\n            setPendingGroupList(res.data.payload.approveGroupList)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n        })\r\n    }, [resetData])\r\n    const handlePoPupActions = (id, status, groupName, message) => {\r\n\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                const data = {\r\n                    group_id: id,\r\n                    action_id: status\r\n                    // group_name : groupName\r\n                }\r\n                return useJwt.notificationEditDelete(data).then(res => {\r\n                    Success(res)\r\n                    // setGroupList(groupList.filter(x => x.id !== id))\r\n                    console.log(res)\r\n                }).catch(err => {\r\n                    console.log(err.response)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'SL',\r\n            minWidth: '20px',\r\n            sortable: true,\r\n            cell: (row, index) => index + 1  //RDT provides index by default\r\n        },\r\n        {\r\n            name: 'Group Name',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'group_name'\r\n        },\r\n        {\r\n            name: 'Created By',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: 'created_by_name'\r\n        },\r\n        {\r\n            name: 'Approved by',\r\n            minWidth: '170px',\r\n            sortable: true,\r\n            selector: 'approved_by'\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"View\">\r\n                        {subMenuIDs.includes(40) || user.role === 'vendor' ? <><Eye size={15}\r\n                            color='blue'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                if (user.role === 'vendor') {\r\n                                    return history.push(`/detailsNotificationGroupVendor/${row.id}?is_pending=false`)\r\n                                } else {\r\n                                    return history.push(`/detailsNotificationGroup/${row.id}?is_pending=false`)\r\n                                }\r\n                            }}\r\n                        /></> : ''}\r\n                    </span>&nbsp;&nbsp;\r\n                    < span title=\"Edit\" >\r\n                        {\r\n                            subMenuIDs.includes(36) || user.role === 'vendor' ? <Edit size={15}\r\n                                color='green'\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={(e) => {\r\n                                    setGroupInfo(row)\r\n                                    setModal(true)\r\n                                }}\r\n                            /> : ''\r\n                        }\r\n                    </span >&nbsp;&nbsp;\r\n                    <span title=\"Delete\">\r\n                        {subMenuIDs.includes(38) || user.role === 'vendor' ? <Trash size={15}\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.id, 1, row.group_name, 'Do you want to delete?')}\r\n                        /> : ''}\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    const [activeTab, setActiveTab] = useState('1')\r\n\r\n    // ** Function to toggle tabs\r\n    const toggle = tab => setActiveTab(tab)\r\n\r\n    return (\r\n        <Card>\r\n            <CardBody className='pt-2'>\r\n                <Nav pills>\r\n                    <NavItem>\r\n                        <NavLink active={activeTab === '1'} onClick={() => toggle('1')}>\r\n                            <span className='align-middle d-none d-sm-block'>Groups</span>\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink active={activeTab === '2'} onClick={() => toggle('2')}>\r\n                            <span className='align-middle d-none d-sm-block'>My Pending Groups</span>\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    {subMenuIDs.includes(39) || user.role === 'vendor' ? <NavItem>\r\n                        <NavLink active={activeTab === '3'} onClick={() => toggle('3')}>\r\n                            <span className='align-middle d-none d-sm-block'>Approve Groups</span>\r\n                        </NavLink>\r\n                    </NavItem> : ''}\r\n                </Nav>\r\n                <TabContent activeTab={activeTab}>\r\n                    <TabPane tabId='1'>\r\n                        <Card>\r\n                            <CardHeader className='border-bottom'>\r\n                                <CardTitle tag='h4'>Notification Groups</CardTitle>\r\n                                {\r\n                                    user.role === 'vendor' ? <Button.Ripple className='ml-2' color='primary' tag={Link} to='/createNotificationGroupsVendor' >\r\n                                        <div className='d-flex align-items-center'>\r\n                                            <Plus size={17} style={{ marginRight: '5px' }} />\r\n                                            <span >Create Group</span>\r\n                                        </div>\r\n                                    </Button.Ripple> : <>{subMenuIDs.includes(35) && <Button.Ripple className='ml-2' color='primary' tag={Link} to='/createNotificationGroups' >\r\n                                        <div className='d-flex align-items-center'>\r\n                                            <Plus size={17} style={{ marginRight: '5px' }} />\r\n                                            <span >Create Group</span>\r\n                                        </div>\r\n                                    </Button.Ripple>}</>\r\n                                }\r\n\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col md='12'>\r\n                                        <CommonDataTable column={column} TableData={groupList} TableDataLoading={TableDataLoading} />\r\n                                    </Col>\r\n                                </Row>\r\n                                <EditModal\r\n                                    toggleModal={toggleModal}\r\n                                    modal={modal}\r\n                                    resetData={resetData}\r\n                                    setReset={setReset}\r\n                                    groupInfo={groupInfo}\r\n                                    setGroupInfo={setGroupInfo}\r\n                                />\r\n                            </CardBody>\r\n                        </Card>\r\n                    </TabPane>\r\n                    <TabPane tabId='2'>\r\n                        <MyPendingGroupList myPendingGroupList={myPendingGroupList} />\r\n                    </TabPane>\r\n                    <TabPane tabId='3'>\r\n                        <PendingGroupList pendingGroupList={pendingGroupList} setPendingGroupList={setPendingGroupList} />\r\n                    </TabPane>\r\n                </TabContent>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default NotificationGroupList","import { Fragment, useState } from 'react'\r\nimport { toast, Slide } from 'react-toastify'\r\n\r\n    export const Error = (err) => {\r\n        try {\r\n            const e = err.response\r\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500) {\r\n                toast.error(e.data.message, {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n            } else  {\r\n                toast.error('The server is under maintenance', {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined\r\n                    }) \r\n            }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        }\r\n \r\n    }\r\n\r\n    export const ErrorMessage = (err) => {\r\n        try {\r\n        const e = err.response\r\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\r\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n         }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        } \r\n    }\r\n    export const Success = (response) => {\r\n        const message = response.data.message || 'success'\r\n        toast.success(message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n    }\r\n\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 10 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={10}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable"],"sourceRoot":""}