{"version":3,"sources":["views/VendorComponents/Notifications/EditModal.js","views/VendorComponents/Notifications/NotificationList.js","views/viewhelper.js","views/VendorComponents/ClientSideDataTable.js"],"names":["EditModal","modal","toggleModal","notificationInfo","setnotificationInfo","setReset","resetData","useState","Modal","isOpen","toggle","className","ModalHeader","ModalBody","Form","style","width","autoComplete","Col","sm","FormGroup","Label","for","Input","type","name","id","value","Notification_Title","disabled","placeholder","Notification_Body","MySwal","withReactContent","Swal","NotificationList","TableDataLoading","setTableDataLoading","notificationList","setNotificationList","setModal","useEffect","useJwt","getNotifications","then","res","console","log","data","payload","catch","err","Error","column","minWidth","sortable","selector","row","slice","true","title","false","viaSMS","viaEmail","viaPushNotification","size","color","cursor","onClick","e","message","fire","text","icon","allowOutsideClick","allowEscapeKey","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","showLoaderOnConfirm","preConfirm","notificationId","parseInt","deleteNotifications","Success","filter","x","response","buttonsStyling","isLoading","result","isConfirmed","Card","CardHeader","CardTitle","tag","CardBody","Row","md","TableData","status","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","ErrorMessage","errors","Object","keys","success","CommonDataTable","currentPage","setCurrentPage","noHeader","pagination","columns","paginationPerPage","sortIcon","paginationDefaultPage","paginationComponent","previousLabel","nextLabel","forcePage","onPageChange","page","selected","handlePagination","pageCount","length","breakLabel","pageRangeDisplayed","marginPagesDisplayed","activeClassName","pageClassName","breakClassName","breakLinkClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","progressPending","progressComponent","responsive"],"mappings":"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","file":"static/js/255.8066cbe4.chunk.js","sourcesContent":["import { Fragment, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical,\r\n    Edit, Archive, Trash, Search, ChevronLeft, Eye, XCircle, Facebook, Globe, Instagram, Twitter\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, CardBody, CustomInput, Table, Spinner, InputGroup, InputGroupAddon, InputGroupText, FormFeedback, Progress, Modal, ModalHeader, ModalBody, ModalFooter\r\n} from 'reactstrap'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\n\r\nconst EditModal = ({ modal, toggleModal, notificationInfo, setnotificationInfo, setReset, resetData }) => {\r\n    const [editPointRuleloading, seteditPointRuleloading] = useState(false)\r\n\r\n  /*   const handleChange = (e) => {\r\n        setnotificationInfo({ ...notificationInfo, [e.target.name]: e.target.value })\r\n    } */\r\n\r\n    /* const onSubmit = (e) => {\r\n        e.preventDefault()\r\n        const { Id, SKUAmount, SKUPoints, SKUStartRange, SKUEndRange, IsRange } = notificationInfo\r\n        localStorage.setItem('usePMStoken', true)\r\n        seteditPointRuleloading(true)\r\n        const merchantId = BusinessList[0].pms_merchantid\r\n        let tempSkuPoints = 0\r\n        if (!IsRange) { tempSkuPoints = SKUPoints }\r\n        useJwt.updateMyRule(merchantId, { rule_id:Id, skuamount:SKUAmount, skupoints:tempSkuPoints, skustartrange:SKUStartRange, skuendrange:SKUEndRange, isrange:IsRange }).then(res => {\r\n            setReset(!resetData)\r\n            seteditPointRuleloading(false)\r\n            console.log(res)\r\n            toggleModal()\r\n            Success(res)\r\n        }).catch(err => {\r\n            seteditPointRuleloading(false)\r\n            localStorage.setItem('usePMStoken', false)\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    } */\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggleModal} className='modal-dialog-centered'>\r\n            <ModalHeader toggle={toggleModal}>Notification Details</ModalHeader>\r\n            <ModalBody>\r\n                <Form className=\"row\" style={{ width: '100%' }} /* onSubmit={onSubmit} */ autoComplete=\"off\">\r\n                    <Col sm=\"12\" >\r\n                        <FormGroup>\r\n                            <Label for=\"Notification_Title\">Title</Label>\r\n                            <Input type=\"text\"\r\n                                name=\"Notification_Title\"\r\n                                id='Notification_Title'\r\n                                value={notificationInfo.Notification_Title}\r\n                                /* onChange={handleChange} */\r\n                                disabled\r\n                                placeholder=\"your title\"\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col sm=\"12\" >\r\n                        <FormGroup>\r\n                            <Label for=\"Notification_Body\">Message</Label>\r\n                            <Input type=\"textarea\"\r\n                                name=\"Notification_Body\"\r\n                                id='Notification_Body'\r\n                                value={notificationInfo.Notification_Body}\r\n                                /* onChange={handleChange} */\r\n                                disabled\r\n                                placeholder=\"your message\"\r\n                            />\r\n                        </FormGroup>\r\n                    </Col>\r\n\r\n                   {/*  <Col sm=\"12\" className='text-center'>\r\n                        {\r\n                            editPointRuleloading ? <Button.Ripple color='primary' className='mr-1' disabled style={{ marginTop: '25px' }}>\r\n                                <Spinner color='white' size='sm' />\r\n                                <span className='ml-50'>Loading...</span>\r\n                            </Button.Ripple> : <Button.Ripple className='ml-2' color='primary' type=\"submit\" style={{ marginTop: '25px' }}>\r\n                                <span >Submit</span>\r\n                            </Button.Ripple>\r\n                        }\r\n                    </Col> */}\r\n                </Form>\r\n            </ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\nexport default EditModal","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, CheckCircle, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Error, Success, ErrorMessage } from '../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nconst MySwal = withReactContent(Swal)\r\nimport CommonDataTable from '../ClientSideDataTable'\r\nimport EditModal from './EditModal'\r\n\r\nconst NotificationList = () => {\r\n    const [TableDataLoading, setTableDataLoading] = useState(true)\r\n    const [resetData, setReset] = useState(true)\r\n    const [notificationList, setNotificationList] = useState([])\r\n    const [notificationInfo, setnotificationInfo] = useState({})\r\n\r\n    const [modal, setModal] = useState(false)\r\n    const toggleModal = () => setModal(!modal)\r\n\r\n    useEffect(() => {\r\n        useJwt.getNotifications().then(res => {\r\n            console.log(res)\r\n            setNotificationList(res.data.payload)\r\n            setTableDataLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n            setTableDataLoading(false)\r\n        })\r\n    }, [resetData])\r\n    const handlePoPupActions = (id, message) => {\r\n        return MySwal.fire({\r\n            title: message,\r\n            text: `You won't be able to revert this`,\r\n            icon: 'warning',\r\n            allowOutsideClick: false,\r\n            allowEscapeKey: false,\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes',\r\n            customClass: {\r\n                confirmButton: 'btn btn-primary',\r\n                cancelButton: 'btn btn-danger ml-1'\r\n            },\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                const notificationId = parseInt(id)\r\n                return useJwt.deleteNotifications({id: notificationId}).then(res => {\r\n                    Success(res)\r\n                    console.log(res)\r\n                    setNotificationList(notificationList.filter(x => x.id !== id))\r\n                }).catch(err => {\r\n                    console.log(err.response)\r\n                    Error(err)\r\n                })\r\n            },\r\n            buttonsStyling: false,\r\n            allowOutsideClick: () => !Swal.isLoading()\r\n        }).then(function (result) {\r\n            if (result.isConfirmed) {\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const column = [\r\n        {\r\n            name: 'Title',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: row => {\r\n                return row.Notification_Title.slice(0, 20)\r\n            }\r\n        },\r\n        {\r\n            name: 'Message',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: row => {\r\n                return row.Notification_Body.slice(0, 20)\r\n            }\r\n        },\r\n        {\r\n            name: 'Send Via SMS',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: row => {\r\n                const status = {\r\n                    true: { title: 'True' },\r\n                    false: { title: 'False'}\r\n                }\r\n                return status[row.viaSMS].title\r\n            }\r\n        },\r\n        {\r\n            name: 'Send Via Email',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: row => {\r\n                const status = {\r\n                    true: { title: 'True' },\r\n                    false: { title: 'False'}\r\n                }\r\n                return status[row.viaEmail].title\r\n            }\r\n        },\r\n        {\r\n            name: 'Send Via Push Notification',\r\n            minWidth: '100px',\r\n            sortable: true,\r\n            selector: row => {\r\n                const status = {\r\n                    true: { title: 'True' },\r\n                    false: { title: 'False'}\r\n                }\r\n                return status[row.viaPushNotification].title\r\n            }\r\n        },\r\n        {\r\n            name: 'Action',\r\n            minWidth: '100px',\r\n            // sortable: true,\r\n            selector: row => {\r\n                return <>\r\n                    <span title=\"Edit\">\r\n                        <Eye size={15}\r\n                            color='teal'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                setnotificationInfo(row)\r\n                                setModal(true)\r\n                            }}\r\n                        />\r\n                    </span>&nbsp;&nbsp;\r\n                    <span title=\"Delete\">\r\n                        <Trash size={15}\r\n                            color='red'\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => handlePoPupActions(row.id, 'Do you want to delete?')}\r\n                        />\r\n                    </span>\r\n                </>\r\n            }\r\n        }\r\n    ]\r\n    return (\r\n        <Card>\r\n            <CardHeader className='border-bottom'>\r\n                <CardTitle tag='h4'>All Notifications</CardTitle>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Row>\r\n                    <Col md='12'>\r\n                        <CommonDataTable column={column} TableData={notificationList} TableDataLoading={TableDataLoading} />\r\n                    </Col>\r\n                </Row>\r\n                <EditModal\r\n                    toggleModal={toggleModal}\r\n                    modal={modal}\r\n                    resetData={resetData}\r\n                    setReset={setReset}\r\n                    notificationInfo={notificationInfo}\r\n                    setnotificationInfo={setnotificationInfo}\r\n                />\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default NotificationList","import { Fragment, useState } from 'react'\r\nimport { toast, Slide } from 'react-toastify'\r\n\r\n    export const Error = (err) => {\r\n        try {\r\n            const e = err.response\r\n            if (e.status === 404 || e.status === 401 || e.status === 400 || e.status === 500) {\r\n                toast.error(e.data.message, {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n            } else  {\r\n                toast.error('The server is under maintenance', {\r\n                    position: \"top-right\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined\r\n                    }) \r\n            }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        }\r\n \r\n    }\r\n\r\n    export const ErrorMessage = (err) => {\r\n        try {\r\n        const e = err.response\r\n        if (e.status === 404 || e.status === 401 || e.status === 400) {\r\n            toast.error(e.data.errors ? e.data.errors[Object.keys(e.data.errors)[0]] : e.data.message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n         }\r\n        } catch (e) {\r\n            toast.error('Please check your connection', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined\r\n                })  \r\n        } \r\n    }\r\n    export const Success = (response) => {\r\n        const message = response.data.message || 'success'\r\n        toast.success(message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined\r\n            })  \r\n    }\r\n\r\n","import React, { Fragment, useState, useEffect } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink\r\n} from 'reactstrap'\r\n// ** Third Party Components\r\nimport ReactPaginate from 'react-paginate'\r\nimport DataTable from 'react-data-table-component'\r\n\r\nconst CommonDataTable = ({ column, TableData, TableDataLoading }) => {\r\n    const [currentPage, setCurrentPage] = useState(0)\r\n\r\n    // ** Function to handle Pagination\r\n    const handlePagination = page => {\r\n        setCurrentPage(page.selected)\r\n    }\r\n    // ** Custom Pagination\r\n    const CustomPagination = () => (\r\n        <ReactPaginate\r\n            previousLabel=''\r\n            nextLabel=''\r\n            forcePage={currentPage}\r\n            onPageChange={page => handlePagination(page)}\r\n            pageCount={TableData.length ? TableData.length / 10 : 1}\r\n            breakLabel='...'\r\n            pageRangeDisplayed={2}\r\n            marginPagesDisplayed={2}\r\n            activeClassName='active'\r\n            pageClassName='page-item'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            nextLinkClassName='page-link'\r\n            nextClassName='page-item next'\r\n            previousClassName='page-item prev'\r\n            previousLinkClassName='page-link'\r\n            pageLinkClassName='page-link'\r\n            breakClassName='page-item'\r\n            breakLinkClassName='page-link'\r\n            containerClassName='pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\r\n        />\r\n    )\r\n    return (\r\n        <Fragment>\r\n            <DataTable\r\n                noHeader\r\n                pagination\r\n                /*selectableRows*/\r\n                columns={column}\r\n                paginationPerPage={10}\r\n                className='react-dataTable'\r\n                sortIcon={<ChevronDown size={10} />}\r\n                paginationDefaultPage={currentPage + 1}\r\n                paginationComponent={CustomPagination}\r\n                data={TableData}\r\n                progressPending={TableDataLoading}\r\n                progressComponent={<Spinner color='primary' />}\r\n                responsive={true}\r\n            /*selectableRowsComponent={BootstrapCheckbox}*/\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default CommonDataTable"],"sourceRoot":""}