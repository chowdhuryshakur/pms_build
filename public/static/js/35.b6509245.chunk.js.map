{"version":3,"sources":["views/CustomComponents/EstateAdminPages/Propertypages/ProperetyImgUpload.js","views/CustomComponents/EstateAdminPages/Propertypages/EditProperties.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/Row.js","../node_modules/reactstrap/es/Label.js","../node_modules/reactstrap/es/Form.js"],"names":["ImgUpload","fileUrls","setFileUrls","state","setState","setimgUpLoading","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","previewVisible","previewImage","fileList","previewTitle","handlePreview","a","url","preview","originFileObj","name","substring","lastIndexOf","uploadButton","className","style","height","width","size","props","beforeUpload","isLt2M","isJpgOrPng","type","formData","FormData","append","useJwt","singleFileupload","then","res","uid","status","data","payload","fileurl","catch","err","console","log","Error","toast","action","IMG_BASE_URL","listType","onPreview","onChange","filter","some","b","x","includes","length","visible","title","footer","onCancel","alt","src","withReactContent","Swal","EditProperties","history","useHistory","bath_roomRef","useRef","bed_roomRef","branch_idRef","land_lord_idRef","property_typeRef","addressRef","userRole","JSON","parse","localStorage","getItem","role","EditPropertyInfo","useState","imgUpLoading","property_image","gas_certificate","gasfileUrls","setgasFileUrls","gasstate","setgasState","power_certificate","powerfileUrls","setpowerFileUrls","powerstate","setpowerState","property_insurence_certificate","insurencefileUrls","setinsurenceFileUrls","insurencestate","setinsurenceState","branchValue","setBranchvalue","landlordValue","setlandlordvalue","isLoading","setLoading","postcode","setPostCode","searching","setSearching","ukaddress","setukaddress","property_rent","land_lord_id","branch_id","house_details","latitude","longitude","property_type","bed_room","bath_room","is_gas_certificate","gas_certificate_expire_date","Date","toLocaleDateString","is_power_certificate","power_certificate_expire_date","is_property_insurence_certificate","property_insurence_certificate_expire_date","userInput","setUserInput","BranchList","setBranchList","landlordList","setlandlordList","useEffect","find","id","branch_name","user_id","full_name","handleChange","e","target","value","Ripple","color","onClick","push","onSubmit","preventDefault","submitData","Number","editProperty","Success","autoComplete","tag","md","ref","theme","selectThemeColors","classNamePrefix","maxMenuHeight","selected","label","options","map","isDisabled","isClearable","required","opacity","onFocus","current","select","focus","for","placeholder","min","addonType","outline","ukAddressEndpoint","postCode","addresses","element","building_number","thoroughfare","locality","town_or_city","checked","disabled","propTypes","tagPropType","inverse","PropTypes","bool","string","body","cssModule","object","innerRef","oneOfType","func","Card","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","rowColsPropType","number","noGutters","form","xs","sm","lg","xl","widths","Row","colClasses","forEach","colWidth","i","colSize","isXs","stringOrNumberProp","columnProps","shape","order","offset","children","node","hidden","check","array","getColumnSizeClass","Label","htmlFor","columnProp","colClass","isObject","_classNames","colSizeInterfix","inline","Form","_Component","_this","call","this","getRef","bind","_assertThisInitialized","submit","_inheritsLoose","_proto","prototype","render","_this$props","Component"],"mappings":"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","file":"static/js/35.b6509245.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Upload, Modal } from 'antd'\r\n// import { PlusOutlined } from '@ant-design/icons'\r\nimport 'antd/dist/antd.css'\r\nimport { Slide, toast } from 'react-toastify'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Camera } from 'react-feather'\r\nimport { Error } from '../../../viewhelper'\r\nimport { IMG_BASE_URL } from '../../../Configuarables'\r\n\r\nconst ImgUpload = ({ fileUrls, setFileUrls, state, setState, setimgUpLoading }) => {\r\n    // const [fileUrls, setFileUrls] = useState([])\r\n    function getBase64(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader()\r\n            reader.readAsDataURL(file)\r\n            reader.onload = () => resolve(reader.result)\r\n            reader.onerror = error => reject(error)\r\n        })\r\n    }\r\n    // const [state, setState] = useState({\r\n    //     previewVisible: false,\r\n    //     previewImage: '',\r\n    //     previewTitle: '',\r\n    //     fileList: []\r\n    // })\r\n    const { previewVisible, previewImage, fileList, previewTitle } = state\r\n    const handleCancel = () => setState({ ...state, previewVisible: false })\r\n\r\n    const handlePreview = async file => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj)\r\n        }\r\n        setState({\r\n            ...state,\r\n            previewImage: file.url || file.preview,\r\n            previewVisible: true,\r\n            previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\r\n        })\r\n    }\r\n    const handleChange = ({ fileList, file }) => {\r\n        // console.log(fileList, fileUrls)\r\n        if (file.size / 1024 / 1024 > 2) {\r\n            return 0\r\n        }\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\r\n        if (!isJpgOrPng) {\r\n            return 0\r\n        }\r\n        setFileUrls(fileUrls.filter(a => fileList.some(b => a.uid === b.uid)))\r\n        setState({ ...state, fileList: fileList.filter(x => x.type.includes('image')) })\r\n    }\r\n    const uploadButton = (\r\n        <div className='text-center p-1' style={{ height: '102px', width: '102px' }}>\r\n            <span ><Camera size={20} className='my-1' /></span> <br />\r\n            <span>Add Image</span>\r\n        </div>\r\n        // <div>\r\n        //     <PlusOutlined />\r\n        //     <div style={{ marginTop: 8 }}>Upload</div>\r\n        // </div>\r\n    )\r\n    const props = {\r\n        beforeUpload: file => {\r\n            const isLt2M = file.size / 1024 / 1024 < 2\r\n            const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\r\n            if (!isJpgOrPng) {\r\n                toast.error(`${file.name} is not a Image file`)\r\n            } else if (!isLt2M) {\r\n                toast.error('Image must smaller than 2MB!')\r\n            } else {\r\n                const formData = new FormData()\r\n                formData.append('complain_image', file)\r\n                setimgUpLoading(true)\r\n                useJwt.singleFileupload(formData).then(res => {\r\n                    // alert(\"upload done\")\r\n                    setimgUpLoading(false)\r\n                    setFileUrls([\r\n                        ...fileUrls,\r\n                        {\r\n                            uid: file.uid,\r\n                            name: 'image.png',\r\n                            status: 'done',\r\n                            type: \"image/jpeg\",\r\n                            url: res.data.payload.fileurl\r\n                        }\r\n                    ])\r\n                }).catch(err => {\r\n                    setimgUpLoading(false)\r\n                    console.log(err)\r\n                    Error(err)\r\n                })\r\n                return isJpgOrPng && isLt2M\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Upload\r\n                {...props}\r\n                action={`${IMG_BASE_URL}/api/fackupload`}\r\n                listType=\"picture-card\"\r\n                fileList={fileList}\r\n                onPreview={handlePreview}\r\n                onChange={handleChange}\r\n            >\r\n                {fileList.length >= 1 ? null : uploadButton}\r\n            </Upload>\r\n            <Modal\r\n                visible={previewVisible}\r\n                title={previewTitle}\r\n                footer={null}\r\n                onCancel={handleCancel}\r\n            >\r\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImgUpload","import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, RefreshCw\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport ImgUpload from './ProperetyImgUpload'\r\nconst MySwal = withReactContent(Swal)\r\n\r\nconst EditProperties = () => {\r\n    const history = useHistory()\r\n    const bath_roomRef = useRef()\r\n    const bed_roomRef = useRef()\r\n    const branch_idRef = useRef()\r\n    const land_lord_idRef = useRef()\r\n    const property_typeRef = useRef()\r\n    const addressRef = useRef()\r\n    const userRole = JSON.parse(localStorage.getItem('userData')).role\r\n    const EditPropertyInfo = JSON.parse(localStorage.getItem('EditPropertyInfo'))\r\n    const [imgUpLoading, setimgUpLoading] = useState(false)\r\n    const [fileUrls, setFileUrls] = useState(EditPropertyInfo.property_image ? [\r\n        {\r\n            uid: 1,\r\n            name: 'image.png',\r\n            status: 'done',\r\n            type: \"image/jpeg\",\r\n            url: EditPropertyInfo.property_image\r\n        }\r\n    ] : [])\r\n    const [state, setState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: EditPropertyInfo.property_image ? [\r\n            {\r\n                uid: 1,\r\n                name: 'image.png',\r\n                status: 'done',\r\n                type: \"image/jpeg\",\r\n                url: EditPropertyInfo.property_image\r\n            }\r\n        ] : []\r\n    })\r\n    const [gasfileUrls, setgasFileUrls] = useState(EditPropertyInfo.gas_certificate ? [\r\n        {\r\n            uid: 11,\r\n            name: 'image.png',\r\n            status: 'done',\r\n            type: \"image/jpeg\",\r\n            url: EditPropertyInfo.gas_certificate\r\n        }\r\n    ] : [])\r\n    const [gasstate, setgasState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: EditPropertyInfo.gas_certificate ? [\r\n            {\r\n                uid: 11,\r\n                name: 'image.png',\r\n                status: 'done',\r\n                type: \"image/jpeg\",\r\n                url: EditPropertyInfo.gas_certificate\r\n            }\r\n        ] : []\r\n    })\r\n    // ********\r\n    const [powerfileUrls, setpowerFileUrls] = useState(EditPropertyInfo.power_certificate ? [\r\n        {\r\n            uid: 111,\r\n            name: 'image.png',\r\n            status: 'done',\r\n            type: \"image/jpeg\",\r\n            url: EditPropertyInfo.power_certificate\r\n        }\r\n    ] : [])\r\n    const [powerstate, setpowerState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: EditPropertyInfo.power_certificate ? [\r\n            {\r\n                uid: 111,\r\n                name: 'image.png',\r\n                status: 'done',\r\n                type: \"image/jpeg\",\r\n                url: EditPropertyInfo.power_certificate\r\n            }\r\n        ] : []\r\n    })\r\n    // ***********\r\n    const [insurencefileUrls, setinsurenceFileUrls] = useState(EditPropertyInfo.property_insurence_certificate ? [\r\n        {\r\n            uid: 1111,\r\n            name: 'image.png',\r\n            status: 'done',\r\n            type: \"image/jpeg\",\r\n            url: EditPropertyInfo.property_insurence_certificate\r\n        }\r\n    ] : [])\r\n    const [insurencestate, setinsurenceState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: EditPropertyInfo.property_insurence_certificate ? [\r\n            {\r\n                uid: 1111,\r\n                name: 'image.png',\r\n                status: 'done',\r\n                type: \"image/jpeg\",\r\n                url: EditPropertyInfo.property_insurence_certificate\r\n            }\r\n        ] : []\r\n    })\r\n    const [branchValue, setBranchvalue] = useState('Select...')\r\n    const [landlordValue, setlandlordvalue] = useState('Select...')\r\n\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [postcode, setPostCode] = useState('')\r\n    const [searching, setSearching] = useState(false)\r\n    const [ukaddress, setukaddress] = useState([])\r\n    const [userInput, setUserInput] = useState({\r\n        property_rent: EditPropertyInfo.property_rent,\r\n        land_lord_id: EditPropertyInfo.land_lord_id,\r\n        branch_id: EditPropertyInfo.branch_id,\r\n        house_details: EditPropertyInfo.house_details,\r\n        latitude: EditPropertyInfo.latitude,\r\n        longitude: EditPropertyInfo.longitude,\r\n        property_type: EditPropertyInfo.property_type,\r\n        bed_room: EditPropertyInfo.bed_room,\r\n        bath_room: EditPropertyInfo.bath_room,\r\n        is_gas_certificate: EditPropertyInfo.is_gas_certificate,\r\n        gas_certificate_expire_date: new Date(EditPropertyInfo.gas_certificate_expire_date).toLocaleDateString('fr-CA'),\r\n        gas_certificate: '',\r\n        property_image: '',\r\n        is_power_certificate: EditPropertyInfo.is_power_certificate,\r\n        power_certificate_expire_date: new Date(EditPropertyInfo.power_certificate_expire_date).toLocaleDateString('fr-CA'),\r\n        is_property_insurence_certificate: EditPropertyInfo.is_property_insurence_certificate,\r\n        property_insurence_certificate_expire_date: new Date(EditPropertyInfo.property_insurence_certificate_expire_date).toLocaleDateString('fr-CA')\r\n    })\r\n    const propertyTypes = ['Flat', 'Semi-detach', 'Detach', 'Terraced', 'Bungalow', 'Park home']\r\n    const bedroomTypes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    const bathroomTypes = [1, 2, 3, 4, 5]\r\n    const [BranchList, setBranchList] = useState([])\r\n    const [landlordList, setlandlordList] = useState([])\r\n    useEffect(() => {\r\n        useJwt.BranchList().then(res => {\r\n            setBranchvalue(res.data.payload.find(b => b.id === EditPropertyInfo.branch_id).branch_name)\r\n            setBranchList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n        useJwt.landlordList().then(res => {\r\n            setlandlordvalue(res.data.payload.find(b => b.user_id === EditPropertyInfo.land_lord_id).full_name)\r\n            setlandlordList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    const handlePostCodeSearch = e => {\r\n        e.preventDefault()\r\n        setSearching(true)\r\n        useJwt.ukAddressEndpoint({ postCode: postcode }).then(res => {\r\n            console.log(res.data.payload)\r\n            const { latitude, longitude } = res.data.payload\r\n            setUserInput({ ...userInput, latitude, longitude })\r\n            setukaddress(res.data.payload.addresses.map(element => `${element.building_number}, ${element.thoroughfare}, ${element.locality}, ${element.town_or_city}`))\r\n            setSearching(false)\r\n        }).catch(err => {\r\n            setukaddress([])\r\n            setSearching(false)\r\n            Error(err)\r\n        })\r\n    }\r\n    const handleChange = e => {\r\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (imgUpLoading) {\r\n            toast.error('please wait, image is uploading to the server')\r\n            return 0\r\n        }\r\n        if (!fileUrls.length) {\r\n            toast.error('please upload property image')\r\n            return 0\r\n        }\r\n        if (userInput.is_gas_certificate && !gasfileUrls.length) {\r\n            toast.error('please upload your gas certificate')\r\n            return 0\r\n        }\r\n        if (userInput.is_power_certificate && !powerfileUrls.length) {\r\n            toast.error('please upload your power certificate')\r\n            return 0\r\n        }\r\n        if (userInput.is_property_insurence_certificate && !insurencefileUrls.length) {\r\n            toast.error('please upload your insurance certificate')\r\n            return 0\r\n        }\r\n        const { property_rent, land_lord_id, branch_id, house_details, latitude, longitude, property_type, bed_room, bath_room, is_gas_certificate, gas_certificate_expire_date, is_power_certificate, power_certificate_expire_date, is_property_insurence_certificate, property_insurence_certificate_expire_date } = userInput\r\n        const property_image = fileUrls.length ? fileUrls[0].url : null\r\n        const gas_certificate = is_gas_certificate ? gasfileUrls[0].url : null\r\n        const power_certificate = is_power_certificate ? powerfileUrls[0].url : null\r\n        const property_insurence_certificate = is_property_insurence_certificate ? insurencefileUrls[0].url : null\r\n\r\n        const submitData = {\r\n            id: EditPropertyInfo.id,\r\n            property_rent: Number(property_rent),\r\n            land_lord_id,\r\n            branch_id,\r\n            house_details,\r\n            // latitude,\r\n            // longitude,\r\n            property_type,\r\n            bed_room,\r\n            bath_room,\r\n            property_image,\r\n            gas_certificate,\r\n            power_certificate,\r\n            property_insurence_certificate,\r\n            is_gas_certificate,\r\n            gas_certificate_expire_date,\r\n            is_power_certificate,\r\n            power_certificate_expire_date,\r\n            is_property_insurence_certificate,\r\n            property_insurence_certificate_expire_date\r\n        }\r\n        console.log(submitData)\r\n        setLoading(true)\r\n        useJwt.editProperty(submitData).then(res => {\r\n            console.log(res)\r\n            Success(res)\r\n            history.push(`/${userRole}/MyProperty`)\r\n            setLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Button.Ripple className='m-1' color='primary' onClick={e => history.push(`/${userRole}/MyProperty`)}>\r\n                <ChevronLeft size={12} /> Back\r\n            </Button.Ripple>\r\n            <Form style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <Card>\r\n                    <CardHeader className='border-bottom'>\r\n                        <CardTitle tag='h4'>Update Property</CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody className=\"row pt-1\">\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Branch</Label>\r\n                                <><Select\r\n                                    ref={branch_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='branch_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setBranchvalue(selected.label)\r\n                                        setUserInput({ ...userInput, branch_id: selected.value })\r\n                                    }}\r\n                                    options={BranchList.map(x => { return { value: x.id, label: x.branch_name } })}\r\n                                    value={{ value: userInput.branch_id, label: branchValue }}\r\n                                    isDisabled={userRole === 'EstateManager'}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => branch_idRef.current.select.focus()}\r\n                                        value={userInput.branch_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Landlord</Label>\r\n                                <><Select\r\n                                    ref={land_lord_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='land_lord_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setlandlordvalue(selected.label)\r\n                                        setUserInput({ ...userInput, land_lord_id: selected.value })\r\n                                    }}\r\n                                    options={landlordList.map(x => { return { value: x.user_id, label: x.full_name } })}\r\n                                    value={{ value: userInput.land_lord_id, label: landlordValue }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => land_lord_idRef.current.select.focus()}\r\n                                        value={userInput.land_lord_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select Property Type</Label>\r\n                                <><Select\r\n                                    ref={property_typeRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='property_type'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, property_type: selected.value })\r\n                                    }}\r\n                                    options={propertyTypes.map(x => { return { value: x, label: x } })}\r\n                                    value={{ value: userInput.property_type, label: userInput.property_type }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => property_typeRef.current.select.focus()}\r\n                                        value={userInput.property_type || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select How Many Bedroom</Label>\r\n                                <><Select\r\n                                    ref={bed_roomRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='bed_room'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, bed_room: selected.value })\r\n                                    }}\r\n                                    options={bedroomTypes.map(x => { return { value: x, label: x } })}\r\n                                    value={{ value: userInput.bed_room, label: userInput.bed_room }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => bed_roomRef.current.select.focus()}\r\n                                        value={userInput.bed_room || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select How Many Bathroom</Label>\r\n                                <><Select\r\n                                    ref={bath_roomRef}\r\n                                    maxMenuHeight={150}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='bath_room'\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, bath_room: selected.value })\r\n                                    }}\r\n                                    options={bathroomTypes.map(x => { return { value: x, label: x } })}\r\n                                    value={{ value: userInput.bath_room, label: userInput.bath_room }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => bath_roomRef.current.select.focus()}\r\n                                        value={userInput.bath_room || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label for=\"property_rent\">Property Rent</Label>\r\n                                <Input\r\n                                    required\r\n                                    type=\"number\"\r\n                                    id='property_rent'\r\n                                    name=\"property_rent\"\r\n                                    placeholder=\"100\"\r\n                                    min={1}\r\n                                    value={userInput.property_rent}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col md='6' >\r\n                            <Label for=\"postcode\">Search address by Post Code</Label>\r\n                            <InputGroup>\r\n                                <Input\r\n                                    // required\r\n                                    type=\"text\"\r\n                                    id='postcode'\r\n                                    name=\"postcode\"\r\n                                    placeholder=\"post code\"\r\n                                    value={postcode}\r\n                                    onChange={e => setPostCode(e.target.value)}\r\n                                />\r\n                                <InputGroupAddon addonType='append'>\r\n                                    <Button color='primary' outline type='button' onClick={handlePostCodeSearch}>\r\n                                        {searching ? <Spinner size='sm' /> : 'Search'}\r\n                                    </Button>\r\n                                </InputGroupAddon>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col md='6' >\r\n                            <Label>Address</Label>\r\n                            <Select\r\n                                ref={addressRef}\r\n                                theme={selectThemeColors}\r\n                                className='react-select'\r\n                                classNamePrefix='select'\r\n                                name='house_details'\r\n                                maxMenuHeight={150}\r\n                                onChange={selected => {\r\n                                    setUserInput({ ...userInput, house_details: selected.value })\r\n                                }}\r\n                                options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                                value={{ value: userInput.house_details, label: userInput.house_details }}\r\n                                // isDisabled={!ukaddress.length}\r\n                                isClearable={false}\r\n                            />\r\n                            {/* {ukaddress.length ? <><Select\r\n                                ref={addressRef}\r\n                                theme={selectThemeColors}\r\n                                className='react-select'\r\n                                classNamePrefix='select'\r\n                                name='house_details'\r\n                                onChange={selected => {\r\n                                    setUserInput({ ...userInput, house_details: selected.value })\r\n                                }}\r\n                                options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                                value={{ value: userInput.house_details, label: userInput.house_details }}\r\n                                // isDisabled={!ukaddress.length}\r\n                                isClearable={false}\r\n                            /><Input\r\n                                    required\r\n                                    style={{\r\n                                        opacity: 0,\r\n                                        width: \"100%\",\r\n                                        height: 0\r\n                                        // position: \"absolute\"\r\n                                    }}\r\n                                    onFocus={e => addressRef.current.select.focus()}\r\n                                    value={userInput.house_details || ''}\r\n                                    onChange={e => ''}\r\n                                /></> : <Input\r\n                                required\r\n                                type=\"text\"\r\n                                id='house_details'\r\n                                name=\"house_details\"\r\n                                placeholder=\"house_details\"\r\n                                value={userInput.house_details}\r\n                                onChange={handleChange}\r\n                            />} */}\r\n                        </Col>\r\n\r\n                        <Col md='4' className='my-1'>\r\n                            <Label>Property Image</Label>\r\n                            <ImgUpload\r\n                                setimgUpLoading={setimgUpLoading}\r\n                                state={state}\r\n                                setState={setState}\r\n                                fileUrls={fileUrls}\r\n                                setFileUrls={setFileUrls} />\r\n                        </Col>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row className=\"match-height\">\r\n                    <Col md='4'>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_gas_certificate\"></Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_gas_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_gas_certificate: e.target.checked })}\r\n                                        checked={userInput.is_gas_certificate}\r\n                                        label='Gas Certified?' />\r\n                                </Col>\r\n                                {userInput.is_gas_certificate && <><Col md='12' className=\"mt-1\" >\r\n                                    <FormGroup>\r\n                                        <Label for=\"gas_certificate_expire_date\">Gas Certificate Expire Date</Label>\r\n                                        <Input\r\n                                            required\r\n                                            type=\"date\"\r\n                                            min={new Date().toLocaleDateString('fr-CA')}\r\n                                            id='gas_certificate_expire_date'\r\n                                            name=\"gas_certificate_expire_date\"\r\n                                            placeholder=\"100\"\r\n                                            value={userInput.gas_certificate_expire_date}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Gas Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={gasstate}\r\n                                            setState={setgasState}\r\n                                            fileUrls={gasfileUrls}\r\n                                            setFileUrls={setgasFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    {/* power */}\r\n                    <Col md='4'>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_power_certificate\">Power Certified?</Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_power_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_power_certificate: e.target.checked })}\r\n                                        checked={userInput.is_power_certificate}\r\n                                        label='Power Certified?' />\r\n                                </Col>\r\n\r\n                                {userInput.is_power_certificate && <>\r\n                                    <Col md='12' className=\"mt-1\" >\r\n                                        <FormGroup>\r\n                                            <Label for=\"power_certificate_expire_date\">Power Certificate Expire Date</Label>\r\n                                            <Input\r\n                                                required\r\n                                                type=\"date\"\r\n                                                min={new Date().toLocaleDateString('fr-CA')}\r\n                                                id='power_certificate_expire_date'\r\n                                                name=\"power_certificate_expire_date\"\r\n                                                placeholder=\"100\"\r\n                                                value={userInput.power_certificate_expire_date}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Power Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={powerstate}\r\n                                            setState={setpowerState}\r\n                                            fileUrls={powerfileUrls}\r\n                                            setFileUrls={setpowerFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md='4'>\r\n                        {/* insurance */}\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_property_insurence_certificate\">Insurence Certified?</Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_property_insurence_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_property_insurence_certificate: e.target.checked })}\r\n                                        checked={userInput.is_property_insurence_certificate}\r\n                                        label='Insurance Certified?' />\r\n                                </Col>\r\n\r\n                                {userInput.is_property_insurence_certificate && <>\r\n                                    <Col md='12' className=\"mt-1\" >\r\n                                        <FormGroup>\r\n                                            <Label for=\"property_insurence_certificate_expire_date\">Insurance Certificate Expire Date</Label>\r\n                                            <Input\r\n                                                required\r\n                                                type=\"date\"\r\n                                                min={new Date().toLocaleDateString('fr-CA')}\r\n                                                id='property_insurence_certificate_expire_date'\r\n                                                name=\"property_insurence_certificate_expire_date\"\r\n                                                placeholder=\"100\"\r\n                                                value={userInput.property_insurence_certificate_expire_date}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Insurance Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={insurencestate}\r\n                                            setState={setinsurenceState}\r\n                                            fileUrls={insurencefileUrls}\r\n                                            setFileUrls={setinsurenceFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Card>\r\n                    <Row>\r\n                        <Col md=\"12 text-center\">\r\n                            <Button.Ripple className='my-1' color='primary' type=\"submit\" disabled={isLoading}>\r\n                                {isLoading ? <Spinner size='sm' /> : 'Submit'}\r\n                            </Button.Ripple>\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            </Form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default EditProperties","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar rowColWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar rowColsPropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar propTypes = {\n  tag: tagPropType,\n  noGutters: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  form: PropTypes.bool,\n  xs: rowColsPropType,\n  sm: rowColsPropType,\n  md: rowColsPropType,\n  lg: rowColsPropType,\n  xl: rowColsPropType\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: rowColWidths\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      noGutters = props.noGutters,\n      Tag = props.tag,\n      form = props.form,\n      widths = props.widths,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"noGutters\", \"tag\", \"form\", \"widths\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var colSize = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!colSize) {\n      return;\n    }\n\n    var isXs = !i;\n    colClasses.push(isXs ? \"row-cols-\" + colSize : \"row-cols-\" + colWidth + \"-\" + colSize);\n  });\n  var classes = mapToCssModules(classNames(className, noGutters ? 'no-gutters' : null, form ? 'form-row' : 'row', colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = propTypes;\nRow.defaultProps = defaultProps;\nexport default Row;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.number, PropTypes.shape({\n  size: stringOrNumberProp,\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  children: PropTypes.node,\n  hidden: PropTypes.bool,\n  check: PropTypes.bool,\n  size: PropTypes.string,\n  for: PropTypes.string,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'label',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Label = function Label(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      hidden = props.hidden,\n      widths = props.widths,\n      Tag = props.tag,\n      check = props.check,\n      size = props.size,\n      htmlFor = props.for,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"hidden\", \"widths\", \"tag\", \"check\", \"size\", \"for\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n    var colClass;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames))), cssModule);\n    } else {\n      colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n      colClasses.push(colClass);\n    }\n  });\n  var classes = mapToCssModules(classNames(className, hidden ? 'sr-only' : false, check ? 'form-check-label' : false, size ? \"col-form-label-\" + size : false, colClasses, colClasses.length ? 'col-form-label' : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    htmlFor: htmlFor\n  }, attributes, {\n    className: classes\n  }));\n};\n\nLabel.propTypes = propTypes;\nLabel.defaultProps = defaultProps;\nexport default Label;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  inline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'form'\n};\n\nvar Form = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Form, _Component);\n\n  function Form(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.getRef = _this.getRef.bind(_assertThisInitialized(_this));\n    _this.submit = _this.submit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Form.prototype;\n\n  _proto.getRef = function getRef(ref) {\n    if (this.props.innerRef) {\n      this.props.innerRef(ref);\n    }\n\n    this.ref = ref;\n  };\n\n  _proto.submit = function submit() {\n    if (this.ref) {\n      this.ref.submit();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        inline = _this$props.inline,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"cssModule\", \"inline\", \"tag\", \"innerRef\"]);\n\n    var classes = mapToCssModules(classNames(className, inline ? 'form-inline' : false), cssModule);\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      ref: innerRef,\n      className: classes\n    }));\n  };\n\n  return Form;\n}(Component);\n\nForm.propTypes = propTypes;\nForm.defaultProps = defaultProps;\nexport default Form;"],"sourceRoot":""}