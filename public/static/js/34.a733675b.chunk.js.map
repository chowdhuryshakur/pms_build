{"version":3,"sources":["views/CustomComponents/EstateAdminPages/Propertypages/CreateProperty.js","../node_modules/reactstrap/es/Card.js","../node_modules/reactstrap/es/Row.js","views/CustomComponents/EstateAdminPages/Propertypages/ProperetyImgUpload.js"],"names":["withReactContent","Swal","CreateProperty","history","useHistory","userRole","JSON","parse","localStorage","getItem","role","bath_roomRef","useRef","bed_roomRef","branch_idRef","land_lord_idRef","property_typeRef","addressRef","useState","imgUpLoading","setimgUpLoading","fileUrls","setFileUrls","previewVisible","previewImage","previewTitle","fileList","state","setState","gasfileUrls","setgasFileUrls","gasstate","setgasState","powerfileUrls","setpowerFileUrls","powerstate","setpowerState","insurencefileUrls","setinsurenceFileUrls","insurencestate","setinsurenceState","isLoading","setLoading","postcode","setPostCode","searching","setSearching","ukaddress","setukaddress","property_rent","land_lord_id","branch_id","house_details","latitude","longitude","property_type","bed_room","bath_room","property_image","is_gas_certificate","gas_certificate","gas_certificate_expire_date","is_power_certificate","power_certificate","power_certificate_expire_date","is_property_insurence_certificate","property_insurence_certificate","property_insurence_certificate_expire_date","userInput","setUserInput","BranchList","setBranchList","landlordList","setlandlordList","useEffect","useJwt","then","res","console","log","data","payload","catch","err","Error","handleChange","e","target","name","value","style","width","onSubmit","preventDefault","toast","error","length","url","branchID","id","submitData","Number","createProperty","Success","push","autoComplete","className","tag","Ripple","color","onClick","size","marginTop","md","ref","theme","selectThemeColors","classNamePrefix","maxMenuHeight","onChange","selected","options","map","x","label","branch_name","isClearable","required","opacity","height","onFocus","current","select","focus","user_id","full_name","for","type","placeholder","min","addonType","outline","ukAddressEndpoint","postCode","addresses","element","building_number","thoroughfare","locality","town_or_city","checked","Date","toLocaleDateString","disabled","propTypes","tagPropType","inverse","PropTypes","bool","string","body","cssModule","object","innerRef","oneOfType","func","Card","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","rowColsPropType","number","noGutters","form","xs","sm","lg","xl","widths","Row","colClasses","forEach","colWidth","i","colSize","isXs","ImgUpload","getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","handlePreview","a","preview","originFileObj","substring","lastIndexOf","uploadButton","beforeUpload","isLt2M","isJpgOrPng","formData","FormData","append","singleFileupload","uid","status","fileurl","action","IMG_BASE_URL","listType","onPreview","filter","some","b","includes","visible","title","footer","onCancel","alt","src"],"mappings":"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","file":"static/js/34.a733675b.chunk.js","sourcesContent":["import React, { Fragment, useEffect, useState, useRef } from 'react'\r\nimport {\r\n    ChevronDown, Share, Printer, FileText, File, Grid, Copy, Plus, MoreVertical, Edit, Archive, Trash, Search, Eye, Lock, ChevronLeft, Upload\r\n} from 'react-feather'\r\nimport {\r\n    Card, CardHeader, CardTitle, Button, UncontrolledButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem, Input, Label, Row, Col, Badge, Form, FormGroup, UncontrolledDropdown, Spinner, CardBody, TabContent, TabPane, Nav, NavItem, NavLink, InputGroup, InputGroupAddon, InputGroupText, CustomInput\r\n} from 'reactstrap'\r\nimport Select from 'react-select'\r\nimport { selectThemeColors, transformInToFormObject } from '@utils'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { toast } from 'react-toastify'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { PHONE_PREFIX } from '../../../Configuarables'\r\nimport { Error, Success, ErrorMessage } from '../../../viewhelper'\r\nimport Swal from 'sweetalert2'\r\nimport withReactContent from 'sweetalert2-react-content'\r\nimport ImgUpload from './ProperetyImgUpload'\r\nconst MySwal = withReactContent(Swal)\r\n\r\nconst CreateProperty = () => {\r\n    const history = useHistory()\r\n    const userRole = JSON.parse(localStorage.getItem('userData')).role\r\n    const bath_roomRef = useRef()\r\n    const bed_roomRef = useRef()\r\n    const branch_idRef = useRef()\r\n    const land_lord_idRef = useRef()\r\n    const property_typeRef = useRef()\r\n    const addressRef = useRef()\r\n\r\n    const [imgUpLoading, setimgUpLoading] = useState(false)\r\n    const [fileUrls, setFileUrls] = useState([])\r\n    const [state, setState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    const [gasfileUrls, setgasFileUrls] = useState([])\r\n    const [gasstate, setgasState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    // *******\r\n    const [powerfileUrls, setpowerFileUrls] = useState([])\r\n    const [powerstate, setpowerState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    const [insurencefileUrls, setinsurenceFileUrls] = useState([])\r\n    const [insurencestate, setinsurenceState] = useState({\r\n        previewVisible: false,\r\n        previewImage: '',\r\n        previewTitle: '',\r\n        fileList: []\r\n    })\r\n    // *********\r\n    const [isLoading, setLoading] = useState(false)\r\n    const [postcode, setPostCode] = useState('')\r\n    const [searching, setSearching] = useState(false)\r\n    const [ukaddress, setukaddress] = useState([])\r\n    const [userInput, setUserInput] = useState({\r\n        property_rent: 0,\r\n        land_lord_id: '',\r\n        branch_id: '',\r\n        house_details: '',\r\n        latitude: 0,\r\n        longitude: 0,\r\n        property_type: '',\r\n        bed_room: '',\r\n        bath_room: '',\r\n        property_image: '',\r\n\r\n        is_gas_certificate: false,\r\n        gas_certificate: '',\r\n        gas_certificate_expire_date: null,\r\n\r\n        is_power_certificate: false,\r\n        power_certificate: null,\r\n        power_certificate_expire_date: null,\r\n\r\n        is_property_insurence_certificate: false,\r\n        property_insurence_certificate: null,\r\n        property_insurence_certificate_expire_date: null\r\n    })\r\n    const propertyTypes = ['Flat', 'Semi-detach', 'Detach', 'Terraced', 'Bungalow', 'Park home']\r\n    const bedroomTypes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    const bathroomTypes = [1, 2, 3, 4, 5]\r\n    const [BranchList, setBranchList] = useState([])\r\n    const [landlordList, setlandlordList] = useState([])\r\n    useEffect(() => {\r\n        useJwt.BranchList().then(res => {\r\n            console.log(res.data.payload)\r\n            setBranchList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n        useJwt.landlordList().then(res => {\r\n            console.log('landlordList', res.data.payload)\r\n            setlandlordList(res.data.payload)\r\n        }).catch(err => {\r\n            Error(err)\r\n            console.log(err)\r\n        })\r\n    }, [])\r\n    const handlePostCodeSearch = e => {\r\n        e.preventDefault()\r\n        setSearching(true)\r\n        useJwt.ukAddressEndpoint({ postCode: postcode }).then(res => {\r\n            console.log(res.data.payload)\r\n            const { latitude, longitude } = res.data.payload\r\n            setUserInput({ ...userInput, latitude, longitude })\r\n            setukaddress(res.data.payload.addresses.map(element => `${element.building_number}, ${element.thoroughfare}, ${element.locality}, ${element.town_or_city}`))\r\n            setSearching(false)\r\n        }).catch(err => {\r\n            setukaddress([])\r\n            setSearching(false)\r\n            Error(err)\r\n        })\r\n    }\r\n    const handleChange = e => {\r\n        setUserInput({ ...userInput, [e.target.name]: e.target.value })\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (imgUpLoading) {\r\n            toast.error('please wait, image is uploading to the server')\r\n            return 0\r\n        }\r\n        if (!fileUrls.length) {\r\n            toast.error('please upload property image')\r\n            return 0\r\n        }\r\n        if (userInput.is_gas_certificate && !gasfileUrls.length) {\r\n            toast.error('please upload your gas certificate')\r\n            return 0\r\n        }\r\n        if (userInput.is_power_certificate && !powerfileUrls.length) {\r\n            toast.error('please upload your power certificate')\r\n            return 0\r\n        }\r\n        if (userInput.is_property_insurence_certificate && !insurencefileUrls.length) {\r\n            toast.error('please upload your insurance certificate')\r\n            return 0\r\n        }\r\n        const { property_rent, land_lord_id, branch_id, house_details, latitude, longitude, property_type, bed_room, bath_room, is_gas_certificate, gas_certificate_expire_date, is_power_certificate, power_certificate_expire_date, is_property_insurence_certificate, property_insurence_certificate_expire_date } = userInput\r\n\r\n        const property_image = fileUrls.length ? fileUrls[0].url : null\r\n        const gas_certificate = is_gas_certificate ? gasfileUrls[0].url : null\r\n        const power_certificate = is_power_certificate ? powerfileUrls[0].url : null\r\n        const property_insurence_certificate = is_property_insurence_certificate ? insurencefileUrls[0].url : null\r\n        const branchID = !branch_id ? BranchList[0].id : branch_id\r\n\r\n        const submitData = {\r\n            property_rent: Number(property_rent),\r\n            land_lord_id,\r\n            branch_id: branchID,\r\n            house_details,\r\n            latitude,\r\n            longitude,\r\n            property_type,\r\n            bed_room,\r\n            bath_room,\r\n            property_image,\r\n            gas_certificate,\r\n            power_certificate,\r\n            property_insurence_certificate,\r\n            is_gas_certificate,\r\n            gas_certificate_expire_date,\r\n            is_power_certificate,\r\n            power_certificate_expire_date,\r\n            is_property_insurence_certificate,\r\n            property_insurence_certificate_expire_date\r\n        }\r\n        console.log(submitData)\r\n        setLoading(true)\r\n        useJwt.createProperty(submitData).then(res => {\r\n            console.log(res)\r\n            Success(res)\r\n            history.push(`/${userRole}/MyProperty`)\r\n            setLoading(false)\r\n        }).catch(err => {\r\n            Error(err)\r\n            setLoading(false)\r\n        })\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <Form style={{ width: '100%' }} onSubmit={handleSubmit} autoComplete=\"off\">\r\n                <Card >\r\n                    <CardHeader className='border-bottom'>\r\n                        <CardTitle tag='h4'>Create Property</CardTitle>\r\n                        <CardTitle tag='h4'><Button.Ripple color='primary' onClick={e => history.push(`/${userRole}/BulkPropertiesUpload`)}>\r\n                            <Upload size={14} style={{ marginTop: '-2px' }} />&nbsp;\r\n                            <span>Bulk Create</span>\r\n                        </Button.Ripple></CardTitle>\r\n                    </CardHeader>\r\n                    <CardBody className=\"row  pt-1\">\r\n                        {userRole !== 'EstateManager' && <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Branch</Label>\r\n                                <><Select\r\n                                    ref={branch_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='branch_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, branch_id: selected.value })\r\n                                    }}\r\n                                    options={BranchList.map(x => { return { value: x.id, label: x.branch_name } })}\r\n                                    // value={{ value: userInput.branch_id, label: userInput.branch_id }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => branch_idRef.current.select.focus()}\r\n                                        value={userInput.branch_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>}\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select a Landlord</Label>\r\n                                <><Select\r\n                                    ref={land_lord_idRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='land_lord_id'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, land_lord_id: selected.value })\r\n                                    }}\r\n                                    options={landlordList.map(x => { return { value: x.user_id, label: x.full_name } })}\r\n                                    // value={{ value: userInput.land_lord_id, label: userInput.land_lord_id }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => land_lord_idRef.current.select.focus()}\r\n                                        value={userInput.land_lord_id || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select Property Type</Label>\r\n                                <><Select\r\n                                    ref={property_typeRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='property_type'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, property_type: selected.value })\r\n                                    }}\r\n                                    options={propertyTypes.map(x => { return { value: x, label: x } })}\r\n                                    // value={{ value: userInput.property_type, label: userInput.property_type }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => property_typeRef.current.select.focus()}\r\n                                        value={userInput.property_type || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select How Many Bedroom</Label>\r\n                                <><Select\r\n                                    ref={bed_roomRef}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='bed_room'\r\n                                    maxMenuHeight={150}\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, bed_room: selected.value })\r\n                                    }}\r\n                                    options={bedroomTypes.map(x => { return { value: x, label: x } })}\r\n                                    // value={{ value: userInput.bed_room, label: userInput.bed_room }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => bed_roomRef.current.select.focus()}\r\n                                        value={userInput.bed_room || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label>Select How Many Bathroom</Label>\r\n                                <><Select\r\n                                    ref={bath_roomRef}\r\n                                    maxMenuHeight={150}\r\n                                    theme={selectThemeColors}\r\n                                    className='react-select'\r\n                                    classNamePrefix='select'\r\n                                    name='bath_room'\r\n                                    onChange={selected => {\r\n                                        setUserInput({ ...userInput, bath_room: selected.value })\r\n                                    }}\r\n                                    options={bathroomTypes.map(x => { return { value: x, label: x } })}\r\n                                    // value={{ value: userInput.bath_room, label: userInput.bath_room }}\r\n                                    // isDisabled={!ukaddress.length}\r\n                                    isClearable={false}\r\n                                /><Input\r\n                                        required\r\n                                        style={{\r\n                                            opacity: 0,\r\n                                            width: \"100%\",\r\n                                            height: 0\r\n                                            // position: \"absolute\"\r\n                                        }}\r\n                                        onFocus={e => bath_roomRef.current.select.focus()}\r\n                                        value={userInput.bath_room || ''}\r\n                                        onChange={e => ''}\r\n                                    /></> </FormGroup>\r\n                        </Col>\r\n                        <Col md='4' className=\"mt-0\" >\r\n                            <FormGroup>\r\n                                <Label for=\"property_rent\">Property Rent</Label>\r\n                                <Input\r\n                                    required\r\n                                    type=\"number\"\r\n                                    id='property_rent'\r\n                                    name=\"property_rent\"\r\n                                    placeholder=\"100\"\r\n                                    min={1}\r\n                                    value={userInput.property_rent}\r\n                                    onChange={handleChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </Col>\r\n\r\n                        <Col md='6' >\r\n                            <Label for=\"postcode\">Search address by Post Code</Label>\r\n                            <InputGroup>\r\n                                <Input\r\n                                    // required\r\n                                    type=\"text\"\r\n                                    id='postcode'\r\n                                    name=\"postcode\"\r\n                                    placeholder=\"enter a valid postcode\"\r\n                                    value={postcode}\r\n                                    onChange={e => setPostCode(e.target.value)}\r\n                                />\r\n                                <InputGroupAddon addonType='append'>\r\n                                    <Button color='primary' outline type='button' onClick={handlePostCodeSearch}>\r\n                                        {searching ? <Spinner size='sm' /> : 'Search'}\r\n                                    </Button>\r\n                                </InputGroupAddon>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col md='6' >\r\n                            <Label>Address</Label>\r\n                            <><Select\r\n                                ref={addressRef}\r\n                                theme={selectThemeColors}\r\n                                className='react-select'\r\n                                maxMenuHeight={150}\r\n                                classNamePrefix='select'\r\n                                name='house_details'\r\n                                onChange={selected => {\r\n                                    setUserInput({ ...userInput, house_details: selected.value })\r\n                                }}\r\n                                options={ukaddress.map(x => { return { value: x, label: x } })}\r\n                                value={{ value: userInput.house_details, label: userInput.house_details }}\r\n                                // isDisabled={!ukaddress.length}\r\n                                isClearable={false}\r\n                            /><Input\r\n                                    required\r\n                                    style={{\r\n                                        opacity: 0,\r\n                                        width: \"100%\",\r\n                                        height: 0\r\n                                        // position: \"absolute\"\r\n                                    }}\r\n                                    onFocus={e => addressRef.current.select.focus()}\r\n                                    value={userInput.house_details || ''}\r\n                                    onChange={e => ''}\r\n                                /></>\r\n                        </Col>\r\n\r\n                        <Col md='12' className='my-0'>\r\n                            <Label>Property Image</Label>\r\n                            <ImgUpload\r\n                                setimgUpLoading={setimgUpLoading}\r\n                                state={state}\r\n                                setState={setState}\r\n                                fileUrls={fileUrls}\r\n                                setFileUrls={setFileUrls} />\r\n                        </Col>\r\n                    </CardBody>\r\n                </Card>\r\n                <Row className=\"match-height\">\r\n                    <Col md='4'>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_gas_certificate\"></Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_gas_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_gas_certificate: e.target.checked })}\r\n                                        checked={userInput.is_gas_certificate}\r\n                                        label='Gas Certified?' />\r\n                                </Col>\r\n                                {userInput.is_gas_certificate && <><Col md='12' className=\"mt-1\" >\r\n                                    <FormGroup>\r\n                                        <Label for=\"gas_certificate_expire_date\">Gas Certificate Expire Date</Label>\r\n                                        <Input\r\n                                            required\r\n                                            type=\"date\"\r\n                                            min={new Date().toLocaleDateString('fr-CA')}\r\n                                            id='gas_certificate_expire_date'\r\n                                            name=\"gas_certificate_expire_date\"\r\n                                            placeholder=\"100\"\r\n                                            value={userInput.gas_certificate_expire_date}\r\n                                            onChange={handleChange}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Gas Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={gasstate}\r\n                                            setState={setgasState}\r\n                                            fileUrls={gasfileUrls}\r\n                                            setFileUrls={setgasFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    {/* power */}\r\n                    <Col md='4'>\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_power_certificate\">Power Certified?</Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_power_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_power_certificate: e.target.checked })}\r\n                                        checked={userInput.is_power_certificate}\r\n                                        label='Power Certified?' />\r\n                                </Col>\r\n\r\n                                {userInput.is_power_certificate && <>\r\n                                    <Col md='12' className=\"mt-1\" >\r\n                                        <FormGroup>\r\n                                            <Label for=\"power_certificate_expire_date\">Power Certificate Expire Date</Label>\r\n                                            <Input\r\n                                                required\r\n                                                type=\"date\"\r\n                                                min={new Date().toLocaleDateString('fr-CA')}\r\n                                                id='power_certificate_expire_date'\r\n                                                name=\"power_certificate_expire_date\"\r\n                                                placeholder=\"100\"\r\n                                                value={userInput.power_certificate_expire_date}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Power Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={powerstate}\r\n                                            setState={setpowerState}\r\n                                            fileUrls={powerfileUrls}\r\n                                            setFileUrls={setpowerFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md='4'>\r\n                        {/* insurance */}\r\n                        <Card>\r\n                            <CardBody>\r\n                                <Col md='12' className='mt-1'>\r\n                                    {/* <Label for=\"is_property_insurence_certificate\">Insurence Certified?</Label> */}\r\n                                    <CustomInput\r\n                                        // required\r\n                                        type='checkbox'\r\n                                        className='custom-control-Primary'\r\n                                        id='is_property_insurence_certificate'\r\n                                        onChange={e => setUserInput({ ...userInput, is_property_insurence_certificate: e.target.checked })}\r\n                                        checked={userInput.is_property_insurence_certificate}\r\n                                        label='Insurance Certified?' />\r\n                                </Col>\r\n\r\n                                {userInput.is_property_insurence_certificate && <>\r\n                                    <Col md='12' className=\"mt-1\" >\r\n                                        <FormGroup>\r\n                                            <Label for=\"property_insurence_certificate_expire_date\">Insurance Certificate Expire Date</Label>\r\n                                            <Input\r\n                                                required\r\n                                                type=\"date\"\r\n                                                min={new Date().toLocaleDateString('fr-CA')}\r\n                                                id='property_insurence_certificate_expire_date'\r\n                                                name=\"property_insurence_certificate_expire_date\"\r\n                                                placeholder=\"100\"\r\n                                                value={userInput.property_insurence_certificate_expire_date}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    <Col md='12' className='my-1'>\r\n                                        <Label>Insurance Certificate</Label>\r\n                                        <ImgUpload\r\n                                            setimgUpLoading={setimgUpLoading}\r\n                                            state={insurencestate}\r\n                                            setState={setinsurenceState}\r\n                                            fileUrls={insurencefileUrls}\r\n                                            setFileUrls={setinsurenceFileUrls} />\r\n                                    </Col></>}\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Card>\r\n                    <Row>\r\n                        <Col md=\"12 text-center\">\r\n                            <Button.Ripple className='my-1' color='primary' type=\"submit\" disabled={isLoading}>\r\n                                {isLoading ? <Spinner size='sm' /> : 'Submit'}\r\n                            </Button.Ripple>\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n            </Form>\r\n        </Fragment >\r\n    )\r\n}\r\n\r\nexport default CreateProperty","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  inverse: PropTypes.bool,\n  color: PropTypes.string,\n  body: PropTypes.bool,\n  outline: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar Card = function Card(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      body = props.body,\n      inverse = props.inverse,\n      outline = props.outline,\n      Tag = props.tag,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"body\", \"inverse\", \"outline\", \"tag\", \"innerRef\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color ? (outline ? 'border' : 'bg') + \"-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nCard.propTypes = propTypes;\nCard.defaultProps = defaultProps;\nexport default Card;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar rowColWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar rowColsPropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar propTypes = {\n  tag: tagPropType,\n  noGutters: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  form: PropTypes.bool,\n  xs: rowColsPropType,\n  sm: rowColsPropType,\n  md: rowColsPropType,\n  lg: rowColsPropType,\n  xl: rowColsPropType\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: rowColWidths\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      noGutters = props.noGutters,\n      Tag = props.tag,\n      form = props.form,\n      widths = props.widths,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"noGutters\", \"tag\", \"form\", \"widths\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var colSize = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!colSize) {\n      return;\n    }\n\n    var isXs = !i;\n    colClasses.push(isXs ? \"row-cols-\" + colSize : \"row-cols-\" + colWidth + \"-\" + colSize);\n  });\n  var classes = mapToCssModules(classNames(className, noGutters ? 'no-gutters' : null, form ? 'form-row' : 'row', colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = propTypes;\nRow.defaultProps = defaultProps;\nexport default Row;","import React, { useState } from 'react'\r\nimport { Upload, Modal } from 'antd'\r\n// import { PlusOutlined } from '@ant-design/icons'\r\nimport 'antd/dist/antd.css'\r\nimport { Slide, toast } from 'react-toastify'\r\nimport useJwt from '@src/auth/jwt/useJwt'\r\nimport { Camera } from 'react-feather'\r\nimport { Error } from '../../../viewhelper'\r\nimport { IMG_BASE_URL } from '../../../Configuarables'\r\n\r\nconst ImgUpload = ({ fileUrls, setFileUrls, state, setState, setimgUpLoading }) => {\r\n    // const [fileUrls, setFileUrls] = useState([])\r\n    function getBase64(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader()\r\n            reader.readAsDataURL(file)\r\n            reader.onload = () => resolve(reader.result)\r\n            reader.onerror = error => reject(error)\r\n        })\r\n    }\r\n    // const [state, setState] = useState({\r\n    //     previewVisible: false,\r\n    //     previewImage: '',\r\n    //     previewTitle: '',\r\n    //     fileList: []\r\n    // })\r\n    const { previewVisible, previewImage, fileList, previewTitle } = state\r\n    const handleCancel = () => setState({ ...state, previewVisible: false })\r\n\r\n    const handlePreview = async file => {\r\n        if (!file.url && !file.preview) {\r\n            file.preview = await getBase64(file.originFileObj)\r\n        }\r\n        setState({\r\n            ...state,\r\n            previewImage: file.url || file.preview,\r\n            previewVisible: true,\r\n            previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\r\n        })\r\n    }\r\n    const handleChange = ({ fileList, file }) => {\r\n        // console.log(fileList, fileUrls)\r\n        if (file.size / 1024 / 1024 > 2) {\r\n            return 0\r\n        }\r\n        const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\r\n        if (!isJpgOrPng) {\r\n            return 0\r\n        }\r\n        setFileUrls(fileUrls.filter(a => fileList.some(b => a.uid === b.uid)))\r\n        setState({ ...state, fileList: fileList.filter(x => x.type.includes('image')) })\r\n    }\r\n    const uploadButton = (\r\n        <div className='text-center p-1' style={{ height: '102px', width: '102px' }}>\r\n            <span ><Camera size={20} className='my-1' /></span> <br />\r\n            <span>Add Image</span>\r\n        </div>\r\n        // <div>\r\n        //     <PlusOutlined />\r\n        //     <div style={{ marginTop: 8 }}>Upload</div>\r\n        // </div>\r\n    )\r\n    const props = {\r\n        beforeUpload: file => {\r\n            const isLt2M = file.size / 1024 / 1024 < 2\r\n            const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png'\r\n            if (!isJpgOrPng) {\r\n                toast.error(`${file.name} is not a Image file`)\r\n            } else if (!isLt2M) {\r\n                toast.error('Image must smaller than 2MB!')\r\n            } else {\r\n                const formData = new FormData()\r\n                formData.append('complain_image', file)\r\n                setimgUpLoading(true)\r\n                useJwt.singleFileupload(formData).then(res => {\r\n                    // alert(\"upload done\")\r\n                    setimgUpLoading(false)\r\n                    setFileUrls([\r\n                        ...fileUrls,\r\n                        {\r\n                            uid: file.uid,\r\n                            name: 'image.png',\r\n                            status: 'done',\r\n                            type: \"image/jpeg\",\r\n                            url: res.data.payload.fileurl\r\n                        }\r\n                    ])\r\n                }).catch(err => {\r\n                    setimgUpLoading(false)\r\n                    console.log(err)\r\n                    Error(err)\r\n                })\r\n                return isJpgOrPng && isLt2M\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Upload\r\n                {...props}\r\n                action={`${IMG_BASE_URL}/api/fackupload`}\r\n                listType=\"picture-card\"\r\n                fileList={fileList}\r\n                onPreview={handlePreview}\r\n                onChange={handleChange}\r\n            >\r\n                {fileList.length >= 1 ? null : uploadButton}\r\n            </Upload>\r\n            <Modal\r\n                visible={previewVisible}\r\n                title={previewTitle}\r\n                footer={null}\r\n                onCancel={handleCancel}\r\n            >\r\n                <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImgUpload"],"sourceRoot":""}